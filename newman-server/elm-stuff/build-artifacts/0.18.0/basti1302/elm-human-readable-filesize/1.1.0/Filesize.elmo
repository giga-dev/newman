var _basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex = _elm_lang$core$Regex$regex('^(\\d+\\.[^0]*)(0+)$');
var _basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex = _elm_lang$core$Regex$regex(
	_elm_lang$core$Regex$escape('.'));
var _basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces = F2(
	function (settings, num) {
		var rounded = A2(_myrho$elm_round$Round$floor, settings.decimalPlaces, num);
		var withoutTrailingZeroes = A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			_basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex,
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_lang$core$String$join,
					'',
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Maybe$withDefault(''),
						A2(_elm_lang$core$List$take, 1, _p1.submatches)));
			},
			rounded);
		var withoutTrailingDot = A2(_elm_lang$core$String$endsWith, '.', withoutTrailingZeroes) ? A2(_elm_lang$core$String$dropRight, 1, withoutTrailingZeroes) : withoutTrailingZeroes;
		return _elm_lang$core$Native_Utils.eq(settings.decimalSeparator, '.') ? withoutTrailingDot : A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			_basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex,
			function (_p2) {
				return settings.decimalSeparator;
			},
			withoutTrailingDot);
	});
var _basti1302$elm_human_readable_filesize$Filesize$unknownUnit = {minimumSize: 1, abbreviation: '?'};
var _basti1302$elm_human_readable_filesize$Filesize$base2UnitList = {
	ctor: '::',
	_0: {minimumSize: 1, abbreviation: 'B'},
	_1: {
		ctor: '::',
		_0: {minimumSize: 1024, abbreviation: 'KiB'},
		_1: {
			ctor: '::',
			_0: {minimumSize: 1048576, abbreviation: 'MiB'},
			_1: {
				ctor: '::',
				_0: {minimumSize: 1073741824, abbreviation: 'GiB'},
				_1: {
					ctor: '::',
					_0: {minimumSize: 1099511627776, abbreviation: 'TiB'},
					_1: {
						ctor: '::',
						_0: {minimumSize: 1125899906842624, abbreviation: 'PiB'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	}
};
var _basti1302$elm_human_readable_filesize$Filesize$base10UnitList = {
	ctor: '::',
	_0: {minimumSize: 1, abbreviation: 'B'},
	_1: {
		ctor: '::',
		_0: {minimumSize: 1000, abbreviation: 'kB'},
		_1: {
			ctor: '::',
			_0: {minimumSize: 1000000, abbreviation: 'MB'},
			_1: {
				ctor: '::',
				_0: {minimumSize: 1000000000, abbreviation: 'GB'},
				_1: {
					ctor: '::',
					_0: {minimumSize: 1000000000000, abbreviation: 'TB'},
					_1: {
						ctor: '::',
						_0: {minimumSize: 1000000000000000, abbreviation: 'PB'},
						_1: {
							ctor: '::',
							_0: {minimumSize: 1000000000000000000, abbreviation: 'EB'},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	}
};
var _basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList = function (units) {
	var _p3 = units;
	if (_p3.ctor === 'Base10') {
		return _basti1302$elm_human_readable_filesize$Filesize$base10UnitList;
	} else {
		return _basti1302$elm_human_readable_filesize$Filesize$base2UnitList;
	}
};
var _basti1302$elm_human_readable_filesize$Filesize$formatWith = F2(
	function (settings, num) {
		if (_elm_lang$core$Native_Utils.eq(num, 0)) {
			return '0 B';
		} else {
			var unitDefinitionList = _basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList(settings.units);
			var _p4 = (_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$negate(num),
				_1: '-'
			} : {ctor: '_Tuple2', _0: num, _1: ''};
			var num2 = _p4._0;
			var negativePrefix = _p4._1;
			var unitDefinition = A2(
				_elm_lang$core$Maybe$withDefault,
				_basti1302$elm_human_readable_filesize$Filesize$unknownUnit,
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$filter,
							function (unitDef) {
								return _elm_lang$core$Native_Utils.cmp(num2, unitDef.minimumSize) > -1;
							},
							unitDefinitionList))));
			var formattedNumber = A2(
				_basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces,
				settings,
				_elm_lang$core$Basics$toFloat(num2) / _elm_lang$core$Basics$toFloat(unitDefinition.minimumSize));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				negativePrefix,
				A2(
					_elm_lang$core$Basics_ops['++'],
					formattedNumber,
					A2(_elm_lang$core$Basics_ops['++'], ' ', unitDefinition.abbreviation)));
		}
	});
var _basti1302$elm_human_readable_filesize$Filesize$Settings = F3(
	function (a, b, c) {
		return {units: a, decimalPlaces: b, decimalSeparator: c};
	});
var _basti1302$elm_human_readable_filesize$Filesize$UnitDefinition = F2(
	function (a, b) {
		return {minimumSize: a, abbreviation: b};
	});
var _basti1302$elm_human_readable_filesize$Filesize$Base2 = {ctor: 'Base2'};
var _basti1302$elm_human_readable_filesize$Filesize$Base10 = {ctor: 'Base10'};
var _basti1302$elm_human_readable_filesize$Filesize$defaultSettings = {units: _basti1302$elm_human_readable_filesize$Filesize$Base10, decimalPlaces: 2, decimalSeparator: '.'};
var _basti1302$elm_human_readable_filesize$Filesize$format = _basti1302$elm_human_readable_filesize$Filesize$formatWith(_basti1302$elm_human_readable_filesize$Filesize$defaultSettings);
var _basti1302$elm_human_readable_filesize$Filesize$formatBase2 = _basti1302$elm_human_readable_filesize$Filesize$formatWith(
	_elm_lang$core$Native_Utils.update(
		_basti1302$elm_human_readable_filesize$Filesize$defaultSettings,
		{units: _basti1302$elm_human_readable_filesize$Filesize$Base2}));
