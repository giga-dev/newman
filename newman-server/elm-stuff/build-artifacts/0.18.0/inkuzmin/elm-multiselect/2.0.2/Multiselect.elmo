var _inkuzmin$elm_multiselect$Multiselect$onKeyPress = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _rtfeldman$elm_css$Html_Styled_Events$keyCode));
};
var _inkuzmin$elm_multiselect$Multiselect$onKeyUp = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'keyup',
		A2(_elm_lang$core$Json_Decode$map, tagger, _rtfeldman$elm_css$Html_Styled_Events$targetValue));
};
var _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault = function (message) {
	var config = {stopPropagation: true, preventDefault: true};
	return A3(
		_rtfeldman$elm_css$Html_Styled_Events$onWithOptions,
		'click',
		config,
		_elm_lang$core$Json_Decode$succeed(message));
};
var _inkuzmin$elm_multiselect$Multiselect_ops = _inkuzmin$elm_multiselect$Multiselect_ops || {};
_inkuzmin$elm_multiselect$Multiselect_ops[':>'] = F2(
	function (f, x) {
		return f(x);
	});
var _inkuzmin$elm_multiselect$Multiselect$onKeyDown = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'keypress',
		A2(
			_elm_lang$core$Json_Decode$map,
			tagger,
			A2(
				_inkuzmin$elm_multiselect$Multiselect_ops[':>'],
				_debois$elm_dom$DOM$target,
				A2(_inkuzmin$elm_multiselect$Multiselect_ops[':>'], _debois$elm_dom$DOM$previousSibling, _debois$elm_dom$DOM$offsetWidth))));
};
var _inkuzmin$elm_multiselect$Multiselect$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _inkuzmin$elm_multiselect$Multiselect$delay = F2(
	function (time, msg) {
		return A2(
			_elm_lang$core$Task$perform,
			function (_p1) {
				return msg;
			},
			_elm_lang$core$Process$sleep(time));
	});
var _inkuzmin$elm_multiselect$Multiselect$nextItem = F2(
	function (list, item) {
		var findNextInList = function (l) {
			findNextInList:
			while (true) {
				var _p2 = l;
				if (_p2.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p2._1.ctor === '[]') {
						return _elm_lang$core$Native_Utils.eq(_p2._0, item) ? _elm_lang$core$List$head(list) : _elm_lang$core$Maybe$Nothing;
					} else {
						var _p3 = _p2._1._0;
						if (_elm_lang$core$Native_Utils.eq(_p2._0, item)) {
							return _elm_lang$core$Maybe$Just(_p3);
						} else {
							var _v2 = {ctor: '::', _0: _p3, _1: _p2._1._1};
							l = _v2;
							continue findNextInList;
						}
					}
				}
			}
		};
		return findNextInList(list);
	});
var _inkuzmin$elm_multiselect$Multiselect$prevItem = F2(
	function (list, item) {
		return A2(
			_inkuzmin$elm_multiselect$Multiselect$nextItem,
			_elm_lang$core$List$reverse(list),
			item);
	});
var _inkuzmin$elm_multiselect$Multiselect$nextSelectedItem = F2(
	function (list, item) {
		var takeLast = function (l) {
			var _p4 = l;
			if (_p4.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p4._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p4._1._0);
				}
			}
		};
		var findNextInList = function (l) {
			findNextInList:
			while (true) {
				var _p5 = l;
				if (_p5.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p5._1.ctor === '[]') {
						return _elm_lang$core$Native_Utils.eq(_p5._0, item) ? takeLast(
							_elm_lang$core$List$reverse(list)) : _elm_lang$core$Maybe$Nothing;
					} else {
						var _p6 = _p5._1._0;
						if (_elm_lang$core$Native_Utils.eq(_p5._0, item)) {
							return _elm_lang$core$Maybe$Just(_p6);
						} else {
							var _v5 = {ctor: '::', _0: _p6, _1: _p5._1._1};
							l = _v5;
							continue findNextInList;
						}
					}
				}
			}
		};
		return findNextInList(list);
	});
var _inkuzmin$elm_multiselect$Multiselect$lastElem = A2(
	_elm_lang$core$List$foldl,
	function (_p7) {
		return _elm_lang$core$Basics$always(
			_elm_lang$core$Maybe$Just(_p7));
	},
	_elm_lang$core$Maybe$Nothing);
var _inkuzmin$elm_multiselect$Multiselect$indexOf = F2(
	function (el, list) {
		var helper = F2(
			function (l, index) {
				helper:
				while (true) {
					var _p8 = l;
					if (_p8.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						if (_elm_lang$core$Native_Utils.eq(_p8._0, el)) {
							return _elm_lang$core$Maybe$Just(index);
						} else {
							var _v7 = _p8._1,
								_v8 = index + 1;
							l = _v7;
							index = _v8;
							continue helper;
						}
					}
				}
			});
		return A2(helper, list, 0);
	});
var _inkuzmin$elm_multiselect$Multiselect$fitViewPort = F2(
	function (_p10, _p9) {
		var _p11 = _p10;
		var _p16 = _p11._0;
		var _p15 = _p11._1;
		var _p12 = _p9;
		var _p14 = _p12._0;
		var _p13 = _p12._1;
		return (_elm_lang$core$Native_Utils.cmp(_p16, _p14) < 0) ? _p16 : ((_elm_lang$core$Native_Utils.cmp(_p15, _p13) > 0) ? (_p14 + (_p15 - _p13)) : _p14);
	});
var _inkuzmin$elm_multiselect$Multiselect$getBoundaries = function (i) {
	return {ctor: '_Tuple2', _0: i * _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight, _1: (i * _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight) + _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight};
};
var _inkuzmin$elm_multiselect$Multiselect$getViewPortBoundaries = function (i) {
	return {ctor: '_Tuple2', _0: i, _1: i + _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuHeight};
};
var _inkuzmin$elm_multiselect$Multiselect$filter = F2(
	function (selected, values) {
		return A2(
			_elm_lang$core$List$filter,
			function (value) {
				return !A2(_elm_lang$core$List$member, value, selected);
			},
			values);
	});
var _inkuzmin$elm_multiselect$Multiselect$populateValues = F3(
	function (model, values, selected) {
		var filtered = _elm_lang$core$List$isEmpty(selected) ? values : A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, values);
		return _elm_lang$core$Native_Utils.update(
			model,
			{values: values, filtered: filtered, selected: selected});
	});
var _inkuzmin$elm_multiselect$Multiselect$getSelectedValues = function (model) {
	return model.selected;
};
var _inkuzmin$elm_multiselect$Multiselect$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {status: a, values: b, filtered: c, selected: d, $protected: e, error: f, input: g, inputWidth: h, hovered: i, tag: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _inkuzmin$elm_multiselect$Multiselect$Opened = {ctor: 'Opened'};
var _inkuzmin$elm_multiselect$Multiselect$Focused = {ctor: 'Focused'};
var _inkuzmin$elm_multiselect$Multiselect$Closed = {ctor: 'Closed'};
var _inkuzmin$elm_multiselect$Multiselect$initModel = F2(
	function (values, tag) {
		return _inkuzmin$elm_multiselect$Multiselect$Model(_inkuzmin$elm_multiselect$Multiselect$Closed)(values)(values)(
			{ctor: '[]'})(false)(_elm_lang$core$Maybe$Nothing)('')(23.0)(
			_elm_lang$core$List$head(values))(tag);
	});
var _inkuzmin$elm_multiselect$Multiselect$ScrollY = function (a) {
	return {ctor: 'ScrollY', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Shortcut = function (a) {
	return {ctor: 'Shortcut', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$OnHover = function (a) {
	return {ctor: 'OnHover', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Adjust = function (a) {
	return {ctor: 'Adjust', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Filter = function (a) {
	return {ctor: 'Filter', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$ScrollResult = function (a) {
	return {ctor: 'ScrollResult', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$FocusResult = function (a) {
	return {ctor: 'FocusResult', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Clear = {ctor: 'Clear'};
var _inkuzmin$elm_multiselect$Multiselect$clear = function (model) {
	return (!_elm_lang$core$List$isEmpty(model.selected)) ? A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$clearWrap,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault(_inkuzmin$elm_multiselect$Multiselect$Clear),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
						{
							ctor: '::',
							_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$clear,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled$text('Ã—'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}) : A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _inkuzmin$elm_multiselect$Multiselect$RemoveItem = function (a) {
	return {ctor: 'RemoveItem', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$tag = F2(
	function (name, value) {
		return A2(
			_rtfeldman$elm_css$Html_Styled$div,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
					{
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tag,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_rtfeldman$elm_css$Html_Styled$span,
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
							{
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagIcon,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Events$onClick(
								_inkuzmin$elm_multiselect$Multiselect$RemoveItem(
									{ctor: '_Tuple2', _0: name, _1: value})),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled$text('Ã—'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_rtfeldman$elm_css$Html_Styled$span,
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
								{
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagLabel,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled$text(value),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _inkuzmin$elm_multiselect$Multiselect$tags = function (model) {
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagWrap,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (_p17) {
				var _p18 = _p17;
				return A2(_inkuzmin$elm_multiselect$Multiselect$tag, _p18._0, _p18._1);
			},
			model.selected));
};
var _inkuzmin$elm_multiselect$Multiselect$OnSelect = function (a) {
	return {ctor: 'OnSelect', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$menu = function (model) {
	var _p19 = model.status;
	if (_p19.ctor === 'Opened') {
		var hovered = function () {
			var _p20 = model.hovered;
			if (_p20.ctor === 'Nothing') {
				return '';
			} else {
				return _inkuzmin$elm_multiselect$Multiselect_Utils$fst(_p20._0);
			}
		}();
		return A2(
			_rtfeldman$elm_css$Html_Styled$div,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
					{
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menu,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$id(
						A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag)),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$List$map,
				function (_p21) {
					var _p22 = _p21;
					var _p24 = _p22._1;
					var _p23 = _p22._0;
					return A2(
						_rtfeldman$elm_css$Html_Styled$div,
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
								_elm_lang$core$Native_Utils.eq(_p23, hovered) ? {
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItemHovered,
									_1: {
										ctor: '::',
										_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItem,
										_1: {ctor: '[]'}
									}
								} : {
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItem,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault(
									_inkuzmin$elm_multiselect$Multiselect$OnSelect(
										{ctor: '_Tuple2', _0: _p23, _1: _p24})),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Html_Styled_Events$onMouseOver(
										_inkuzmin$elm_multiselect$Multiselect$OnHover(
											{ctor: '_Tuple2', _0: _p23, _1: _p24})),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled$text(_p24),
							_1: {ctor: '[]'}
						});
				},
				model.filtered));
	} else {
		return A2(
			_rtfeldman$elm_css$Html_Styled$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _inkuzmin$elm_multiselect$Multiselect$Toggle = {ctor: 'Toggle'};
var _inkuzmin$elm_multiselect$Multiselect$arrow = function (model) {
	var arrowRel = _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? 'arrowUpside' : 'arrow';
	var arrowCss = _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrowUpside,
		_1: {ctor: '[]'}
	} : {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrow,
		_1: {ctor: '[]'}
	};
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrowWrap,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault(_inkuzmin$elm_multiselect$Multiselect$Toggle),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(arrowCss),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled_Attributes$rel(arrowRel),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _inkuzmin$elm_multiselect$Multiselect$DisableProtection = {ctor: 'DisableProtection'};
var _inkuzmin$elm_multiselect$Multiselect$ClickOnComponent = {ctor: 'ClickOnComponent'};
var _inkuzmin$elm_multiselect$Multiselect$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$subscriptions = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? _elm_lang$mouse$Mouse$clicks(_inkuzmin$elm_multiselect$Multiselect$Click) : _elm_lang$core$Platform_Sub$none;
};
var _inkuzmin$elm_multiselect$Multiselect$Start = {ctor: 'Start'};
var _inkuzmin$elm_multiselect$Multiselect$preventDefaultButtons = function () {
	var filterKey = function (code) {
		return (_elm_lang$core$Native_Utils.eq(code, _inkuzmin$elm_multiselect$Multiselect_Keycodes$upArrow) || _elm_lang$core$Native_Utils.eq(code, _inkuzmin$elm_multiselect$Multiselect_Keycodes$downArrow)) ? _elm_lang$core$Result$Ok(code) : _elm_lang$core$Result$Err('ignored input');
	};
	var decoder = A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Basics$always(_inkuzmin$elm_multiselect$Multiselect$Start),
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (_p25) {
				return _inkuzmin$elm_multiselect$Multiselect$fromResult(
					filterKey(_p25));
			},
			_rtfeldman$elm_css$Html_Styled_Events$keyCode));
	var options = {preventDefault: true, stopPropagation: false};
	return A3(_rtfeldman$elm_css$Html_Styled_Events$onWithOptions, 'keydown', options, decoder);
}();
var _inkuzmin$elm_multiselect$Multiselect$input = function (model) {
	var value = _elm_lang$core$Native_Utils.eq(model.input, _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter) ? A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$property,
		'value',
		_elm_lang$core$Json_Encode$string(model.input)) : A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$property,
		'type',
		_elm_lang$core$Json_Encode$string('text'));
	var w = _elm_lang$core$Basics$toString(model.inputWidth + 23.0);
	var inputStyle = _rtfeldman$elm_css$Html_Styled_Attributes$style(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'width',
				_1: A2(_elm_lang$core$Basics_ops['++'], w, 'px')
			},
			_1: {ctor: '[]'}
		});
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect$preventDefaultButtons,
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
					{
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$inputWrap,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
						{
							ctor: '::',
							_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$inputMirrow,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled$text(model.input),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_rtfeldman$elm_css$Html_Styled$input,
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled_Attributes$id(
							A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
								{
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$input,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect$onKeyDown(_inkuzmin$elm_multiselect$Multiselect$Adjust),
								_1: {
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect$onKeyPress(_inkuzmin$elm_multiselect$Multiselect$Shortcut),
									_1: {
										ctor: '::',
										_0: _inkuzmin$elm_multiselect$Multiselect$onKeyUp(_inkuzmin$elm_multiselect$Multiselect$Filter),
										_1: {
											ctor: '::',
											_0: inputStyle,
											_1: {
												ctor: '::',
												_0: value,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _inkuzmin$elm_multiselect$Multiselect$styledView = function (model) {
	var inputCss = _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Focused) ? {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$container,
		_1: {
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$focused,
			_1: {ctor: '[]'}
		}
	} : (_elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$container,
		_1: {
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$opened,
			_1: {ctor: '[]'}
		}
	} : {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$container,
		_1: {ctor: '[]'}
	});
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$wrap,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Events$onClick(_inkuzmin$elm_multiselect$Multiselect$ClickOnComponent),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(inputCss),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect$tags(model),
					_1: {
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect$input(model),
						_1: {
							ctor: '::',
							_0: _inkuzmin$elm_multiselect$Multiselect$clear(model),
							_1: {
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect$arrow(model),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _inkuzmin$elm_multiselect$Multiselect$menu(model),
				_1: {ctor: '[]'}
			}
		});
};
var _inkuzmin$elm_multiselect$Multiselect$view = function (_p26) {
	return _rtfeldman$elm_css$Html_Styled$toUnstyled(
		_inkuzmin$elm_multiselect$Multiselect$styledView(_p26));
};
var _inkuzmin$elm_multiselect$Multiselect$Cleared = {ctor: 'Cleared'};
var _inkuzmin$elm_multiselect$Multiselect$Unselected = function (a) {
	return {ctor: 'Unselected', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Selected = function (a) {
	return {ctor: 'Selected', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$update = F2(
	function (msg, model) {
		var _p27 = msg;
		switch (_p27.ctor) {
			case 'Start':
				return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
			case 'Toggle':
				return _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Closed}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Nothing
				} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Opened}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'Click':
				return model.$protected ? {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{$protected: false}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Closed}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'DisableProtection':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{$protected: false}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'ClickOnComponent':
				return model.$protected ? {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Opened, $protected: true}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {
								ctor: '::',
								_0: A2(_inkuzmin$elm_multiselect$Multiselect$delay, _elm_lang$core$Time$millisecond * 100, _inkuzmin$elm_multiselect$Multiselect$DisableProtection),
								_1: {ctor: '[]'}
							}
						}),
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'ScrollResult':
				var _p28 = _p27._0;
				if (_p28.ctor === 'Err') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'Could not find dom id: ', _p28._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					return _elm_lang$core$Native_Utils.eq(model.input, _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter) ? {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{input: ''}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					} : {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{error: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				}
			case 'FocusResult':
				var _p29 = _p27._0;
				if (_p29.ctor === 'Err') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'Could not find dom id: ', _p29._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					return _elm_lang$core$Native_Utils.eq(model.input, _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter) ? {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{input: ''}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					} : {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{error: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				}
			case 'Adjust':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{inputWidth: _p27._0}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'Filter':
				var _p33 = _p27._0;
				var filtered = A2(
					_inkuzmin$elm_multiselect$Multiselect$filter,
					model.selected,
					A2(
						_elm_lang$core$List$filter,
						function (_p30) {
							var _p31 = _p30;
							return A2(
								_elm_lang$core$String$contains,
								_elm_lang$core$String$toLower(_p33),
								_elm_lang$core$String$toLower(_p31._1));
						},
						model.values));
				if (model.$protected) {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{$protected: false}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					var _p32 = model.hovered;
					if (_p32.ctor === 'Nothing') {
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									filtered: filtered,
									input: _p33,
									hovered: _elm_lang$core$List$head(filtered),
									status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					} else {
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(
								A2(
									_elm_lang$core$List$filter,
									function (i) {
										return _elm_lang$core$Native_Utils.eq(i, _p32._0);
									},
									filtered)),
							0) ? {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									filtered: filtered,
									input: _p33,
									hovered: _elm_lang$core$List$head(filtered),
									status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						} : {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									filtered: filtered,
									input: _p33,
									status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					}
				}
			case 'OnSelect':
				var _p34 = _p27._0;
				var selected = A2(
					_elm_lang$core$Basics_ops['++'],
					model.selected,
					{
						ctor: '::',
						_0: _p34,
						_1: {ctor: '[]'}
					});
				var filtered = A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values);
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: selected,
							filtered: filtered,
							hovered: A2(_inkuzmin$elm_multiselect$Multiselect$nextSelectedItem, model.filtered, _p34),
							input: _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter,
							status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Just(
						_inkuzmin$elm_multiselect$Multiselect$Selected(_p34))
				};
			case 'RemoveItem':
				var _p35 = _p27._0;
				var selected = A2(
					_elm_lang$core$List$filter,
					function (value) {
						return !_elm_lang$core$Native_Utils.eq(value, _p35);
					},
					model.selected);
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: selected,
							filtered: A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values),
							hovered: _elm_lang$core$Maybe$Just(_p35)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$ScrollY,
								_elm_lang$dom$Dom_Scroll$y(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Just(
						_inkuzmin$elm_multiselect$Multiselect$Unselected(_p35))
				};
			case 'Clear':
				var selected = {ctor: '[]'};
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: selected,
							filtered: A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values),
							input: _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter,
							status: _inkuzmin$elm_multiselect$Multiselect$Closed
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Just(_inkuzmin$elm_multiselect$Multiselect$Cleared)
				};
			case 'OnHover':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							hovered: _elm_lang$core$Maybe$Just(_p27._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'ScrollY':
				var _p36 = _p27._0;
				if (_p36.ctor === 'Err') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'Could not find dom id: ', _p36._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					var _p37 = model.hovered;
					if (_p37.ctor === 'Nothing') {
						return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
					} else {
						var _p38 = A2(_inkuzmin$elm_multiselect$Multiselect$indexOf, _p37._0, model.filtered);
						if (_p38.ctor === 'Nothing') {
							return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
						} else {
							var vpBoundaries = _inkuzmin$elm_multiselect$Multiselect$getViewPortBoundaries(_p36._0);
							var boundaries = _inkuzmin$elm_multiselect$Multiselect$getBoundaries(
								_elm_lang$core$Basics$toFloat(_p38._0));
							var scroll = A2(_inkuzmin$elm_multiselect$Multiselect$fitViewPort, boundaries, vpBoundaries);
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{error: _elm_lang$core$Maybe$Nothing}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_elm_lang$core$Task$attempt,
											_inkuzmin$elm_multiselect$Multiselect$ScrollResult,
											A2(
												_elm_lang$dom$Dom_Scroll$toY,
												A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag),
												scroll)),
										_1: {ctor: '[]'}
									}),
								_2: _elm_lang$core$Maybe$Nothing
							};
						}
					}
				}
			default:
				var _p45 = _p27._0;
				if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$upArrow)) {
					var _p39 = model.hovered;
					if (_p39.ctor === 'Nothing') {
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									hovered: _elm_lang$core$List$head(model.filtered)
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					} else {
						var prev = A2(_inkuzmin$elm_multiselect$Multiselect$prevItem, model.filtered, _p39._0);
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{hovered: prev}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: A2(
										_elm_lang$core$Task$attempt,
										_inkuzmin$elm_multiselect$Multiselect$ScrollY,
										_elm_lang$dom$Dom_Scroll$y(
											A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
									_1: {ctor: '[]'}
								}),
							_2: _elm_lang$core$Maybe$Nothing
						};
					}
				} else {
					if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$downArrow)) {
						var _p40 = model.hovered;
						if (_p40.ctor === 'Nothing') {
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										hovered: _elm_lang$core$List$head(model.filtered)
									}),
								_1: _elm_lang$core$Platform_Cmd$none,
								_2: _elm_lang$core$Maybe$Nothing
							};
						} else {
							var next = A2(_inkuzmin$elm_multiselect$Multiselect$nextItem, model.filtered, _p40._0);
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{hovered: next}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_elm_lang$core$Task$attempt,
											_inkuzmin$elm_multiselect$Multiselect$ScrollY,
											_elm_lang$dom$Dom_Scroll$y(
												A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
										_1: {ctor: '[]'}
									}),
								_2: _elm_lang$core$Maybe$Nothing
							};
						}
					} else {
						if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$pageUp) || _elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$home)) {
							var first = _elm_lang$core$List$head(model.filtered);
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{hovered: first}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_elm_lang$core$Task$attempt,
											_inkuzmin$elm_multiselect$Multiselect$ScrollY,
											_elm_lang$dom$Dom_Scroll$y(
												A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
										_1: {ctor: '[]'}
									}),
								_2: _elm_lang$core$Maybe$Nothing
							};
						} else {
							if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$pageDown) || _elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$end)) {
								var last = _inkuzmin$elm_multiselect$Multiselect$lastElem(model.filtered);
								return {
									ctor: '_Tuple3',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{hovered: last}),
									_1: _elm_lang$core$Platform_Cmd$batch(
										{
											ctor: '::',
											_0: A2(
												_elm_lang$core$Task$attempt,
												_inkuzmin$elm_multiselect$Multiselect$ScrollY,
												_elm_lang$dom$Dom_Scroll$y(
													A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
											_1: {ctor: '[]'}
										}),
									_2: _elm_lang$core$Maybe$Nothing
								};
							} else {
								if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$return)) {
									var _p41 = model.hovered;
									if (_p41.ctor === 'Nothing') {
										return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
									} else {
										var _p42 = _p41._0;
										var selected = A2(
											_elm_lang$core$Basics_ops['++'],
											model.selected,
											{
												ctor: '::',
												_0: _p42,
												_1: {ctor: '[]'}
											});
										var filtered = A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values);
										return {
											ctor: '_Tuple3',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{
													selected: selected,
													filtered: filtered,
													hovered: A2(_inkuzmin$elm_multiselect$Multiselect$nextSelectedItem, model.filtered, _p42),
													input: _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter,
													status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
												}),
											_1: _elm_lang$core$Platform_Cmd$batch(
												{
													ctor: '::',
													_0: A2(
														_elm_lang$core$Task$attempt,
														_inkuzmin$elm_multiselect$Multiselect$FocusResult,
														_elm_lang$dom$Dom$focus(
															A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
													_1: {ctor: '[]'}
												}),
											_2: _elm_lang$core$Maybe$Just(
												_inkuzmin$elm_multiselect$Multiselect$Selected(_p42))
										};
									}
								} else {
									if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$escape)) {
										return {
											ctor: '_Tuple3',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{status: _inkuzmin$elm_multiselect$Multiselect$Closed, $protected: true}),
											_1: _elm_lang$core$Platform_Cmd$none,
											_2: _elm_lang$core$Maybe$Nothing
										};
									} else {
										if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$tab)) {
											return {
												ctor: '_Tuple3',
												_0: _elm_lang$core$Native_Utils.update(
													model,
													{status: _inkuzmin$elm_multiselect$Multiselect$Closed}),
												_1: _elm_lang$core$Platform_Cmd$none,
												_2: _elm_lang$core$Maybe$Nothing
											};
										} else {
											if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$backspace)) {
												if (_elm_lang$core$Native_Utils.eq(model.input, '')) {
													var _p43 = _inkuzmin$elm_multiselect$Multiselect$lastElem(model.selected);
													if (_p43.ctor === 'Nothing') {
														return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
													} else {
														var _p44 = _p43._0;
														var selected = A2(
															_elm_lang$core$List$filter,
															function (value) {
																return !_elm_lang$core$Native_Utils.eq(value, _p44);
															},
															model.selected);
														return {
															ctor: '_Tuple3',
															_0: _elm_lang$core$Native_Utils.update(
																model,
																{
																	selected: selected,
																	filtered: A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values),
																	hovered: _elm_lang$core$Maybe$Just(_p44)
																}),
															_1: _elm_lang$core$Platform_Cmd$batch(
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$core$Task$attempt,
																		_inkuzmin$elm_multiselect$Multiselect$ScrollY,
																		_elm_lang$dom$Dom_Scroll$y(
																			A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
																	_1: {ctor: '[]'}
																}),
															_2: _elm_lang$core$Maybe$Just(
																_inkuzmin$elm_multiselect$Multiselect$Unselected(_p44))
														};
													}
												} else {
													return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
												}
											} else {
												return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
											}
										}
									}
								}
							}
						}
					}
				}
		}
	});
