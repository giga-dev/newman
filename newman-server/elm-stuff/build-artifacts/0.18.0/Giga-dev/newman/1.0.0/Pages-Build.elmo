var _Giga_dev$newman$Pages_Build$initModel = function () {
	var maxEntries = 40;
	return {maybeBuild: _elm_lang$core$Maybe$Nothing, maybeJobsTableModel: _elm_lang$core$Maybe$Nothing, currTime: _elm_lang$core$Maybe$Nothing};
}();
var _Giga_dev$newman$Pages_Build$parseBuildId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Build$Model = F3(
	function (a, b, c) {
		return {maybeBuild: a, maybeJobsTableModel: b, currTime: c};
	});
var _Giga_dev$newman$Pages_Build$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Build$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Build$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Build$ReceiveTime = function (a) {
	return {ctor: 'ReceiveTime', _0: a};
};
var _Giga_dev$newman$Pages_Build$requestTime = A2(_elm_lang$core$Task$perform, _Giga_dev$newman$Pages_Build$ReceiveTime, _elm_lang$core$Time$now);
var _Giga_dev$newman$Pages_Build$JobsTableMsg = function (a) {
	return {ctor: 'JobsTableMsg', _0: a};
};
var _Giga_dev$newman$Pages_Build$view = function (model) {
	var _p0 = {ctor: '_Tuple2', _0: model.maybeBuild, _1: model.maybeJobsTableModel};
	if (((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'Just')) && (_p0._1.ctor === 'Just')) {
		var _p6 = _p0._0._0;
		var viewRow = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(100),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p2._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _p2._1,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		};
		var shasRows = function () {
			var toShaRow = function (_p3) {
				var _p4 = _p3;
				var _p5 = _p4._1;
				return viewRow(
					{
						ctor: '_Tuple2',
						_0: _p4._0,
						_1: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(_p5),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p5),
								_1: {ctor: '[]'}
							})
					});
			};
			return A2(
				_elm_lang$core$List$map,
				toShaRow,
				_elm_lang$core$Dict$toList(_p6.shas));
		}();
		var viewResource = function (resource) {
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(resource),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(resource),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		};
		var resourcesRow = A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'vertical-align', _1: 'top'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Resources'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, viewResource, _p6.resources)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
		var buildDate = A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(_p6.buildTime)));
		var jobsTableView = A2(
			_elm_lang$html$Html$map,
			_Giga_dev$newman$Pages_Build$JobsTableMsg,
			A2(_Giga_dev$newman$Views_JobsTable$viewTable, _p0._1._0, model.currTime));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('text'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'Details for build ', _p6.name)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: viewRow(
									{
										ctor: '_Tuple2',
										_0: 'Build Id',
										_1: _elm_lang$html$Html$text(_p6.id)
									}),
								_1: {
									ctor: '::',
									_0: viewRow(
										{
											ctor: '_Tuple2',
											_0: 'Branch',
											_1: _elm_lang$html$Html$text(_p6.branch)
										}),
									_1: {
										ctor: '::',
										_0: viewRow(
											{
												ctor: '_Tuple2',
												_0: 'Tags',
												_1: _elm_lang$html$Html$text(
													A2(_elm_lang$core$String$join, ',', _p6.tags))
											}),
										_1: {
											ctor: '::',
											_0: viewRow(
												{
													ctor: '_Tuple2',
													_0: 'Build Time',
													_1: _elm_lang$html$Html$text(buildDate)
												}),
											_1: {
												ctor: '::',
												_0: resourcesRow,
												_1: {
													ctor: '::',
													_0: viewRow(
														{
															ctor: '_Tuple2',
															_0: 'Test Metadata',
															_1: _elm_lang$html$Html$text(
																A2(_elm_lang$core$String$join, ',', _p6.testsMetadata))
														}),
													_1: {
														ctor: '::',
														_0: viewRow(
															{
																ctor: '_Tuple2',
																_0: 'Commits:',
																_1: _elm_lang$html$Html$text('')
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							shasRows)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h2,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('text'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Participate in the following jobs:'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: jobsTableView,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _Giga_dev$newman$Pages_Build$GetJobsInfoCompleted = function (a) {
	return {ctor: 'GetJobsInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Build$getJobsInfoCmd = function (buildId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Build$GetJobsInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job?buildId=',
				A2(_elm_lang$core$Basics_ops['++'], buildId, '&all=true')),
			A2(
				_elm_lang$core$Json_Decode$field,
				'values',
				_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeJob))));
};
var _Giga_dev$newman$Pages_Build$update = F2(
	function (msg, model) {
		var d = A2(
			_elm_lang$core$Debug$log,
			'Build.update',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'was called',
				_elm_lang$core$Basics$toString(msg)));
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'GetBuildInfoCompleted':
				var _p8 = _p7._0;
				if (_p8.ctor === 'Ok') {
					var _p9 = _p8._0;
					var d = A2(_elm_lang$core$Debug$log, 'Build.update', 'was called');
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeBuild: _elm_lang$core$Maybe$Just(_p9)
							}),
						_1: _Giga_dev$newman$Pages_Build$getJobsInfoCmd(_p9.id)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetJobsInfoCompleted':
				var _p10 = _p7._0;
				if (_p10.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeJobsTableModel: _elm_lang$core$Maybe$Just(
									_Giga_dev$newman$Views_JobsTable$init(_p10._0))
							}),
						_1: _Giga_dev$newman$Pages_Build$requestTime
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'JobsTableMsg':
				var _p13 = _p7._0;
				var _p11 = function () {
					var _p12 = model.maybeJobsTableModel;
					if (_p12.ctor === 'Just') {
						return A2(_Giga_dev$newman$Views_JobsTable$update, _p13, _p12._0);
					} else {
						return A2(
							_Giga_dev$newman$Views_JobsTable$update,
							_p13,
							_Giga_dev$newman$Views_JobsTable$init(
								{ctor: '[]'}));
					}
				}();
				var updatedJobsTableModel = _p11._0;
				var cmd = _p11._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							maybeJobsTableModel: _elm_lang$core$Maybe$Just(updatedJobsTableModel)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Build$JobsTableMsg, cmd),
							_1: {
								ctor: '::',
								_0: _Giga_dev$newman$Pages_Build$requestTime,
								_1: {ctor: '[]'}
							}
						})
				};
			case 'ReceiveTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currTime: _elm_lang$core$Maybe$Just(_p7._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p14 = _p7._0;
				if (_p14.ctor === 'ModifiedBuild') {
					var _p16 = _p14._0;
					var _p15 = model.maybeBuild;
					if (_p15.ctor === 'Just') {
						return _elm_lang$core$Native_Utils.eq(_p15._0.id, _p16.id) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									maybeBuild: _elm_lang$core$Maybe$Just(_p16)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_Build$GetBuildInfoCompleted = function (a) {
	return {ctor: 'GetBuildInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Build$getBuildInfoCmd = function (buildId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Build$GetBuildInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/build/', buildId),
			_Giga_dev$newman$Utils_Types$decodeBuild));
};
var _Giga_dev$newman$Pages_Build$initCmd = function (buildId) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _Giga_dev$newman$Pages_Build$getBuildInfoCmd(buildId),
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Build$requestTime,
				_1: {ctor: '[]'}
			}
		});
};
