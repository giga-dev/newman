var _Giga_dev$newman$Views_CompareBuilds$begingOfUrl = function (repo) {
	var _p0 = repo;
	switch (_p0) {
		case 'xap-open':
			return 'https://github.com/xap/xap';
		case 'xap':
			return 'https://github.com/Gigaspaces/xap-premium';
		case 'InsightEdge':
			return 'https://github.com/Insightedge/insightedge';
		default:
			return 'WrongRepo';
	}
};
var _Giga_dev$newman$Views_CompareBuilds$getSha = function (fullShaUrl) {
	var _p1 = _elm_lang$core$List$head(
		_elm_lang$core$List$reverse(
			A2(_elm_lang$core$String$split, '/', fullShaUrl)));
	if (_p1.ctor === 'Just') {
		return _p1._0;
	} else {
		return '';
	}
};
var _Giga_dev$newman$Views_CompareBuilds$createUrls = F2(
	function (oldBuildShas, newBuildShas) {
		var _p2 = _elm_lang$core$Dict$isEmpty(oldBuildShas) || _elm_lang$core$Dict$isEmpty(newBuildShas);
		if (_p2 === true) {
			return _elm_lang$core$Dict$empty;
		} else {
			var step = F2(
				function (newKey, newVal) {
					var _p3 = A2(_elm_lang$core$Dict$get, newKey, oldBuildShas);
					if (_p3.ctor === 'Just') {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_Giga_dev$newman$Views_CompareBuilds$begingOfUrl(newKey),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/compare/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_Giga_dev$newman$Views_CompareBuilds$getSha(_p3._0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'...',
										_Giga_dev$newman$Views_CompareBuilds$getSha(newVal)))));
					} else {
						return '';
					}
				});
			return A2(_elm_lang$core$Dict$map, step, newBuildShas);
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$viewDialog = F3(
	function (model, toMsg, confirmMsg) {
		var buildBody = function (_p4) {
			var _p5 = _p4;
			var _p7 = _p5._1;
			var _p6 = _elm_lang$core$Native_Utils.eq(_p7, '');
			if (_p6 === true) {
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{ctor: '[]'});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(_p7),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$target('_blank'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p5._0),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		};
		var body = F2(
			function (oldShas, newShas) {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							buildBody,
							_elm_lang$core$Dict$toList(
								A2(_Giga_dev$newman$Views_CompareBuilds$createUrls, oldShas, newShas)))),
					_1: {ctor: '[]'}
				};
			});
		var errorModel = A2(
			_rundis$elm_bootstrap$Bootstrap_Modal$view,
			model.confirmationState,
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$footer,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Button$button,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
									toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Close'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('ERROR! Can\'t find OldBuild or NewBuild :('),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$large(
						_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg)))));
		var _p8 = model.oldBuild;
		if (_p8.ctor === 'Just') {
			var _p11 = _p8._0;
			var _p9 = model.newBuild;
			if (_p9.ctor === 'Just') {
				var _p10 = _p9._0;
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Modal$view,
					model.confirmationState,
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$footer,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Button$button,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Close'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A3(
							_rundis$elm_bootstrap$Bootstrap_Modal$body,
							{ctor: '[]'},
							A2(body, _p11.shas, _p10.shas),
							A3(
								_rundis$elm_bootstrap$Bootstrap_Modal$h5,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Compare builds ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p11.name,
												A2(
													_elm_lang$core$Basics_ops['++'],
													' (',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p11.branch,
														A2(
															_elm_lang$core$Basics_ops['++'],
															') and ',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p10.name,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' (',
																	A2(_elm_lang$core$Basics_ops['++'], _p10.branch, ')'))))))))),
									_1: {ctor: '[]'}
								},
								_rundis$elm_bootstrap$Bootstrap_Modal$large(
									_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
			} else {
				return errorModel;
			}
		} else {
			return errorModel;
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$maybeGetBuild = F2(
	function (builds, buildId) {
		var _p12 = buildId;
		if (_p12 === '1') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return A2(
				_elm_community$list_extra$List_Extra$find,
				function (build) {
					return _elm_lang$core$Native_Utils.eq(build.id, _p12);
				},
				builds);
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$onlyNewerBuilds = F2(
	function (builds, newBuild) {
		return A2(
			_elm_lang$core$List$filter,
			function (build) {
				return _elm_lang$core$Native_Utils.cmp(build.buildTime, newBuild.buildTime) > 0;
			},
			builds);
	});
var _Giga_dev$newman$Views_CompareBuilds$update = F2(
	function (msg, model) {
		var _p13 = msg;
		switch (_p13.ctor) {
			case 'UpdateOldBuild':
				var _p14 = A2(_Giga_dev$newman$Views_CompareBuilds$maybeGetBuild, model.allBuilds, _p13._0);
				if (_p14.ctor === 'Just') {
					var _p15 = _p14._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								oldBuild: _elm_lang$core$Maybe$Just(_p15),
								newerBuilds: A2(_Giga_dev$newman$Views_CompareBuilds$onlyNewerBuilds, model.allBuilds, _p15)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{oldBuild: _elm_lang$core$Maybe$Nothing, newBuild: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'UpdateNewBuild':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							newBuild: A2(_Giga_dev$newman$Views_CompareBuilds$maybeGetBuild, model.allBuilds, _p13._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ClickCompareBuilds':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AcknowledgeDialog':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _p13._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p16 = _p13._0;
				if (_p16.ctor === 'CreatedBuild') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								allBuilds: {ctor: '::', _0: _p16._0, _1: model.allBuilds}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$Model = F5(
	function (a, b, c, d, e) {
		return {allBuilds: a, oldBuild: b, newBuild: c, newerBuilds: d, confirmationState: e};
	});
var _Giga_dev$newman$Views_CompareBuilds$init = function (builds) {
	return A5(_Giga_dev$newman$Views_CompareBuilds$Model, builds, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, builds, _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState);
};
var _Giga_dev$newman$Views_CompareBuilds$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Views_CompareBuilds$WebSocketEvent);
};
var _Giga_dev$newman$Views_CompareBuilds$ModalMsg = function (a) {
	return {ctor: 'ModalMsg', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$AcknowledgeDialog = {ctor: 'AcknowledgeDialog'};
var _Giga_dev$newman$Views_CompareBuilds$ClickCompareBuilds = {ctor: 'ClickCompareBuilds'};
var _Giga_dev$newman$Views_CompareBuilds$UpdateNewBuild = function (a) {
	return {ctor: 'UpdateNewBuild', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$UpdateOldBuild = function (a) {
	return {ctor: 'UpdateOldBuild', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$view = function (model) {
	var chooseNewBuild = function (data) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						data.name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' (',
							A2(_elm_lang$core$Basics_ops['++'], data.branch, ')')))),
				_1: {ctor: '[]'}
			});
	};
	var newBuildSelect = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$disabled(
						_elm_lang$core$Native_Utils.eq(model.oldBuild, _elm_lang$core$Maybe$Nothing)),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Views_CompareBuilds$UpdateNewBuild),
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '400px'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value('1'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select New Build'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, chooseNewBuild, model.newerBuilds))),
			_1: {ctor: '[]'}
		});
	var chooseOldBuild = function (data) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						data.name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' (',
							A2(_elm_lang$core$Basics_ops['++'], data.branch, ')')))),
				_1: {ctor: '[]'}
			});
	};
	var oldBuildSelect = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Views_CompareBuilds$UpdateOldBuild),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '400px'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value('1'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Old Build'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, chooseOldBuild, model.allBuilds))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('form-inline'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: oldBuildSelect,
					_1: {
						ctor: '::',
						_0: newBuildSelect,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Button$button,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(
												_elm_lang$core$Native_Utils.eq(model.oldBuild, _elm_lang$core$Maybe$Nothing) || _elm_lang$core$Native_Utils.eq(model.newBuild, _elm_lang$core$Maybe$Nothing)),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Views_CompareBuilds$ClickCompareBuilds),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Compare Changes'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A3(_Giga_dev$newman$Views_CompareBuilds$viewDialog, model, _Giga_dev$newman$Views_CompareBuilds$ModalMsg, _Giga_dev$newman$Views_CompareBuilds$AcknowledgeDialog),
				_1: {ctor: '[]'}
			}
		});
};
