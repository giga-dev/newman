var _Giga_dev$newman$Views_TestHistoryTable$filterQuery = F2(
	function (query, testHistory) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, testHistory.test.status) || (A2(_elm_lang$core$String$startsWith, query, testHistory.test.jobId) || (A2(_elm_lang$core$String$startsWith, query, testHistory.job.buildName) || (A2(_elm_lang$core$String$startsWith, query, testHistory.job.buildBranch) || A2(_elm_lang$core$String$startsWith, query, testHistory.test.assignedAgent)))))) ? true : false;
	});
var _Giga_dev$newman$Views_TestHistoryTable$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$first(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$prev(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$next(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$last(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: A2(_jschomay$elm_paginate$Paginate$goTo, _p0._0, model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p1,
							paginated: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								model.pageSize,
								A2(
									_elm_lang$core$List$filter,
									_Giga_dev$newman$Views_TestHistoryTable$filterQuery(_p1),
									model.all))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Views_TestHistoryTable$init = function (list) {
	var aa = A2(_elm_lang$core$Debug$log, 'TestHistoryTable', 'init is called!');
	var pageSize = 25;
	return {
		all: list,
		paginated: A2(_jschomay$elm_paginate$Paginate$fromList, pageSize, list),
		pageSize: pageSize,
		query: ''
	};
};
var _Giga_dev$newman$Views_TestHistoryTable$Model = F4(
	function (a, b, c, d) {
		return {all: a, paginated: b, pageSize: c, query: d};
	});
var _Giga_dev$newman$Views_TestHistoryTable$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Views_TestHistoryTable$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Views_TestHistoryTable$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Views_TestHistoryTable$Next = {ctor: 'Next'};
var _Giga_dev$newman$Views_TestHistoryTable$Last = {ctor: 'Last'};
var _Giga_dev$newman$Views_TestHistoryTable$First = {ctor: 'First'};
var _Giga_dev$newman$Views_TestHistoryTable$RUNNING = {ctor: 'RUNNING'};
var _Giga_dev$newman$Views_TestHistoryTable$FAIL = {ctor: 'FAIL'};
var _Giga_dev$newman$Views_TestHistoryTable$SUCCESS = {ctor: 'SUCCESS'};
var _Giga_dev$newman$Views_TestHistoryTable$PENDING = {ctor: 'PENDING'};
var _Giga_dev$newman$Views_TestHistoryTable$toTestStatus = function (str) {
	var _p2 = str;
	switch (_p2) {
		case 'PENDING':
			return _Giga_dev$newman$Views_TestHistoryTable$PENDING;
		case 'SUCCESS':
			return _Giga_dev$newman$Views_TestHistoryTable$SUCCESS;
		case 'FAIL':
			return _Giga_dev$newman$Views_TestHistoryTable$FAIL;
		case 'RUNNING':
			return _Giga_dev$newman$Views_TestHistoryTable$RUNNING;
		default:
			return _Giga_dev$newman$Views_TestHistoryTable$FAIL;
	}
};
var _Giga_dev$newman$Views_TestHistoryTable$viewRecord = function (testHistory) {
	var dateFormat = function (date) {
		return A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(date)));
	};
	var diffTime = A2(
		_rluiten$elm_date_extra$Date_Extra_Duration$diff,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(testHistory.test.endTime)),
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(testHistory.test.startTime)));
	var durationText = function () {
		var _p3 = {ctor: '_Tuple3', _0: diffTime.hour, _1: diffTime.minute, _2: diffTime.second};
		if (_p3._0 === 0) {
			if (_p3._1 === 0) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p3._2),
					' seconds');
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p3._1),
					' minutes');
			}
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p3._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' hours and ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p3._1),
						' minutes')));
		}
	}();
	var status = function () {
		var _p4 = _Giga_dev$newman$Views_TestHistoryTable$toTestStatus(testHistory.test.status);
		switch (_p4.ctor) {
			case 'RUNNING':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
			case 'PENDING':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
			case 'SUCCESS':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
			default:
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
		}
	}();
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#test/', testHistory.test.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(testHistory.test.id),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'#job/',
										A2(_elm_lang$core$Basics_ops['++'], testHistory.test.jobId, '/ALL'))),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(testHistory.test.jobId),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#build/', testHistory.job.buildId)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											testHistory.job.buildName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'(',
												A2(_elm_lang$core$Basics_ops['++'], testHistory.job.buildBranch, ')')))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#jobConfig/', testHistory.job.jobConfigId)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(testHistory.job.jobConfigName),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										dateFormat(testHistory.test.endTime)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(durationText),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(testHistory.test.runNumber)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(testHistory.test.assignedAgent),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														status,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(testHistory.test.status),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$title(testHistory.test.errorMessage),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(testHistory.test.errorMessage),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Views_TestHistoryTable$viewTable = function (model) {
	var customPager = F2(
		function (f, paginated) {
			var maxPagesToShow = 10;
			var totalPages = _jschomay$elm_paginate$Paginate$totalPages(paginated);
			var currentPage = _jschomay$elm_paginate$Paginate$currentPage(paginated);
			var leftBound = A2(_elm_lang$core$Basics$max, ((((currentPage - 1) / maxPagesToShow) | 0) * maxPagesToShow) + 1, 1);
			var rightBound = A2(_elm_lang$core$Basics$min, ((((currentPage - 1) / maxPagesToShow) | 0) * maxPagesToShow) + maxPagesToShow, totalPages);
			return A2(
				_elm_lang$core$List$map,
				function (i) {
					return A2(
						f,
						i,
						_elm_lang$core$Native_Utils.eq(
							i,
							_jschomay$elm_paginate$Paginate$currentPage(paginated)));
				},
				A2(_elm_lang$core$List$range, leftBound, rightBound));
		});
	var pagerButtonView = F2(
		function (index, isActive) {
			var _p5 = isActive;
			if (_p5 === true) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item active'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sr-only'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('(current)'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_Giga_dev$newman$Views_TestHistoryTable$GoTo(index)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		});
	var nextButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isLast(model.paginated)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$Next),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('›'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.paginated)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$Last),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('»'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var prevButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isFirst(model.paginated)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$First),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('«'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.paginated)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$Prev),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('‹'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var pagination = A2(
		_elm_lang$html$Html$nav,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination '),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					prevButtons,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(customPager, pagerButtonView, model.paginated),
						nextButtons))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('form-inline'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form-group'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('btn-group'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Views_TestHistoryTable$FilterQuery),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('filterinput'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title('Clear filter'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('ion-close-circled searchclear'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_Giga_dev$newman$Views_TestHistoryTable$FilterQuery('')),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-group'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: pagination,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$width(65),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Test Id'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$width(105),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Job Id'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$width(65),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Build'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$width(65),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Job Configuration'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$width(65),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('End Time'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$width(50),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Duration'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$width(30),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Run Num'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$width(70),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Agent ID'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$width(30),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Status'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$width(155),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Error Message'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$map,
									_Giga_dev$newman$Views_TestHistoryTable$viewRecord,
									_jschomay$elm_paginate$Paginate$page(model.paginated))),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: pagination,
					_1: {ctor: '[]'}
				}
			}
		});
};
