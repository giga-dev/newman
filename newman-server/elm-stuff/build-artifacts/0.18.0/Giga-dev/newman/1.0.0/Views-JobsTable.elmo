var _Giga_dev$newman$Views_JobsTable$filterQuery = F2(
	function (query, job) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, job.id) || (A2(_elm_lang$core$String$startsWith, query, job.buildName) || (A2(_elm_lang$core$String$contains, query, job.suiteName) || (A2(_elm_lang$core$String$contains, query, job.submittedBy) || A2(_elm_lang$core$String$contains, query, job.jobConfigName)))))) ? true : false;
	});
var _Giga_dev$newman$Views_JobsTable$updateAllJobs = F2(
	function (f, model) {
		var newList = f(model.allJobs);
		var filtered = A2(
			_elm_lang$core$List$filter,
			_Giga_dev$newman$Views_JobsTable$filterQuery(model.query),
			newList);
		var newPaginated = A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p0) {
				return filtered;
			},
			model.jobs);
		return _elm_lang$core$Native_Utils.update(
			model,
			{jobs: newPaginated, allJobs: newList});
	});
var _Giga_dev$newman$Views_JobsTable$updateJobAdded = F2(
	function (model, addedJob) {
		return A2(
			_Giga_dev$newman$Views_JobsTable$updateAllJobs,
			function (list) {
				return {ctor: '::', _0: addedJob, _1: list};
			},
			model);
	});
var _Giga_dev$newman$Views_JobsTable$updateJobUpdated = F2(
	function (model, jobToUpdate) {
		var f = A2(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, jobToUpdate.id);
			},
			jobToUpdate);
		return A2(_Giga_dev$newman$Views_JobsTable$updateAllJobs, f, model);
	});
var _Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJob = F2(
	function (model, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobUpdated, model, _p1._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJobs = F2(
	function (model, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A3(
					_elm_lang$core$List$foldr,
					_elm_lang$core$Basics$flip(_Giga_dev$newman$Views_JobsTable$updateJobUpdated),
					model,
					_p2._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Views_JobsTable$updateJobRemoved = F2(
	function (model, jobIdToRemove) {
		var f = _elm_community$list_extra$List_Extra$filterNot(
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, jobIdToRemove);
			});
		return A2(_Giga_dev$newman$Views_JobsTable$updateAllJobs, f, model);
	});
var _Giga_dev$newman$Views_JobsTable$onRequestCompletedDropJob = F3(
	function (jobId, model, result) {
		var _p3 = result;
		if (_p3.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobRemoved, model, jobId),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Views_JobsTable$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {allJobs: a, jobs: b, pageSize: c, confirmationState: d, jobToDrop: e, query: f, actionState: g};
	});
var _Giga_dev$newman$Views_JobsTable$init = function (jobs) {
	var pageSize = 15;
	return A7(
		_Giga_dev$newman$Views_JobsTable$Model,
		jobs,
		A2(_jschomay$elm_paginate$Paginate$fromList, pageSize, jobs),
		pageSize,
		_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		_elm_lang$core$Maybe$Nothing,
		'',
		_rundis$elm_bootstrap$Bootstrap_Dropdown$initialState);
};
var _Giga_dev$newman$Views_JobsTable$ActionStateMsg = function (a) {
	return {ctor: 'ActionStateMsg', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$subscriptions = function (model) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Dropdown$subscriptions, model.actionState, _Giga_dev$newman$Views_JobsTable$ActionStateMsg);
};
var _Giga_dev$newman$Views_JobsTable$ResumeAll = {ctor: 'ResumeAll'};
var _Giga_dev$newman$Views_JobsTable$PauseAll = {ctor: 'PauseAll'};
var _Giga_dev$newman$Views_JobsTable$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Views_JobsTable$WebSocketEvent);
};
var _Giga_dev$newman$Views_JobsTable$RequestCompletedDropJob = F2(
	function (a, b) {
		return {ctor: 'RequestCompletedDropJob', _0: a, _1: b};
	});
var _Giga_dev$newman$Views_JobsTable$dropJobCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedDropJob(jobId),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/job/', jobId),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Views_JobsTable$OnJobDropConfirmed = function (a) {
	return {ctor: 'OnJobDropConfirmed', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$OnClickJobDrop = function (a) {
	return {ctor: 'OnClickJobDrop', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs = function (a) {
	return {ctor: 'RequestCompletedToggleJobs', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$toggleJobsPauseCmd = function (jobIds) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs,
		A3(
			_elm_lang$http$Http$post,
			'/api/newman/jobs/pause/',
			_elm_lang$http$Http$jsonBody(
				_Giga_dev$newman$Utils_Types$encodeListOfStrings(jobIds)),
			_Giga_dev$newman$Utils_Types$decodeJobList));
};
var _Giga_dev$newman$Views_JobsTable$toggleJobsResumeCmd = function (jobIds) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs,
		A3(
			_elm_lang$http$Http$post,
			'/api/newman/jobs/resume/',
			_elm_lang$http$Http$jsonBody(
				_Giga_dev$newman$Utils_Types$encodeListOfStrings(jobIds)),
			_Giga_dev$newman$Utils_Types$decodeJobList));
};
var _Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJob = function (a) {
	return {ctor: 'RequestCompletedToggleJob', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$toggleJobCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJob,
		A3(
			_elm_lang$http$Http$post,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job/',
				A2(_elm_lang$core$Basics_ops['++'], jobId, '/toggle')),
			_elm_lang$http$Http$emptyBody,
			_Giga_dev$newman$Utils_Types$decodeJob));
};
var _Giga_dev$newman$Views_JobsTable$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$first(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$prev(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$next(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$last(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: A2(_jschomay$elm_paginate$Paginate$goTo, _p4._0, model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p5 = _p4._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p5,
							jobs: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								model.pageSize,
								A2(
									_elm_lang$core$List$filter,
									_Giga_dev$newman$Views_JobsTable$filterQuery(_p5),
									model.allJobs))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickToggleJob':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Views_JobsTable$toggleJobCmd(_p4._0)
				};
			case 'RequestCompletedToggleJob':
				return A2(_Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJob, model, _p4._0);
			case 'RequestCompletedToggleJobs':
				return A2(_Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJobs, model, _p4._0);
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{jobToDrop: _elm_lang$core$Maybe$Nothing, confirmationState: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickJobDrop':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							jobToDrop: _elm_lang$core$Maybe$Just(_p4._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnJobDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Views_JobsTable$dropJobCmd(_p4._0)
				};
			case 'RequestCompletedDropJob':
				return A3(_Giga_dev$newman$Views_JobsTable$onRequestCompletedDropJob, _p4._0, model, _p4._1);
			case 'WebSocketEvent':
				var _p6 = _p4._0;
				switch (_p6.ctor) {
					case 'CreatedJob':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobAdded, model, _p6._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'ModifiedJob':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobUpdated, model, _p6._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'PauseAll':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Views_JobsTable$toggleJobsPauseCmd(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.id;
							},
							A2(
								_elm_lang$core$List$filter,
								function (job) {
									return _elm_lang$core$Native_Utils.eq(job.state, _Giga_dev$newman$Utils_Types$RUNNING) || _elm_lang$core$Native_Utils.eq(job.state, _Giga_dev$newman$Utils_Types$READY);
								},
								_jschomay$elm_paginate$Paginate$allItems(model.jobs))))
				};
			case 'ResumeAll':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Views_JobsTable$toggleJobsResumeCmd(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.id;
							},
							A2(
								_elm_lang$core$List$filter,
								function (job) {
									return _elm_lang$core$Native_Utils.eq(job.state, _Giga_dev$newman$Utils_Types$PAUSED);
								},
								_jschomay$elm_paginate$Paginate$allItems(model.jobs))))
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{actionState: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Views_JobsTable$OnClickToggleJob = function (a) {
	return {ctor: 'OnClickToggleJob', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$viewJob = F2(
	function (currTime, job) {
		var emptyAgentGroups = function (maybeAgentGroups) {
			var _p7 = maybeAgentGroups;
			if (_p7.ctor === '[]') {
				return 'N/A';
			} else {
				return A2(_elm_lang$core$String$join, ',', maybeAgentGroups);
			}
		};
		var playPauseButton = function () {
			var _p8 = job.state;
			if (_p8.ctor === 'PAUSED') {
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$success,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
									_Giga_dev$newman$Views_JobsTable$OnClickToggleJob(job.id)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ion-play'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					});
			} else {
				var _p9 = _p8;
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$warning,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(
									(!_elm_lang$core$Native_Utils.eq(_p9, _Giga_dev$newman$Utils_Types$RUNNING)) && (!_elm_lang$core$Native_Utils.eq(_p9, _Giga_dev$newman$Utils_Types$READY))),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										_Giga_dev$newman$Views_JobsTable$OnClickToggleJob(job.id)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ion-pause'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					});
			}
		}();
		var durationText = function () {
			var diffTime = function () {
				var _p10 = {ctor: '_Tuple3', _0: job.startTime, _1: job.endTime, _2: currTime};
				_v7_2:
				do {
					if (_p10._0.ctor === 'Just') {
						if (_p10._1.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(
								A2(
									_rluiten$elm_date_extra$Date_Extra_Duration$diff,
									_elm_lang$core$Date$fromTime(
										_elm_lang$core$Basics$toFloat(_p10._1._0)),
									_elm_lang$core$Date$fromTime(
										_elm_lang$core$Basics$toFloat(_p10._0._0))));
						} else {
							if (_p10._2.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(
									A2(
										_rluiten$elm_date_extra$Date_Extra_Duration$diff,
										_elm_lang$core$Date$fromTime(_p10._2._0),
										_elm_lang$core$Date$fromTime(
											_elm_lang$core$Basics$toFloat(_p10._0._0))));
							} else {
								break _v7_2;
							}
						}
					} else {
						break _v7_2;
					}
				} while(false);
				return _elm_lang$core$Maybe$Nothing;
			}();
			var _p11 = diffTime;
			if (_p11.ctor === 'Just') {
				var _p12 = _p11._0;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p12.hour),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'h, ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p12.minute),
							'm')));
			} else {
				return '';
			}
		}();
		var submittedTimeHour = A2(
			_ryannhg$elm_date_format$DateFormat_Relative$relativeTime,
			_elm_lang$core$Date$fromTime(
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Basics$toFloat(job.submitTime),
					currTime)),
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(job.submitTime)));
		var submittedTimeHourFull = A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(job.submitTime)));
		var jobState = function () {
			var badge = function () {
				var _p13 = job.state;
				switch (_p13.ctor) {
					case 'BROKEN':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
					case 'DONE':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
					case 'RUNNING':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
					case 'PAUSED':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning;
					default:
						return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
				}
			}();
			return A2(
				badge,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('newman-job-state-label'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_Giga_dev$newman$Utils_Types$jobStateToString(job.state)),
					_1: {ctor: '[]'}
				});
		}();
		var progressPercent = (((job.failedTests + job.passedTests) * 100) / job.totalTests) | 0;
		var progress = _rundis$elm_bootstrap$Bootstrap_Progress$progress(
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Progress$customLabel(
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(progressPercent),
								' %')),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Progress$value(
						_elm_lang$core$Basics$toFloat(progressPercent)),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Progress$info,
						_1: {ctor: '[]'}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'succeed-row',
							_1: _elm_lang$core$Native_Utils.eq(job.passedTests, job.totalTests)
						},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: jobState,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: progress,
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'#job/',
												A2(_elm_lang$core$Basics_ops['++'], job.id, '/ALL'))),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title(job.id),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(job.id),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title(job.suiteName),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(job.suiteName),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title(job.jobConfigName),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(job.jobConfigName),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(durationText),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title(submittedTimeHourFull),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(submittedTimeHour),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href(
																A2(_elm_lang$core$Basics_ops['++'], '#build/', job.buildId)),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$title(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		job.buildName,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			' (',
																			A2(_elm_lang$core$Basics_ops['++'], job.buildBranch, ')')))),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	job.buildName,
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		' (',
																		A2(_elm_lang$core$Basics_ops['++'], job.buildBranch, ')')))),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(job.submittedBy),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																_elm_lang$core$Basics$toString(
																	_elm_lang$core$List$length(job.preparingAgents))),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	emptyAgentGroups(job.agentGroups)),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$a,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$href(
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								'#job/',
																								A2(_elm_lang$core$Basics_ops['++'], job.id, '/RUNNING'))),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$title('Running Tests'),
																							_1: {ctor: '[]'}
																						}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(job.runningTests)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('/ '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$href(
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										'#job/',
																										A2(_elm_lang$core$Basics_ops['++'], job.id, '/SUCCESS'))),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$title('Passed Tests'),
																									_1: {ctor: '[]'}
																								}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_elm_lang$core$Basics$toString(job.passedTests)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('/ '),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$a,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$href(
																											A2(
																												_elm_lang$core$Basics_ops['++'],
																												'#job/',
																												A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAIL'))),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$title('Failed Tests'),
																											_1: {ctor: '[]'}
																										}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(job.failedTests)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('/ '),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$a,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																											_1: {
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$href(
																													A2(
																														_elm_lang$core$Basics_ops['++'],
																														'#job/',
																														A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAILED3TIMES'))),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
																													_1: {ctor: '[]'}
																												}
																											}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(job.failed3TimesTests)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('/ '),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$a,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$href(
																															A2(
																																_elm_lang$core$Basics_ops['++'],
																																'#job/',
																																A2(_elm_lang$core$Basics_ops['++'], job.id, '/ALL'))),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$title('All Tests'),
																															_1: {ctor: '[]'}
																														}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														_elm_lang$core$Basics$toString(job.totalTests)),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Button$button,
																			{
																				ctor: '::',
																				_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
																				_1: {
																					ctor: '::',
																					_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
																					_1: {
																						ctor: '::',
																						_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
																							_Giga_dev$newman$Views_JobsTable$OnClickJobDrop(job.id)),
																						_1: {
																							ctor: '::',
																							_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(
																								!(A2(
																									_elm_lang$core$List$member,
																									job.state,
																									{
																										ctor: '::',
																										_0: _Giga_dev$newman$Utils_Types$DONE,
																										_1: {
																											ctor: '::',
																											_0: _Giga_dev$newman$Utils_Types$PAUSED,
																											_1: {
																												ctor: '::',
																												_0: _Giga_dev$newman$Utils_Types$BROKEN,
																												_1: {ctor: '[]'}
																											}
																										}
																									}) && ((_elm_lang$core$Native_Utils.cmp(job.runningTests, 0) < 1) && (_elm_lang$core$Native_Utils.cmp(
																									_elm_lang$core$List$length(job.agents),
																									0) < 1)))),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('ion-close'),
																						_1: {ctor: '[]'}
																					},
																					{ctor: '[]'}),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' '),
																			_1: {
																				ctor: '::',
																				_0: playPauseButton,
																				_1: {ctor: '[]'}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _Giga_dev$newman$Views_JobsTable$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Views_JobsTable$Next = {ctor: 'Next'};
var _Giga_dev$newman$Views_JobsTable$Last = {ctor: 'Last'};
var _Giga_dev$newman$Views_JobsTable$First = {ctor: 'First'};
var _Giga_dev$newman$Views_JobsTable$viewTable = F2(
	function (model, currTime) {
		var actionButton = A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Dropdown$dropdown,
					model.actionState,
					{
						options: {ctor: '[]'},
						toggleMsg: _Giga_dev$newman$Views_JobsTable$ActionStateMsg,
						toggleButton: A2(
							_rundis$elm_bootstrap$Bootstrap_Dropdown$toggle,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Actions'),
								_1: {ctor: '[]'}
							}),
						items: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$PauseAll),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Pause All'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$ResumeAll),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Resume All'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
		var widthPct = function (pct) {
			return _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: pct},
					_1: {ctor: '[]'}
				});
		};
		var pagerButtonView = F2(
			function (index, isActive) {
				var _p14 = isActive;
				if (_p14 === true) {
					return A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-item active'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('page-link'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(index)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('sr-only'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('(current)'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-item'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_Giga_dev$newman$Views_JobsTable$GoTo(index)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('page-link'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(index)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				}
			});
		var nextButtons = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.jobs)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$Next),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('›'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'disabled',
										_1: _jschomay$elm_paginate$Paginate$isLast(model.jobs)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$Last),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('»'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
		var prevButtons = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.jobs)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$First),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('«'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'disabled',
										_1: _jschomay$elm_paginate$Paginate$isFirst(model.jobs)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$Prev),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('‹'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
		var pagination = A2(
			_elm_lang$html$Html$nav,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pagination '),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						prevButtons,
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_jschomay$elm_paginate$Paginate$pager, pagerButtonView, model.jobs),
							nextButtons))),
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form-inline'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-group'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Views_JobsTable$FilterQuery),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form-group'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: pagination,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: actionButton,
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$thead,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('job-tests-state'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('State'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('job-tests-progress'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Progess'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: widthPct('8%'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Job Id'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: widthPct('8%'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Suite'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{
																	ctor: '::',
																	_0: widthPct('6%'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Job Conf.'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{
																		ctor: '::',
																		_0: widthPct('6%'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Duration'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{
																			ctor: '::',
																			_0: widthPct('8%'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Submitted At'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{
																				ctor: '::',
																				_0: widthPct('11%'),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Build'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{
																					ctor: '::',
																					_0: widthPct('8%'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Submitted By'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$th,
																					{
																						ctor: '::',
																						_0: widthPct('7%'),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('# p. agents'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$th,
																						{
																							ctor: '::',
																							_0: widthPct('11%'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Agent Groups'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$th,
																							{
																								ctor: '::',
																								_0: widthPct('17%'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$title('Running Tests'),
																											_1: {ctor: '[]'}
																										}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Run'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('/ '),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$title('Passed Tests'),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Pass'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('/ '),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$title('Failed Tests'),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Fail'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('/ '),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$style(
																																		{
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																																			_1: {ctor: '[]'}
																																		}),
																																	_1: {
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
																																		_1: {ctor: '[]'}
																																	}
																																}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text('3xFail'),
																																_1: {ctor: '[]'}
																															}),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('/ '),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																																		_1: {
																																			ctor: '::',
																																			_0: _elm_lang$html$Html_Attributes$title('All Tests'),
																																			_1: {ctor: '[]'}
																																		}
																																	},
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html$text('Total'),
																																		_1: {ctor: '[]'}
																																	}),
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$th,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$width(80),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Actions'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tbody,
									{ctor: '[]'},
									A2(
										_elm_lang$core$List$map,
										_Giga_dev$newman$Views_JobsTable$viewJob(currTime),
										_jschomay$elm_paginate$Paginate$page(model.jobs))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: pagination,
						_1: {
							ctor: '::',
							_0: A4(_Giga_dev$newman$Views_NewmanModal$confirmJobDrop, model.jobToDrop, _Giga_dev$newman$Views_JobsTable$NewmanModalMsg, _Giga_dev$newman$Views_JobsTable$OnJobDropConfirmed, model.confirmationState),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
