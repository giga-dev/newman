var _Giga_dev$newman$Pages_AgentsAll$filterQuery = F3(
	function (query, filterFailingAgents, agent) {
		var jobIdCheck = function () {
			var _p0 = agent.jobId;
			if (_p0.ctor === 'Just') {
				return A2(_elm_lang$core$String$startsWith, query, _p0._0);
			} else {
				return false;
			}
		}();
		var filteredList = A2(
			_elm_lang$core$List$filter,
			_elm_lang$core$String$startsWith(query),
			agent.capabilities);
		var capabilitiesCheck = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(filteredList),
			0) > 0;
		return (((!filterFailingAgents) || (filterFailingAgents && (_elm_lang$core$Native_Utils.cmp(agent.setupRetries, 0) > 0))) && (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, agent.name) || (capabilitiesCheck || (A2(_elm_lang$core$String$startsWith, query, agent.state) || (A2(_elm_lang$core$String$contains, query, agent.host) || (A2(_elm_lang$core$String$startsWith, query, agent.pid) || (A2(_elm_lang$core$String$startsWith, query, agent.groupName) || jobIdCheck)))))))) ? true : false;
	});
var _Giga_dev$newman$Pages_AgentsAll$updateAll = F2(
	function (f, model) {
		var newList = f(model.allAgents);
		var filtered = A2(
			_elm_lang$core$List$filter,
			A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, model.filterFailingAgents),
			newList);
		var newPaginated = model.filterOfflineAgents ? model.agents : A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p1) {
				return filtered;
			},
			model.agents);
		return _elm_lang$core$Native_Utils.update(
			model,
			{agents: newPaginated, allAgents: newList});
	});
var _Giga_dev$newman$Pages_AgentsAll$updateAgentUpdated = F2(
	function (model, agentToUpdate) {
		var f = A2(
			_elm_lang$core$List$any,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, agentToUpdate.id);
			},
			model.allAgents) ? A2(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, agentToUpdate.id);
			},
			agentToUpdate) : function (list) {
			return {ctor: '::', _0: agentToUpdate, _1: list};
		};
		return A2(_Giga_dev$newman$Pages_AgentsAll$updateAll, f, model);
	});
var _Giga_dev$newman$Pages_AgentsAll$updateAgentRemoved = F2(
	function (model, idToRemove) {
		var f = _elm_community$list_extra$List_Extra$filterNot(
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, idToRemove);
			});
		return A2(_Giga_dev$newman$Pages_AgentsAll$updateAll, f, model);
	});
var _Giga_dev$newman$Pages_AgentsAll$onRequestCompletedDropAgent = F4(
	function (offlineOrOnline, agentId, model, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			var _p3 = offlineOrOnline;
			switch (_p3) {
				case 'online':
					return {
						ctor: '_Tuple2',
						_0: A2(_Giga_dev$newman$Pages_AgentsAll$updateAgentRemoved, model, agentId),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'offline':
					var offlineAgentList = A2(
						_elm_community$list_extra$List_Extra$filterNot,
						function (agent) {
							return _elm_lang$core$Native_Utils.eq(agent.name, agentId);
						},
						model.offlineAgents);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								offlineAgents: offlineAgentList,
								agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, offlineAgentList)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_AgentsAll$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {allAgents: a, offlineAgents: b, agents: c, pageSize: d, query: e, filterFailingAgents: f, filterOfflineAgents: g, confirmationState: h, agentToDrop: i, offlineAgentToDrop: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Pages_AgentsAll$GetOfflineAgentsCompleted = function (a) {
	return {ctor: 'GetOfflineAgentsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$getOfflineAgentsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_AgentsAll$GetOfflineAgentsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/agent/offline', _Giga_dev$newman$Utils_Types$decodeAgentList));
var _Giga_dev$newman$Pages_AgentsAll$FilterOfflineAgents = function (a) {
	return {ctor: 'FilterOfflineAgents', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$CleanSetupRetries = {ctor: 'CleanSetupRetries'};
var _Giga_dev$newman$Pages_AgentsAll$FilterFailingAgents = function (a) {
	return {ctor: 'FilterFailingAgents', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$RequestCompletedDropAgent = F3(
	function (a, b, c) {
		return {ctor: 'RequestCompletedDropAgent', _0: a, _1: b, _2: c};
	});
var _Giga_dev$newman$Pages_AgentsAll$dropAgentCmd = function (agentId) {
	return A2(
		_elm_lang$http$Http$send,
		A2(_Giga_dev$newman$Pages_AgentsAll$RequestCompletedDropAgent, 'online', agentId),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/agent/', agentId),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_AgentsAll$dropOfflineAgentCmd = function (agentName) {
	return A2(
		_elm_lang$http$Http$send,
		A2(_Giga_dev$newman$Pages_AgentsAll$RequestCompletedDropAgent, 'offline', agentName),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/offlineAgent/', agentName),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnOfflineAgentDropConfirmed = function (a) {
	return {ctor: 'OnOfflineAgentDropConfirmed', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnClickDropOfflineAgent = function (a) {
	return {ctor: 'OnClickDropOfflineAgent', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnAgentDropConfirmed = function (a) {
	return {ctor: 'OnAgentDropConfirmed', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnClickDropAgent = function (a) {
	return {ctor: 'OnClickDropAgent', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$viewAgent = F2(
	function (filterOfflineAgents, agent) {
		var closeButtonMsg = F2(
			function (agentId, agentName) {
				return filterOfflineAgents ? _Giga_dev$newman$Pages_AgentsAll$OnClickDropOfflineAgent(agentName) : _Giga_dev$newman$Pages_AgentsAll$OnClickDropAgent(agentId);
			});
		var lastSeen = A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(agent.lastTouchTime)));
		var suiteString = function () {
			var _p4 = agent.suiteName;
			if (_p4.ctor === 'Just') {
				return _p4._0;
			} else {
				return '';
			}
		}();
		var buildString = function () {
			var _p5 = agent.buildName;
			if (_p5.ctor === 'Just') {
				return _p5._0;
			} else {
				return '';
			}
		}();
		var jobString = function () {
			var _p6 = agent.jobId;
			if (_p6.ctor === 'Just') {
				return _p6._0;
			} else {
				return '';
			}
		}();
		var currentTests = A2(_elm_lang$core$String$join, ',', agent.currentTests);
		var agentCapabilities = A2(_elm_lang$core$String$join, ',', agent.capabilities);
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(agent.name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(agentCapabilities),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									filterOfflineAgents ? '' : agent.state),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(agent.host),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(agent.pid),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(agent.setupRetries)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(jobString),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(buildString),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(suiteString),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(currentTests),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(lastSeen),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(agent.groupName),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Button$button,
																			{
																				ctor: '::',
																				_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
																				_1: {
																					ctor: '::',
																					_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
																					_1: {
																						ctor: '::',
																						_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
																							A2(closeButtonMsg, agent.id, agent.name)),
																						_1: {ctor: '[]'}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('ion-close'),
																						_1: {ctor: '[]'}
																					},
																					{ctor: '[]'}),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _Giga_dev$newman$Pages_AgentsAll$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_AgentsAll$WebSocketEvent);
};
var _Giga_dev$newman$Pages_AgentsAll$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Pages_AgentsAll$Next = {ctor: 'Next'};
var _Giga_dev$newman$Pages_AgentsAll$Last = {ctor: 'Last'};
var _Giga_dev$newman$Pages_AgentsAll$First = {ctor: 'First'};
var _Giga_dev$newman$Pages_AgentsAll$view = function (model) {
	var confirmAgentDropDialog = function () {
		var _p7 = model.agentToDrop;
		if (_p7.ctor === 'Just') {
			return A4(_Giga_dev$newman$Views_NewmanModal$confirmAgentDrop, _p7._0, _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg, _Giga_dev$newman$Pages_AgentsAll$OnAgentDropConfirmed, model.confirmationState);
		} else {
			var _p8 = model.offlineAgentToDrop;
			if (_p8.ctor === 'Just') {
				return A4(_Giga_dev$newman$Views_NewmanModal$confirmAgentDrop, _p8._0, _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg, _Giga_dev$newman$Pages_AgentsAll$OnOfflineAgentDropConfirmed, model.confirmationState);
			} else {
				return A4(_Giga_dev$newman$Views_NewmanModal$confirmAgentDrop, 'agentNotFound', _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg, _Giga_dev$newman$Pages_AgentsAll$OnOfflineAgentDropConfirmed, model.confirmationState);
			}
		}
	}();
	var offlineAgentsFilterButton = A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$custom,
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$inline,
			_1: {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$onCheck(_Giga_dev$newman$Pages_AgentsAll$FilterOfflineAgents),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$checked(model.filterOfflineAgents),
					_1: {ctor: '[]'}
				}
			}
		},
		'Offline agents only');
	var failingAgentsFilterButton = A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$custom,
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$inline,
			_1: {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$onCheck(_Giga_dev$newman$Pages_AgentsAll$FilterFailingAgents),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$checked(model.filterFailingAgents),
					_1: {ctor: '[]'}
				}
			}
		},
		'Failing agents only');
	var cleanSetupRetriesButton = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Button$button,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_AgentsAll$CleanSetupRetries),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Clear Failing Agents'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
	var pagerButtonView = F2(
		function (index, isActive) {
			var _p9 = isActive;
			if (_p9 === true) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item active'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sr-only'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('(current)'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_Giga_dev$newman$Pages_AgentsAll$GoTo(index)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		});
	var nextButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isLast(model.agents)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$Next),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('›'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.agents)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$Last),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('»'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var prevButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isFirst(model.agents)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$First),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('«'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.agents)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$Prev),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('‹'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var pagination = A2(
		_elm_lang$html$Html$nav,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination '),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					prevButtons,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_jschomay$elm_paginate$Paginate$pager, pagerButtonView, model.agents),
						nextButtons))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Agents (',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									_jschomay$elm_paginate$Paginate$length(model.agents)),
								')'))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-inline'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('form-group'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_AgentsAll$FilterQuery),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('form-group'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: pagination,
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: cleanSetupRetriesButton,
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: failingAgentsFilterButton,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: offlineAgentsFilterButton,
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$table,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('table table-hover table-striped table-bordered table-condensed'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$thead,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$tr,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Name'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Capabilities'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('State'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Host'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('PID'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$th,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '6%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Setup Retries'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Job'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Build'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Suite'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Current Tests'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$th,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Last seen'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$th,
																											{ctor: '[]'},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Group Name'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$th,
																												{ctor: '[]'},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Actions'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$tbody,
													{ctor: '[]'},
													A2(
														_elm_lang$core$List$map,
														_Giga_dev$newman$Pages_AgentsAll$viewAgent(model.filterOfflineAgents),
														_jschomay$elm_paginate$Paginate$page(model.agents))),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: pagination,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: confirmAgentDropDialog,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _Giga_dev$newman$Pages_AgentsAll$GetAgentsCompleted = function (a) {
	return {ctor: 'GetAgentsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$getAgentsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_AgentsAll$GetAgentsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/agent?all=true', _Giga_dev$newman$Utils_Types$decodeAgents));
var _Giga_dev$newman$Pages_AgentsAll$init = function () {
	var pageSize = 20;
	return {
		ctor: '_Tuple2',
		_0: {
			allAgents: {ctor: '[]'},
			offlineAgents: {ctor: '[]'},
			agents: A2(
				_jschomay$elm_paginate$Paginate$fromList,
				pageSize,
				{ctor: '[]'}),
			pageSize: pageSize,
			query: '',
			filterFailingAgents: false,
			filterOfflineAgents: false,
			confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
			agentToDrop: _elm_lang$core$Maybe$Nothing,
			offlineAgentToDrop: _elm_lang$core$Maybe$Nothing
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: _Giga_dev$newman$Pages_AgentsAll$getAgentsCmd,
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_AgentsAll$getOfflineAgentsCmd,
					_1: {ctor: '[]'}
				}
			})
	};
}();
var _Giga_dev$newman$Pages_AgentsAll$cleanSetupRetriesCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_AgentsAll$GetAgentsCompleted,
	A3(_elm_lang$http$Http$post, '/api/newman/agent/clean-setup-retries?all=true', _elm_lang$http$Http$emptyBody, _Giga_dev$newman$Utils_Types$decodeAgents));
var _Giga_dev$newman$Pages_AgentsAll$update = F2(
	function (msg, model) {
		var _p10 = msg;
		switch (_p10.ctor) {
			case 'GetAgentsCompleted':
				var _p11 = _p10._0;
				if (_p11.ctor === 'Ok') {
					var _p12 = _p11._0;
					var filteredList = model.filterOfflineAgents ? model.offlineAgents : A2(
						_elm_lang$core$List$filter,
						A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, model.filterFailingAgents),
						_p12);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList),
								allAgents: _p12
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetOfflineAgentsCompleted':
				var _p13 = _p10._0;
				if (_p13.ctor === 'Ok') {
					var _p14 = _p13._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, _p14),
								offlineAgents: _p14
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$first(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$last(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$next(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$prev(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: A2(_jschomay$elm_paginate$Paginate$goTo, _p10._0, model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p15 = _p10._0;
				var filteredList = model.filterOfflineAgents ? model.offlineAgents : A2(
					_elm_lang$core$List$filter,
					A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, _p15, model.filterFailingAgents),
					model.allAgents);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p15,
							agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'WebSocketEvent':
				var _p16 = _p10._0;
				switch (_p16.ctor) {
					case 'ModifiedAgent':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_AgentsAll$updateAgentUpdated, model, _p16._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'DeletedAgent':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_AgentsAll$updateAgentRemoved, model, _p16._0.id),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'CreatedOfflineAgent':
						var offlineList = {ctor: '::', _0: _p16._0, _1: model.offlineAgents};
						var paginatedList = model.filterOfflineAgents ? A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, offlineList) : model.agents;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{offlineAgents: offlineList, agents: paginatedList}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'DeletedOfflineAgent':
						var offlineList = A2(
							_elm_community$list_extra$List_Extra$filterNot,
							function (agent) {
								return _elm_lang$core$Native_Utils.eq(agent.hostAddress, _p16._0);
							},
							model.offlineAgents);
						var paginatedList = model.filterOfflineAgents ? A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, offlineList) : model.agents;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{offlineAgents: offlineList, agents: paginatedList}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnClickDropAgent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							agentToDrop: _elm_lang$core$Maybe$Just(_p10._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickDropOfflineAgent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							offlineAgentToDrop: _elm_lang$core$Maybe$Just(_p10._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{agentToDrop: _elm_lang$core$Maybe$Nothing, offlineAgentToDrop: _elm_lang$core$Maybe$Nothing, confirmationState: _p10._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnAgentDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Pages_AgentsAll$dropAgentCmd(_p10._0)
				};
			case 'OnOfflineAgentDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Pages_AgentsAll$dropOfflineAgentCmd(_p10._0)
				};
			case 'RequestCompletedDropAgent':
				return A4(_Giga_dev$newman$Pages_AgentsAll$onRequestCompletedDropAgent, _p10._0, _p10._1, model, _p10._2);
			case 'FilterFailingAgents':
				var _p17 = _p10._0;
				var filteredList = ((!_p17) && model.filterOfflineAgents) ? model.offlineAgents : A2(
					_elm_lang$core$List$filter,
					A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, _p17),
					model.allAgents);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							filterFailingAgents: _p17,
							agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList),
							filterOfflineAgents: _p17 ? false : model.filterOfflineAgents
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterOfflineAgents':
				var _p18 = _p10._0;
				var filteredList = _p18 ? model.offlineAgents : A2(
					_elm_lang$core$List$filter,
					A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, model.filterFailingAgents),
					model.allAgents);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							filterOfflineAgents: _p18,
							agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList),
							filterFailingAgents: _p18 ? false : model.filterFailingAgents
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _Giga_dev$newman$Pages_AgentsAll$cleanSetupRetriesCmd};
		}
	});
