var _Giga_dev$newman$Pages_Home$viewActiveBuild = F2(
	function (activeJobs, build) {
		var viewJobForActiveBuild = function (job) {
			return A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('â†³ Job: '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#job/', job.id)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(job.id),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$colspan(2),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tests-data'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'#job/',
																A2(_elm_lang$core$Basics_ops['++'], job.id, '/RUNNING'))),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString(job.runningTests)),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' '),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'#job/',
																		A2(_elm_lang$core$Basics_ops['++'], job.id, '/SUCCESS'))),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																_elm_lang$core$Basics$toString(job.passedTests)),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(' '),
												_1: {
													ctor: '::',
													_0: A2(
														_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$href(
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'#job/',
																				A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAIL'))),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		_elm_lang$core$Basics$toString(job.failedTests)),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text(' '),
														_1: {
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$href(
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'#job/',
																						A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAILED3TIMES'))),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
																					_1: {ctor: '[]'}
																				}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				_elm_lang$core$Basics$toString(job.failed3TimesTests)),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$a,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$href(
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								'#job/',
																								A2(_elm_lang$core$Basics_ops['++'], job.id, '/ALL'))),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(job.totalTests)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(
													A2(_elm_lang$core$Basics_ops['++'], '#suite/', job.suiteId)),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(job.suiteName),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		};
		var buildStatus = build.buildStatus;
		var testsData = {
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(buildStatus.runningTests)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' '),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(buildStatus.passedTests)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(buildStatus.failedTests)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(buildStatus.failed3TimesTests)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' '),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString((buildStatus.totalTests - buildStatus.passedTests) - buildStatus.failedTests)),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		var jobsData = {
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(buildStatus.doneJobs)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' '),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(buildStatus.brokenJobs)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Badge$badge,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(buildStatus.totalJobs)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
		var formatDate = function (time) {
			return A2(
				_ryannhg$elm_date_format$DateFormat$format,
				_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
				_elm_lang$core$Date$fromTime(
					_elm_lang$core$Basics$toFloat(time)));
		};
		var buildDate = formatDate(build.buildTime);
		var buildName = A2(
			_elm_lang$core$Basics_ops['++'],
			build.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(buildName),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(buildDate),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tests-data'),
										_1: {ctor: '[]'}
									},
									testsData),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										jobsData),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											A2(
												_elm_lang$core$List$intersperse,
												_elm_lang$html$Html$text(' '),
												A2(
													_elm_lang$core$List$map,
													function (_p0) {
														var _p1 = _p0;
														return A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href(
																	A2(_elm_lang$core$Basics_ops['++'], '#suite/', _p1._1)),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(_p1._0),
																_1: {ctor: '[]'}
															});
													},
													A2(_elm_community$list_extra$List_Extra$zip, build.buildStatus.suitesNames, build.buildStatus.suitesIds)))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				viewJobForActiveBuild,
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(_elm_lang$core$Dict$get, build.id, activeJobs))));
	});
var _Giga_dev$newman$Pages_Home$viewPendingBuild = function (build) {
	var buildStatus = build.buildStatus;
	var testsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.passedTests)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.failedTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.failed3TimesTests)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' '),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString((buildStatus.totalTests - buildStatus.passedTests) - buildStatus.failedTests)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	};
	var jobsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.doneJobs)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.brokenJobs)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badge,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.totalJobs)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var buildDate = A2(
		_ryannhg$elm_date_format$DateFormat$format,
		_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(build.buildTime)));
	var buildName = A2(
		_elm_lang$core$Basics_ops['++'],
		build.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(buildName),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buildDate),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tests-data'),
							_1: {ctor: '[]'}
						},
						testsData),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							jobsData),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$intersperse,
									_elm_lang$html$Html$text(' '),
									A2(
										_elm_lang$core$List$map,
										function (_p2) {
											var _p3 = _p2;
											return A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href(
														A2(_elm_lang$core$Basics_ops['++'], '#suite/', _p3._1)),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(_p3._0),
													_1: {ctor: '[]'}
												});
										},
										A2(_elm_community$list_extra$List_Extra$zip, build.buildStatus.suitesNames, build.buildStatus.suitesIds)))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Home$widthPcnt = function (pcnt) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'width', _1: pcnt},
			_1: {ctor: '[]'}
		});
};
var _Giga_dev$newman$Pages_Home$viewActiveBuilds = F2(
	function (builds, activeJobs) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Active Builds'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-hover history-table'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$thead,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _Giga_dev$newman$Pages_Home$widthPcnt('18%'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Build'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _Giga_dev$newman$Pages_Home$widthPcnt('8%'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Date'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _Giga_dev$newman$Pages_Home$widthPcnt('18%'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Running'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Passed'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Failed'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' '),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Failed 3 Times'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(' '),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Pending'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(' | Tests'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$align('center'),
																_1: {
																	ctor: '::',
																	_0: _Giga_dev$newman$Pages_Home$widthPcnt('15%'),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Done'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Broken'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' '),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Total'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(' | Jobs'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Suites'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tbody,
									{ctor: '[]'},
									_elm_lang$core$List$concat(
										A2(
											_elm_lang$core$List$map,
											_Giga_dev$newman$Pages_Home$viewActiveBuild(activeJobs),
											builds))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _Giga_dev$newman$Pages_Home$viewPendingBuilds = function (builds) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Pending Builds'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-hover history-table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _Giga_dev$newman$Pages_Home$widthPcnt('18%'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Build'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _Giga_dev$newman$Pages_Home$widthPcnt('8%'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Date'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _Giga_dev$newman$Pages_Home$widthPcnt('20%'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Passed'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text(' '),
															_1: {
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Failed'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Failed 3 Times'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' '),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Pending'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(' | Tests'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$align('center'),
															_1: {
																ctor: '::',
																_0: _Giga_dev$newman$Pages_Home$widthPcnt('15%'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Done'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Broken'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Total'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' | Jobs'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _Giga_dev$newman$Pages_Home$widthPcnt('42%'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Suites'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _Giga_dev$newman$Pages_Home$viewPendingBuild, builds)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Home$viewHistoryBuild = function (build) {
	var buildStatus = build.buildStatus;
	var testsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.passedTests)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.failedTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badge,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.totalTests)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var jobsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.doneJobs)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.brokenJobs)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badge,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.totalJobs)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var buildDate = A2(
		_ryannhg$elm_date_format$DateFormat$format,
		_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(build.buildTime)));
	var buildName = A2(
		_elm_lang$core$Basics_ops['++'],
		build.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(buildName),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buildDate),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tests-data'),
							_1: {ctor: '[]'}
						},
						testsData),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							jobsData),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$intersperse,
									_elm_lang$html$Html$text(' '),
									A2(
										_elm_lang$core$List$map,
										function (_p4) {
											var _p5 = _p4;
											return A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href(
														A2(_elm_lang$core$Basics_ops['++'], '#suite/', _p5._1)),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(_p5._0),
													_1: {ctor: '[]'}
												});
										},
										A2(_elm_community$list_extra$List_Extra$zip, build.buildStatus.suitesNames, build.buildStatus.suitesIds)))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Home$viewHistory = function (dashboardBuilds) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('History'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover history-table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Build'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Date'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Passed'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text(' '),
															_1: {
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Failed'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Total'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' | Tests'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$align('center'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Done'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Broken'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Total'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' | Jobs'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Suites'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _Giga_dev$newman$Pages_Home$viewHistoryBuild, dashboardBuilds)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Home$onRequestCompletedDropFutureJob = F3(
	function (jobId, model, result) {
		var _p6 = result;
		if (_p6.ctor === 'Ok') {
			var newList = A2(
				_elm_community$list_extra$List_Extra$filterNot,
				function (item) {
					return _elm_lang$core$Native_Utils.eq(item.id, jobId);
				},
				model.futureJobs);
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{futureJobs: newList}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_Home$addToList = F2(
	function (item, list) {
		var newList = {ctor: '::', _0: item, _1: list};
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(newList),
			5) > 0) ? A2(
			_elm_community$list_extra$List_Extra$removeAt,
			_elm_lang$core$List$length(newList) - 1,
			newList) : newList;
	});
var _Giga_dev$newman$Pages_Home$removeFromList = F2(
	function (id, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (item) {
				return !_elm_lang$core$Native_Utils.eq(item.id, id);
			},
			list);
	});
var _Giga_dev$newman$Pages_Home$handleActiveBuilds = F2(
	function (build, model) {
		if (_elm_lang$core$Native_Utils.eq(build.buildStatus.totalJobs, build.buildStatus.doneJobs)) {
			var newHistoryBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.historyBuilds);
			var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.activeBuilds);
			return _elm_lang$core$Native_Utils.update(
				model,
				{activeBuilds: newActiveBuilds, historyBuilds: newHistoryBuilds});
		} else {
			if (_elm_lang$core$Native_Utils.eq(build.buildStatus.runningJobs, 0) && (_elm_lang$core$Native_Utils.cmp(build.buildStatus.pendingJobs, 0) > 0)) {
				var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.pendingBuilds);
				var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.activeBuilds);
				return _elm_lang$core$Native_Utils.update(
					model,
					{activeBuilds: newActiveBuilds, pendingBuilds: newPendingBuilds});
			} else {
				return model;
			}
		}
	});
var _Giga_dev$newman$Pages_Home$handlePendingBuilds = F2(
	function (build, model) {
		if (_elm_lang$core$Native_Utils.eq(build.buildStatus.totalJobs, build.buildStatus.doneJobs)) {
			var newHistoryBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.historyBuilds);
			var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.pendingBuilds);
			return _elm_lang$core$Native_Utils.update(
				model,
				{pendingBuilds: newPendingBuilds, historyBuilds: newHistoryBuilds});
		} else {
			if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.runningJobs, 0) > 0) {
				var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.activeBuilds);
				var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.pendingBuilds);
				return _elm_lang$core$Native_Utils.update(
					model,
					{activeBuilds: newActiveBuilds, pendingBuilds: newPendingBuilds});
			} else {
				return model;
			}
		}
	});
var _Giga_dev$newman$Pages_Home$handleHistoryBuilds = F2(
	function (build, orgModel) {
		if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.doneJobs, build.buildStatus.totalJobs) < 0) {
			var newHistoryBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, orgModel.historyBuilds);
			var model = _elm_lang$core$Native_Utils.update(
				orgModel,
				{historyBuilds: newHistoryBuilds});
			if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.runningJobs, 0) > 0) {
				var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.activeBuilds);
				return _elm_lang$core$Native_Utils.update(
					model,
					{activeBuilds: newActiveBuilds});
			} else {
				if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.pendingJobs, 0) > 0) {
					var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.pendingBuilds);
					return _elm_lang$core$Native_Utils.update(
						model,
						{pendingBuilds: newPendingBuilds});
				} else {
					return model;
				}
			}
		} else {
			return orgModel;
		}
	});
var _Giga_dev$newman$Pages_Home$updateList = F3(
	function (id, newItem, list) {
		return A3(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, id);
			},
			newItem,
			list);
	});
var _Giga_dev$newman$Pages_Home$findById = F2(
	function (id, list) {
		return A2(
			_elm_lang$core$List$any,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, id);
			},
			list);
	});
var _Giga_dev$newman$Pages_Home$onEventModifiedBuild = F2(
	function (build, model) {
		return A2(_Giga_dev$newman$Pages_Home$findById, build.id, model.activeBuilds) ? A2(_Giga_dev$newman$Pages_Home$handleActiveBuilds, build, model) : (A2(_Giga_dev$newman$Pages_Home$findById, build.id, model.pendingBuilds) ? A2(_Giga_dev$newman$Pages_Home$handlePendingBuilds, build, model) : (A2(_Giga_dev$newman$Pages_Home$findById, build.id, model.historyBuilds) ? A2(_Giga_dev$newman$Pages_Home$handleHistoryBuilds, build, model) : model));
	});
var _Giga_dev$newman$Pages_Home$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {historyBuilds: a, futureJobs: b, pendingBuilds: c, activeBuilds: d, activeJobs: e, confirmationState: f, futureJobToDrop: g};
	});
var _Giga_dev$newman$Pages_Home$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Home$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Home$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Home$RequestCompletedDropFutureJob = F2(
	function (a, b) {
		return {ctor: 'RequestCompletedDropFutureJob', _0: a, _1: b};
	});
var _Giga_dev$newman$Pages_Home$dropFutureJobCmd = function (futureJobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Home$RequestCompletedDropFutureJob(futureJobId),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/deleteFutureJob/', futureJobId),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_Home$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'GetDashboardDataCompleted':
				var _p8 = _p7._0;
				if (_p8.ctor === 'Ok') {
					var _p9 = _p8._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{historyBuilds: _p9.historyBuilds, futureJobs: _p9.futureJobs, pendingBuilds: _p9.pendingBuilds, activeBuilds: _p9.activeBuilds, activeJobs: _p9.activeJobs}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'AA', _p8._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{futureJobToDrop: _elm_lang$core$Maybe$Nothing, confirmationState: _p7._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickDropFutureJob':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							futureJobToDrop: _elm_lang$core$Maybe$Just(_p7._0),
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnFutureJobDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Pages_Home$dropFutureJobCmd(_p7._0)
				};
			case 'RequestCompletedDropFutureJob':
				return A3(_Giga_dev$newman$Pages_Home$onRequestCompletedDropFutureJob, _p7._0, model, _p7._1);
			default:
				var _p10 = _p7._0;
				switch (_p10.ctor) {
					case 'CreatedFutureJob':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									futureJobs: {ctor: '::', _0: _p10._0, _1: model.futureJobs}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'DeletedFutureJob':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									futureJobs: A2(_Giga_dev$newman$Pages_Home$removeFromList, _p10._0.id, model.futureJobs)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'ModifiedBuild':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_Home$onEventModifiedBuild, _p10._0, model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_Home$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_Home$OnFutureJobDropConfirmed = function (a) {
	return {ctor: 'OnFutureJobDropConfirmed', _0: a};
};
var _Giga_dev$newman$Pages_Home$OnClickDropFutureJob = function (a) {
	return {ctor: 'OnClickDropFutureJob', _0: a};
};
var _Giga_dev$newman$Pages_Home$viewFutureJobs = function (futureJobs) {
	var formatTime = function (time) {
		return A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(time)));
	};
	var viewFutureJob = function (futureJob) {
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(_elm_lang$core$Basics_ops['++'], '#build/', futureJob.buildId)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										futureJob.buildName,
										A2(
											_elm_lang$core$Basics_ops['++'],
											' (',
											A2(_elm_lang$core$Basics_ops['++'], futureJob.buildBranch, ')')))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#suite/', futureJob.suiteId)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(futureJob.suiteName),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(futureJob.author),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_elm_lang$core$String$join, ',', futureJob.agentGroups)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											formatTime(futureJob.submitTime)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Button$button,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
																_Giga_dev$newman$Pages_Home$OnClickDropFutureJob(futureJob.id)),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('ion-close'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Future Jobs'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover history-table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Build'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Suite Name'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Author'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Required AgentGroups'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Submit Time'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Actions'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, viewFutureJob, futureJobs)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Home$view = function (model) {
	var submittedFutureJobFormat = function (jobId) {
		return {
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'submitted future job with id ', jobId)),
			_1: {ctor: '[]'}
		};
	};
	var toOption = function (data) {
		return A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(data.name),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(_Giga_dev$newman$Pages_Home$viewActiveBuilds, model.activeBuilds, model.activeJobs),
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Home$viewPendingBuilds(model.pendingBuilds),
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_Home$viewHistory(model.historyBuilds),
					_1: {
						ctor: '::',
						_0: _Giga_dev$newman$Pages_Home$viewFutureJobs(model.futureJobs),
						_1: {
							ctor: '::',
							_0: A4(_Giga_dev$newman$Views_NewmanModal$confirmFutureJobDrop, model.futureJobToDrop, _Giga_dev$newman$Pages_Home$NewmanModalMsg, _Giga_dev$newman$Pages_Home$OnFutureJobDropConfirmed, model.confirmationState),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Home$GetDashboardDataCompleted = function (a) {
	return {ctor: 'GetDashboardDataCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Home$getDashboardDataCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_Home$GetDashboardDataCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/dashboard', _Giga_dev$newman$Utils_Types$decodeDashboardData));
var _Giga_dev$newman$Pages_Home$init = {
	ctor: '_Tuple2',
	_0: {
		historyBuilds: {ctor: '[]'},
		futureJobs: {ctor: '[]'},
		pendingBuilds: {ctor: '[]'},
		activeBuilds: {ctor: '[]'},
		activeJobs: _elm_lang$core$Dict$empty,
		confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		futureJobToDrop: _elm_lang$core$Maybe$Nothing
	},
	_1: _Giga_dev$newman$Pages_Home$getDashboardDataCmd
};
