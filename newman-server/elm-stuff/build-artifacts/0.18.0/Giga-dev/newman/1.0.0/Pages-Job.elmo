var _Giga_dev$newman$Pages_Job$parseRadioState = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Job$parseJobId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Job$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {maybeJob: a, collapseState: b, testsTable: c, currTime: d, statusState: e, confirmationState: f, newSuiteName: g, newSuiteMessage: h};
	});
var _Giga_dev$newman$Pages_Job$Shown = {ctor: 'Shown'};
var _Giga_dev$newman$Pages_Job$Hidden = {ctor: 'Hidden'};
var _Giga_dev$newman$Pages_Job$initModel = F2(
	function (jobId, state) {
		return {
			maybeJob: _elm_lang$core$Maybe$Nothing,
			collapseState: _Giga_dev$newman$Pages_Job$Hidden,
			testsTable: A3(
				_Giga_dev$newman$Views_TestsTable$init,
				jobId,
				{ctor: '[]'},
				state),
			currTime: _elm_lang$core$Maybe$Nothing,
			statusState: state,
			confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
			newSuiteName: _elm_lang$core$Maybe$Nothing,
			newSuiteMessage: _elm_lang$core$Maybe$Nothing
		};
	});
var _Giga_dev$newman$Pages_Job$OnNewSuiteNameChanged = function (a) {
	return {ctor: 'OnNewSuiteNameChanged', _0: a};
};
var _Giga_dev$newman$Pages_Job$CreateSuiteResponse = function (a) {
	return {ctor: 'CreateSuiteResponse', _0: a};
};
var _Giga_dev$newman$Pages_Job$createSuiteCmd = F2(
	function (suiteName, jobId) {
		return A2(
			_elm_lang$http$Http$send,
			_Giga_dev$newman$Pages_Job$CreateSuiteResponse,
			A3(
				_elm_lang$http$Http$post,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/api/newman/suite/failedTests?jobId=',
					A2(
						_elm_lang$core$Basics_ops['++'],
						jobId,
						A2(_elm_lang$core$Basics_ops['++'], '&suiteName=', suiteName))),
				_elm_lang$http$Http$emptyBody,
				_Giga_dev$newman$Utils_Types$decodeSuite));
	});
var _Giga_dev$newman$Pages_Job$OnNewSuiteCreateButton = {ctor: 'OnNewSuiteCreateButton'};
var _Giga_dev$newman$Pages_Job$OnNewSuiteConfirm = function (a) {
	return {ctor: 'OnNewSuiteConfirm', _0: a};
};
var _Giga_dev$newman$Pages_Job$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_Job$StatusMsg = function (a) {
	return {ctor: 'StatusMsg', _0: a};
};
var _Giga_dev$newman$Pages_Job$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Job$ReceiveTime = function (a) {
	return {ctor: 'ReceiveTime', _0: a};
};
var _Giga_dev$newman$Pages_Job$requestTime = A2(_elm_lang$core$Task$perform, _Giga_dev$newman$Pages_Job$ReceiveTime, _elm_lang$core$Time$now);
var _Giga_dev$newman$Pages_Job$TestsTableMsg = function (a) {
	return {ctor: 'TestsTableMsg', _0: a};
};
var _Giga_dev$newman$Pages_Job$viewBody = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_Giga_dev$newman$Pages_Job$TestsTableMsg,
		A2(_Giga_dev$newman$Views_TestsTable$viewTable, model.testsTable, model.currTime));
};
var _Giga_dev$newman$Pages_Job$handleEvent = function (event) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Job$WebSocketEvent),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Pages_Job$TestsTableMsg,
					_Giga_dev$newman$Views_TestsTable$handleEvent(event)),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Job$GetTestsViewCompleted = function (a) {
	return {ctor: 'GetTestsViewCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Job$getTestsViewCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Job$GetTestsViewCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job-tests-view?jobId=',
				A2(_elm_lang$core$Basics_ops['++'], jobId, '&all=true&orderBy=name')),
			A2(
				_elm_lang$core$Json_Decode$field,
				'values',
				_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeTestView))));
};
var _Giga_dev$newman$Pages_Job$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetJobInfoCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					var _p2 = _p1._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeJob: _elm_lang$core$Maybe$Just(_p2)
							}),
						_1: _Giga_dev$newman$Pages_Job$getTestsViewCmd(_p2.id)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetTestsViewCompleted':
				var _p3 = _p0._0;
				if (_p3.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								testsTable: A3(
									_Giga_dev$newman$Views_TestsTable$init,
									A2(
										_elm_lang$core$Maybe$withDefault,
										'',
										A2(
											_elm_lang$core$Maybe$map,
											function (_) {
												return _.id;
											},
											model.maybeJob)),
									_p3._0,
									model.statusState)
							}),
						_1: _Giga_dev$newman$Pages_Job$requestTime
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'TestsTableMsg':
				var _p4 = A2(_Giga_dev$newman$Views_TestsTable$update, _p0._0, model.testsTable);
				var newSubModel = _p4._0;
				var newCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testsTable: newSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Job$TestsTableMsg, newCmd)
				};
			case 'ToggleButton':
				var newState = function () {
					var _p5 = model.collapseState;
					if (_p5.ctor === 'Hidden') {
						return _Giga_dev$newman$Pages_Job$Shown;
					} else {
						return _Giga_dev$newman$Pages_Job$Hidden;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{collapseState: newState}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReceiveTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currTime: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'WebSocketEvent':
				var _p6 = _p0._0;
				if (_p6.ctor === 'ModifiedJob') {
					var _p8 = _p6._0;
					var _p7 = model.maybeJob;
					if (_p7.ctor === 'Just') {
						return _elm_lang$core$Native_Utils.eq(_p7._0.id, _p8.id) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									maybeJob: _elm_lang$core$Maybe$Just(_p8)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'StatusMsg':
				var _p10 = _p0._0;
				var _p9 = A2(
					_Giga_dev$newman$Views_TestsTable$update,
					A2(
						_Giga_dev$newman$Views_TestsTable$UpdateFilterState,
						A2(
							_elm_lang$core$Maybe$withDefault,
							'',
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.id;
								},
								model.maybeJob)),
						_p10),
					model.testsTable);
				var newSubModel = _p9._0;
				var newCmd = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{statusState: _p10, testsTable: newSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Job$TestsTableMsg, newCmd)
				};
			case 'OnNewSuiteCreateButton':
				var suiteName = function () {
					var _p11 = model.newSuiteName;
					if (_p11.ctor === 'Just') {
						return _p11._0;
					} else {
						var _p12 = {ctor: '_Tuple2', _0: model.currTime, _1: model.maybeJob};
						if ((_p12._0.ctor === 'Just') && (_p12._1.ctor === 'Just')) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'dev-failing-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p12._1._0.suiteName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-',
										A2(
											_ryannhg$elm_date_format$DateFormat$format,
											_Giga_dev$newman$Utils_Common$timestamp,
											_elm_lang$core$Date$fromTime(_p12._0._0)))));
						} else {
							return '...';
						}
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							newSuiteName: _elm_lang$core$Maybe$Just(suiteName)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewmanModalMsg':
				var _p13 = _p0._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{confirmationState: _p13});
				var cleanup = _elm_lang$core$Native_Utils.eq(_p13, _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState);
				return cleanup ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						newModel,
						{newSuiteName: _elm_lang$core$Maybe$Nothing, newSuiteMessage: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'OnNewSuiteConfirm':
				var _p15 = _p0._0;
				var _p14 = model.maybeJob;
				if (_p14.ctor === 'Just') {
					return A2(_elm_lang$core$String$startsWith, 'dev-', _p15) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Err('Sending request...'))
							}),
						_1: A2(_Giga_dev$newman$Pages_Job$createSuiteCmd, _p15, _p14._0.id)
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Ok('Suite name does not start with \'dev-\''))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState, newSuiteName: _elm_lang$core$Maybe$Nothing, newSuiteMessage: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'CreateSuiteResponse':
				var _p16 = _p0._0;
				if (_p16.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Ok(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Suite with id [',
											A2(_elm_lang$core$Basics_ops['++'], _p16._0.id, '] has been created'))))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p18 = _p16._0;
					var errMsg = function () {
						var _p17 = _p18;
						if (_p17.ctor === 'BadStatus') {
							return _p17._0.body;
						} else {
							return _elm_lang$core$Basics$toString(_p18);
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Ok(errMsg))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							newSuiteName: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Pages_Job$ToggleButton = {ctor: 'ToggleButton'};
var _Giga_dev$newman$Pages_Job$viewHeader = F2(
	function (model, job) {
		var viewRow = function (_p19) {
			var _p20 = _p19;
			return A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(200),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p20._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _p20._1,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		};
		var createSuiteButton = A2(
			_rundis$elm_bootstrap$Bootstrap_Button$button,
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_Job$OnNewSuiteCreateButton),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'vertical-align', _1: 'top'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Create suite'),
				_1: {ctor: '[]'}
			});
		var jobSetupButton = function () {
			var tt = function () {
				var _p21 = model.collapseState;
				if (_p21.ctor === 'Hidden') {
					return 'ion-chevron-down';
				} else {
					return 'ion-chevron-up';
				}
			}();
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Button$button,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Button$success,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_Job$ToggleButton),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(tt),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		}();
		var jobToT = function (_p22) {
			var _p23 = _p22;
			var _p24 = _p23._1;
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_p24),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p23._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], _p24, '?download=true')),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('[Download]'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var jobSetupLogsData = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'collapse',
							_1: _elm_lang$core$Native_Utils.eq(model.collapseState, _Giga_dev$newman$Pages_Job$Hidden)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'collapse.show',
								_1: _elm_lang$core$Native_Utils.eq(model.collapseState, _Giga_dev$newman$Pages_Job$Shown)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$map,
						jobToT,
						_elm_lang$core$Dict$toList(job.jobSetupLogs))),
				_1: {ctor: '[]'}
			});
		var jobSetupLogs = A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: jobSetupButton,
				_1: {
					ctor: '::',
					_0: jobSetupLogsData,
					_1: {ctor: '[]'}
				}
			});
		var testsStatus = A2(
			_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButtonGroup,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A3(
					_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
					_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_RUNNING),
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$title('Running Tests'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineInfo,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_RUNNING)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(job.runningTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A3(
						_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
						_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_SUCCESS),
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title('Passed Tests'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineSuccess,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_SUCCESS)),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(job.passedTests)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
							_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_FAIL),
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title('Failed Tests'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineDanger,
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
												_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_FAIL)),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(job.failedTests)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
								_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_FAILED3TIMES),
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('job-radio-button-failed3X'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_FAILED3TIMES)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(job.failed3TimesTests)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A3(
									_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
									_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_ALL),
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title('All Tests'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
													_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_ALL)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(job.totalTests)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var stateRow = function () {
			var badge = function () {
				var _p25 = job.state;
				switch (_p25.ctor) {
					case 'BROKEN':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
					case 'DONE':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
					case 'RUNNING':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
					case 'PAUSED':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning;
					default:
						return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
				}
			}();
			return viewRow(
				{
					ctor: '_Tuple2',
					_0: 'State',
					_1: A2(
						badge,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_Giga_dev$newman$Utils_Types$jobStateToString(job.state)),
							_1: {ctor: '[]'}
						})
				});
		}();
		var dateFormat = function (maybeDate) {
			var _p26 = maybeDate;
			if (_p26.ctor === 'Just') {
				return A2(
					_ryannhg$elm_date_format$DateFormat$format,
					_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
					_elm_lang$core$Date$fromTime(
						_elm_lang$core$Basics$toFloat(_p26._0)));
			} else {
				return 'N/A';
			}
		};
		var headerRows = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'Suite',
				_1: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(_elm_lang$core$Basics_ops['++'], '#suite/', job.suiteId)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(job.suiteName),
						_1: {ctor: '[]'}
					})
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'Job configuration',
					_1: _elm_lang$html$Html$text(job.jobConfigName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'Submit Time',
						_1: _elm_lang$html$Html$text(
							dateFormat(
								_elm_lang$core$Maybe$Just(job.submitTime)))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'Start Time',
							_1: _elm_lang$html$Html$text(
								dateFormat(job.startTime))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'End Time',
								_1: _elm_lang$html$Html$text(
									dateFormat(job.endTime))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: '# Agents',
									_1: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(
											_elm_lang$core$List$length(job.agents)))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: '# Prep. Agents',
										_1: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(
												_elm_lang$core$List$length(job.preparingAgents)))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: '# requiredAgentGroups',
											_1: _elm_lang$html$Html$text(
												A2(_elm_lang$core$String$join, ',', job.requiredAgentGroups))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'Submitted by',
												_1: _elm_lang$html$Html$text(job.submittedBy)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'Status',
													_1: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: testsStatus,
															_1: {
																ctor: '::',
																_0: createSuiteButton,
																_1: {ctor: '[]'}
															}
														})
												},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'Job Setup Logs', _1: jobSetupLogs},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		var progressRow = viewRow(
			{
				ctor: '_Tuple2',
				_0: 'Progress',
				_1: _rundis$elm_bootstrap$Bootstrap_Progress$progress(
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Progress$value(
							_elm_lang$core$Basics$toFloat((((job.failedTests + job.passedTests) * 100) / job.totalTests) | 0)),
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Progress$label(
								_elm_lang$core$Basics$toString((((job.failedTests + job.passedTests) * 100) / job.totalTests) | 0)),
							_1: {ctor: '[]'}
						}
					})
			});
		var buildRow = A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Build'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#build/', job.buildId)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											job.buildName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' (',
												A2(_elm_lang$core$Basics_ops['++'], job.buildBranch, ')')))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$html$Html$table,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('job-view'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: buildRow,
					_1: {
						ctor: '::',
						_0: stateRow,
						_1: {
							ctor: '::',
							_0: progressRow,
							_1: {ctor: '[]'}
						}
					}
				},
				A2(_elm_lang$core$List$map, viewRow, headerRows)));
	});
var _Giga_dev$newman$Pages_Job$view = function (model) {
	var _p27 = model.maybeJob;
	if (_p27.ctor === 'Just') {
		var _p28 = _p27._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('text'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'Details for job ', _p28.id)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(_Giga_dev$newman$Pages_Job$viewHeader, model, _p28),
					_1: {
						ctor: '::',
						_0: _Giga_dev$newman$Pages_Job$viewBody(model),
						_1: {
							ctor: '::',
							_0: A6(_Giga_dev$newman$Views_NewmanModal$createSuiteForFailedTestsModal, model.newSuiteName, model.newSuiteMessage, _Giga_dev$newman$Pages_Job$NewmanModalMsg, _Giga_dev$newman$Pages_Job$OnNewSuiteNameChanged, _Giga_dev$newman$Pages_Job$OnNewSuiteConfirm, model.confirmationState),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Loading Job...'),
				_1: {ctor: '[]'}
			});
	}
};
var _Giga_dev$newman$Pages_Job$GetJobInfoCompleted = function (a) {
	return {ctor: 'GetJobInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Job$getJobInfoCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Job$GetJobInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/job/', jobId),
			_Giga_dev$newman$Utils_Types$decodeJob));
};
var _Giga_dev$newman$Pages_Job$initCmd = function (jobId) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _Giga_dev$newman$Pages_Job$getJobInfoCmd(jobId),
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Job$requestTime,
				_1: {ctor: '[]'}
			}
		});
};
