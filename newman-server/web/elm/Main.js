
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _rundis$elm_bootstrap$Bootstrap_CDN$fontAwesome = A3(
	_elm_lang$html$Html$node,
	'link',
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$rel('stylesheet'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'),
			_1: {ctor: '[]'}
		}
	},
	{ctor: '[]'});
var _rundis$elm_bootstrap$Bootstrap_CDN$stylesheet = A3(
	_elm_lang$html$Html$node,
	'link',
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$rel('stylesheet'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$href('https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css'),
			_1: {ctor: '[]'}
		}
	},
	{ctor: '[]'});

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _elm_lang$animation_frame$Native_AnimationFrame = function()
{

function create()
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = requestAnimationFrame(function() {
			callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
		});

		return function() {
			cancelAnimationFrame(id);
		};
	});
}

return {
	create: create
};

}();

var _elm_lang$animation_frame$AnimationFrame$rAF = _elm_lang$animation_frame$Native_AnimationFrame.create(
	{ctor: '_Tuple0'});
var _elm_lang$animation_frame$AnimationFrame$subscription = _elm_lang$core$Native_Platform.leaf('AnimationFrame');
var _elm_lang$animation_frame$AnimationFrame$State = F3(
	function (a, b, c) {
		return {subs: a, request: b, oldTime: c};
	});
var _elm_lang$animation_frame$AnimationFrame$init = _elm_lang$core$Task$succeed(
	A3(
		_elm_lang$animation_frame$AnimationFrame$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing,
		0));
var _elm_lang$animation_frame$AnimationFrame$onEffects = F3(
	function (router, subs, _p0) {
		var _p1 = _p0;
		var _p5 = _p1.request;
		var _p4 = _p1.oldTime;
		var _p2 = {ctor: '_Tuple2', _0: _p5, _1: subs};
		if (_p2._0.ctor === 'Nothing') {
			if (_p2._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(
					A3(
						_elm_lang$animation_frame$AnimationFrame$State,
						{ctor: '[]'},
						_elm_lang$core$Maybe$Nothing,
						_p4));
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (time) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$animation_frame$AnimationFrame$State,
										subs,
										_elm_lang$core$Maybe$Just(pid),
										time));
							},
							_elm_lang$core$Time$now);
					},
					_elm_lang$core$Process$spawn(
						A2(
							_elm_lang$core$Task$andThen,
							_elm_lang$core$Platform$sendToSelf(router),
							_elm_lang$animation_frame$AnimationFrame$rAF)));
			}
		} else {
			if (_p2._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p3) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$animation_frame$AnimationFrame$State,
								{ctor: '[]'},
								_elm_lang$core$Maybe$Nothing,
								_p4));
					},
					_elm_lang$core$Process$kill(_p2._0._0));
			} else {
				return _elm_lang$core$Task$succeed(
					A3(_elm_lang$animation_frame$AnimationFrame$State, subs, _p5, _p4));
			}
		}
	});
var _elm_lang$animation_frame$AnimationFrame$onSelfMsg = F3(
	function (router, newTime, _p6) {
		var _p7 = _p6;
		var _p10 = _p7.subs;
		var diff = newTime - _p7.oldTime;
		var send = function (sub) {
			var _p8 = sub;
			if (_p8.ctor === 'Time') {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p8._0(newTime));
			} else {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p8._0(diff));
			}
		};
		return A2(
			_elm_lang$core$Task$andThen,
			function (pid) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p9) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$animation_frame$AnimationFrame$State,
								_p10,
								_elm_lang$core$Maybe$Just(pid),
								newTime));
					},
					_elm_lang$core$Task$sequence(
						A2(_elm_lang$core$List$map, send, _p10)));
			},
			_elm_lang$core$Process$spawn(
				A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$core$Platform$sendToSelf(router),
					_elm_lang$animation_frame$AnimationFrame$rAF)));
	});
var _elm_lang$animation_frame$AnimationFrame$Diff = function (a) {
	return {ctor: 'Diff', _0: a};
};
var _elm_lang$animation_frame$AnimationFrame$diffs = function (tagger) {
	return _elm_lang$animation_frame$AnimationFrame$subscription(
		_elm_lang$animation_frame$AnimationFrame$Diff(tagger));
};
var _elm_lang$animation_frame$AnimationFrame$Time = function (a) {
	return {ctor: 'Time', _0: a};
};
var _elm_lang$animation_frame$AnimationFrame$times = function (tagger) {
	return _elm_lang$animation_frame$AnimationFrame$subscription(
		_elm_lang$animation_frame$AnimationFrame$Time(tagger));
};
var _elm_lang$animation_frame$AnimationFrame$subMap = F2(
	function (func, sub) {
		var _p11 = sub;
		if (_p11.ctor === 'Time') {
			return _elm_lang$animation_frame$AnimationFrame$Time(
				function (_p12) {
					return func(
						_p11._0(_p12));
				});
		} else {
			return _elm_lang$animation_frame$AnimationFrame$Diff(
				function (_p13) {
					return func(
						_p11._0(_p13));
				});
		}
	});
_elm_lang$core$Native_Platform.effectManagers['AnimationFrame'] = {pkg: 'elm-lang/animation-frame', init: _elm_lang$animation_frame$AnimationFrame$init, onEffects: _elm_lang$animation_frame$AnimationFrame$onEffects, onSelfMsg: _elm_lang$animation_frame$AnimationFrame$onSelfMsg, tag: 'sub', subMap: _elm_lang$animation_frame$AnimationFrame$subMap};

var _rundis$elm_bootstrap$Bootstrap_Tab$applyModifier = F2(
	function (option, options) {
		var _p0 = option;
		if (_p0.ctor === 'Attrs') {
			return _elm_lang$core$Native_Utils.update(
				options,
				{
					attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p0._0)
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				options,
				{
					layout: _elm_lang$core$Maybe$Just(_p0._0)
				});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$tabAttributes = function (_p1) {
	var _p2 = _p1;
	var _p4 = _p2._0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'nav', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'nav-tabs', _1: !_p4.isPill},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'nav-pills', _1: _p4.isPill},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p3 = _p4.layout;
				if (_p3.ctor === 'Just') {
					switch (_p3._0.ctor) {
						case 'Justified':
							return {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('nav-justified'),
								_1: {ctor: '[]'}
							};
						case 'Fill':
							return {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('nav-fill'),
								_1: {ctor: '[]'}
							};
						case 'Center':
							return {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('justify-content-center'),
								_1: {ctor: '[]'}
							};
						default:
							return {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('justify-content-end'),
								_1: {ctor: '[]'}
							};
					}
				} else {
					return {ctor: '[]'};
				}
			}(),
			_p4.attributes));
};
var _rundis$elm_bootstrap$Bootstrap_Tab$transitionStyle = function (opacity) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'opacity',
				_1: _elm_lang$core$Basics$toString(opacity)
			},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '-webkit-transition', _1: 'opacity 0.15s linear'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '-o-transition', _1: 'opacity 0.15s linear'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'transition', _1: 'opacity 0.15s linear'},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Tab$activeTabAttributes = F2(
	function (_p6, _p5) {
		var _p7 = _p6;
		var _p8 = _p5;
		var _p9 = _p7._0.visibility;
		switch (_p9.ctor) {
			case 'Hidden':
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				};
			case 'Start':
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'opacity', _1: '0'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				};
			default:
				return {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Tab$transitionStyle(1),
						_1: {ctor: '[]'}
					}
				};
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$renderTabPane = F5(
	function (id, active, _p10, state, config) {
		var _p11 = _p10;
		var displayAttrs = active ? A2(_rundis$elm_bootstrap$Bootstrap_Tab$activeTabAttributes, state, config) : {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'display', _1: 'none'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id(id),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('tab-pane'),
						_1: {ctor: '[]'}
					}
				},
				A2(_elm_lang$core$Basics_ops['++'], displayAttrs, _p11._0.attributes)),
			_p11._0.children);
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$getActiveItem = F2(
	function (_p13, _p12) {
		var _p14 = _p13;
		var _p15 = _p12;
		var _p20 = _p15._0.items;
		var _p16 = _p14._0.activeTab;
		if (_p16.ctor === 'Nothing') {
			return _elm_lang$core$List$head(_p20);
		} else {
			return function (found) {
				var _p17 = found;
				if (_p17.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(_p17._0);
				} else {
					return _elm_lang$core$List$head(_p20);
				}
			}(
				_elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						function (_p18) {
							var _p19 = _p18;
							return _elm_lang$core$Native_Utils.eq(_p19._0.id, _p16._0);
						},
						_p20)));
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$Options = F3(
	function (a, b, c) {
		return {layout: a, isPill: b, attributes: c};
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$Layout = function (a) {
	return {ctor: 'Layout', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$Justified = {ctor: 'Justified'};
var _rundis$elm_bootstrap$Bootstrap_Tab$Fill = {ctor: 'Fill'};
var _rundis$elm_bootstrap$Bootstrap_Tab$Right = {ctor: 'Right'};
var _rundis$elm_bootstrap$Bootstrap_Tab$Center = {ctor: 'Center'};
var _rundis$elm_bootstrap$Bootstrap_Tab$Showing = {ctor: 'Showing'};
var _rundis$elm_bootstrap$Bootstrap_Tab$subscriptions = F2(
	function (_p21, toMsg) {
		var _p22 = _p21;
		var _p25 = _p22._0;
		var _p23 = _p25.visibility;
		if (_p23.ctor === 'Start') {
			return _elm_lang$animation_frame$AnimationFrame$times(
				function (_p24) {
					return toMsg(
						_rundis$elm_bootstrap$Bootstrap_Tab$State(
							_elm_lang$core$Native_Utils.update(
								_p25,
								{visibility: _rundis$elm_bootstrap$Bootstrap_Tab$Showing})));
				});
		} else {
			return _elm_lang$core$Platform_Sub$none;
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$initialState = _rundis$elm_bootstrap$Bootstrap_Tab$State(
	{activeTab: _elm_lang$core$Maybe$Nothing, visibility: _rundis$elm_bootstrap$Bootstrap_Tab$Showing});
var _rundis$elm_bootstrap$Bootstrap_Tab$customInitialState = function (id) {
	return _rundis$elm_bootstrap$Bootstrap_Tab$State(
		{
			activeTab: _elm_lang$core$Maybe$Just(id),
			visibility: _rundis$elm_bootstrap$Bootstrap_Tab$Showing
		});
};
var _rundis$elm_bootstrap$Bootstrap_Tab$Start = {ctor: 'Start'};
var _rundis$elm_bootstrap$Bootstrap_Tab$visibilityTransition = F2(
	function (withAnimation, visibility) {
		var _p26 = {ctor: '_Tuple2', _0: withAnimation, _1: visibility};
		_v14_2:
		do {
			if ((_p26.ctor === '_Tuple2') && (_p26._0 === true)) {
				switch (_p26._1.ctor) {
					case 'Hidden':
						return _rundis$elm_bootstrap$Bootstrap_Tab$Start;
					case 'Start':
						return _rundis$elm_bootstrap$Bootstrap_Tab$Showing;
					default:
						break _v14_2;
				}
			} else {
				break _v14_2;
			}
		} while(false);
		return _rundis$elm_bootstrap$Bootstrap_Tab$Showing;
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$transitionHandler = F3(
	function (toMsg, _p27, withAnimation) {
		var _p28 = _p27;
		var _p29 = _p28._0;
		return _elm_lang$core$Json_Decode$succeed(
			toMsg(
				_rundis$elm_bootstrap$Bootstrap_Tab$State(
					_elm_lang$core$Native_Utils.update(
						_p29,
						{
							visibility: A2(_rundis$elm_bootstrap$Bootstrap_Tab$visibilityTransition, withAnimation, _p29.visibility)
						}))));
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$Hidden = {ctor: 'Hidden'};
var _rundis$elm_bootstrap$Bootstrap_Tab$renderLink = F4(
	function (id, active, _p31, _p30) {
		var _p32 = _p31;
		var _p33 = _p30;
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('nav-item'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'nav-link', _1: true},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'active', _1: active},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(_elm_lang$core$Basics_ops['++'], '#', id)),
								_1: {
									ctor: '::',
									_0: A3(
										_elm_lang$html$Html_Events$onWithOptions,
										'click',
										{stopPropagation: false, preventDefault: active || (!_p33._0.useHash)},
										_elm_lang$core$Json_Decode$succeed(
											_p33._0.toMsg(
												_rundis$elm_bootstrap$Bootstrap_Tab$State(
													{
														activeTab: _elm_lang$core$Maybe$Just(id),
														visibility: A2(_rundis$elm_bootstrap$Bootstrap_Tab$visibilityTransition, _p33._0.withAnimation && (!active), _rundis$elm_bootstrap$Bootstrap_Tab$Hidden)
													})))),
									_1: {ctor: '[]'}
								}
							}
						},
						_p32._0.attributes),
					_p32._0.children),
				_1: {ctor: '[]'}
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$view = F2(
	function (state, _p34) {
		var _p35 = _p34;
		var _p45 = _p35._0.items;
		var _p44 = _p35;
		var _p36 = A2(_rundis$elm_bootstrap$Bootstrap_Tab$getActiveItem, state, _p44);
		if (_p36.ctor === 'Nothing') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						_rundis$elm_bootstrap$Bootstrap_Tab$tabAttributes(_p44),
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tab-content'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				});
		} else {
			var _p43 = _p36._0._0;
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						_rundis$elm_bootstrap$Bootstrap_Tab$tabAttributes(_p44),
						A2(
							_elm_lang$core$List$map,
							function (_p37) {
								var _p38 = _p37;
								var _p39 = _p38._0.id;
								return A4(
									_rundis$elm_bootstrap$Bootstrap_Tab$renderLink,
									_p39,
									_elm_lang$core$Native_Utils.eq(_p39, _p43.id),
									_p38._0.link,
									_p44);
							},
							_p45)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('tab-content'),
								_1: {ctor: '[]'}
							},
							A2(
								_elm_lang$core$List$map,
								function (_p40) {
									var _p41 = _p40;
									var _p42 = _p41._0.id;
									return A5(
										_rundis$elm_bootstrap$Bootstrap_Tab$renderTabPane,
										_p42,
										_elm_lang$core$Native_Utils.eq(_p42, _p43.id),
										_p41._0.pane,
										state,
										_p44);
								},
								_p45)),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$Config = function (a) {
	return {ctor: 'Config', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$config = function (toMsg) {
	return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
		{
			toMsg: toMsg,
			items: {ctor: '[]'},
			isPill: false,
			withAnimation: false,
			layout: _elm_lang$core$Maybe$Nothing,
			attributes: {ctor: '[]'},
			useHash: false
		});
};
var _rundis$elm_bootstrap$Bootstrap_Tab$items = F2(
	function (items, _p46) {
		var _p47 = _p46;
		return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
			_elm_lang$core$Native_Utils.update(
				_p47._0,
				{items: items}));
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$layout = F2(
	function (layout, _p48) {
		var _p49 = _p48;
		return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
			_elm_lang$core$Native_Utils.update(
				_p49._0,
				{
					layout: _elm_lang$core$Maybe$Just(layout)
				}));
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$justified = _rundis$elm_bootstrap$Bootstrap_Tab$layout(_rundis$elm_bootstrap$Bootstrap_Tab$Justified);
var _rundis$elm_bootstrap$Bootstrap_Tab$fill = _rundis$elm_bootstrap$Bootstrap_Tab$layout(_rundis$elm_bootstrap$Bootstrap_Tab$Fill);
var _rundis$elm_bootstrap$Bootstrap_Tab$center = _rundis$elm_bootstrap$Bootstrap_Tab$layout(_rundis$elm_bootstrap$Bootstrap_Tab$Center);
var _rundis$elm_bootstrap$Bootstrap_Tab$right = _rundis$elm_bootstrap$Bootstrap_Tab$layout(_rundis$elm_bootstrap$Bootstrap_Tab$Right);
var _rundis$elm_bootstrap$Bootstrap_Tab$pills = function (_p50) {
	var _p51 = _p50;
	return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
		_elm_lang$core$Native_Utils.update(
			_p51._0,
			{isPill: true}));
};
var _rundis$elm_bootstrap$Bootstrap_Tab$withAnimation = function (_p52) {
	var _p53 = _p52;
	return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
		_elm_lang$core$Native_Utils.update(
			_p53._0,
			{withAnimation: true}));
};
var _rundis$elm_bootstrap$Bootstrap_Tab$attrs = F2(
	function (attrs, _p54) {
		var _p55 = _p54;
		var _p56 = _p55._0;
		return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
			_elm_lang$core$Native_Utils.update(
				_p56,
				{
					attributes: A2(_elm_lang$core$Basics_ops['++'], _p56.attributes, attrs)
				}));
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$useHash = F2(
	function (use, _p57) {
		var _p58 = _p57;
		return _rundis$elm_bootstrap$Bootstrap_Tab$Config(
			_elm_lang$core$Native_Utils.update(
				_p58._0,
				{useHash: use}));
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$Item = function (a) {
	return {ctor: 'Item', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$item = function (_p59) {
	var _p60 = _p59;
	return _rundis$elm_bootstrap$Bootstrap_Tab$Item(
		{id: _p60.id, link: _p60.link, pane: _p60.pane});
};
var _rundis$elm_bootstrap$Bootstrap_Tab$Link = function (a) {
	return {ctor: 'Link', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$link = F2(
	function (attributes, children) {
		return _rundis$elm_bootstrap$Bootstrap_Tab$Link(
			{attributes: attributes, children: children});
	});
var _rundis$elm_bootstrap$Bootstrap_Tab$Pane = function (a) {
	return {ctor: 'Pane', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Tab$pane = F2(
	function (attributes, children) {
		return _rundis$elm_bootstrap$Bootstrap_Tab$Pane(
			{attributes: attributes, children: children});
	});

var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$horizontalAlignOption = function (align) {
	var _p0 = align;
	switch (_p0.ctor) {
		case 'Left':
			return 'start';
		case 'Center':
			return 'center';
		case 'Right':
			return 'end';
		case 'Around':
			return 'around';
		default:
			return 'between';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$verticalAlignOption = function (align) {
	var _p1 = align;
	switch (_p1.ctor) {
		case 'Top':
			return 'start';
		case 'Middle':
			return 'center';
		default:
			return 'end';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$moveCountOption = function (size) {
	var _p2 = size;
	switch (_p2.ctor) {
		case 'Move0':
			return '0';
		case 'Move1':
			return '1';
		case 'Move2':
			return '2';
		case 'Move3':
			return '3';
		case 'Move4':
			return '4';
		case 'Move5':
			return '5';
		case 'Move6':
			return '6';
		case 'Move7':
			return '7';
		case 'Move8':
			return '8';
		case 'Move9':
			return '9';
		case 'Move10':
			return '10';
		case 'Move11':
			return '11';
		default:
			return '12';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$offsetCountOption = function (size) {
	var _p3 = size;
	switch (_p3.ctor) {
		case 'Offset0':
			return '0';
		case 'Offset1':
			return '1';
		case 'Offset2':
			return '2';
		case 'Offset3':
			return '3';
		case 'Offset4':
			return '4';
		case 'Offset5':
			return '5';
		case 'Offset6':
			return '6';
		case 'Offset7':
			return '7';
		case 'Offset8':
			return '8';
		case 'Offset9':
			return '9';
		case 'Offset10':
			return '10';
		default:
			return '11';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$columnCountOption = function (size) {
	var _p4 = size;
	switch (_p4.ctor) {
		case 'Col':
			return _elm_lang$core$Maybe$Nothing;
		case 'Col1':
			return _elm_lang$core$Maybe$Just('1');
		case 'Col2':
			return _elm_lang$core$Maybe$Just('2');
		case 'Col3':
			return _elm_lang$core$Maybe$Just('3');
		case 'Col4':
			return _elm_lang$core$Maybe$Just('4');
		case 'Col5':
			return _elm_lang$core$Maybe$Just('5');
		case 'Col6':
			return _elm_lang$core$Maybe$Just('6');
		case 'Col7':
			return _elm_lang$core$Maybe$Just('7');
		case 'Col8':
			return _elm_lang$core$Maybe$Just('8');
		case 'Col9':
			return _elm_lang$core$Maybe$Just('9');
		case 'Col10':
			return _elm_lang$core$Maybe$Just('10');
		case 'Col11':
			return _elm_lang$core$Maybe$Just('11');
		case 'Col12':
			return _elm_lang$core$Maybe$Just('12');
		default:
			return _elm_lang$core$Maybe$Just('auto');
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption = function (size) {
	var _p5 = size;
	switch (_p5.ctor) {
		case 'XS':
			return _elm_lang$core$Maybe$Nothing;
		case 'SM':
			return _elm_lang$core$Maybe$Just('sm');
		case 'MD':
			return _elm_lang$core$Maybe$Just('md');
		case 'LG':
			return _elm_lang$core$Maybe$Just('lg');
		default:
			return _elm_lang$core$Maybe$Just('xl');
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeToPartialString = function (screenSize) {
	var _p6 = _rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(screenSize);
	if (_p6.ctor === 'Just') {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(_elm_lang$core$Basics_ops['++'], _p6._0, '-'));
	} else {
		return '-';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$hAlignClass = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'justify-content-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A2(
						_elm_lang$core$Maybe$map,
						function (v) {
							return A2(_elm_lang$core$Basics_ops['++'], v, '-');
						},
						_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(_p8.screenSize))),
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$horizontalAlignOption(_p8.align))));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$hAlignsToAttributes = function (aligns) {
	var align = function (a) {
		return A2(_elm_lang$core$Maybe$map, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$hAlignClass, a);
	};
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(_elm_lang$core$List$map, align, aligns));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$vAlignClass = F2(
	function (prefix, _p9) {
		var _p10 = _p9;
		return _elm_lang$html$Html_Attributes$class(
			A2(
				_elm_lang$core$Basics_ops['++'],
				prefix,
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$Maybe$withDefault,
						'',
						A2(
							_elm_lang$core$Maybe$map,
							function (v) {
								return A2(_elm_lang$core$Basics_ops['++'], v, '-');
							},
							_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(_p10.screenSize))),
					_rundis$elm_bootstrap$Bootstrap_Grid_Internal$verticalAlignOption(_p10.align))));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$vAlignsToAttributes = F2(
	function (prefix, aligns) {
		var align = function (a) {
			return A2(
				_elm_lang$core$Maybe$map,
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$vAlignClass(prefix),
				a);
		};
		return A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A2(_elm_lang$core$List$map, align, aligns));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$pushesToAttributes = function (pushes) {
	var push = function (m) {
		var _p11 = m;
		if (_p11.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'push',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeToPartialString(_p11._0.screenSize),
							_rundis$elm_bootstrap$Bootstrap_Grid_Internal$moveCountOption(_p11._0.moveCount)))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(_elm_lang$core$List$map, push, pushes));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$pullsToAttributes = function (pulls) {
	var pull = function (m) {
		var _p12 = m;
		if (_p12.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'pull',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeToPartialString(_p12._0.screenSize),
							_rundis$elm_bootstrap$Bootstrap_Grid_Internal$moveCountOption(_p12._0.moveCount)))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(_elm_lang$core$List$map, pull, pulls));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$offsetClass = function (_p13) {
	var _p14 = _p13;
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'offset',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeToPartialString(_p14.screenSize),
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offsetCountOption(_p14.offsetCount))));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$offsetsToAttributes = function (offsets) {
	var offset = function (m) {
		return A2(_elm_lang$core$Maybe$map, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$offsetClass, m);
	};
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(_elm_lang$core$List$map, offset, offsets));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$colWidthClass = function (_p15) {
	var _p16 = _p15;
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'col',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A2(
						_elm_lang$core$Maybe$map,
						function (v) {
							return A2(_elm_lang$core$Basics_ops['++'], '-', v);
						},
						_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(_p16.screenSize))),
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A2(
						_elm_lang$core$Maybe$map,
						function (v) {
							return A2(_elm_lang$core$Basics_ops['++'], '-', v);
						},
						_rundis$elm_bootstrap$Bootstrap_Grid_Internal$columnCountOption(_p16.columnCount))))));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$colWidthsToAttributes = function (widths) {
	var width = function (w) {
		return A2(_elm_lang$core$Maybe$map, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$colWidthClass, w);
	};
	return A2(
		_elm_lang$core$List$filterMap,
		_elm_lang$core$Basics$identity,
		A2(_elm_lang$core$List$map, width, widths));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$defaultRowOptions = {
	attributes: {ctor: '[]'},
	vAlignXs: _elm_lang$core$Maybe$Nothing,
	vAlignSm: _elm_lang$core$Maybe$Nothing,
	vAlignMd: _elm_lang$core$Maybe$Nothing,
	vAlignLg: _elm_lang$core$Maybe$Nothing,
	vAlignXl: _elm_lang$core$Maybe$Nothing,
	hAlignXs: _elm_lang$core$Maybe$Nothing,
	hAlignSm: _elm_lang$core$Maybe$Nothing,
	hAlignMd: _elm_lang$core$Maybe$Nothing,
	hAlignLg: _elm_lang$core$Maybe$Nothing,
	hAlignXl: _elm_lang$core$Maybe$Nothing
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$defaultColOptions = {
	attributes: {ctor: '[]'},
	widthXs: _elm_lang$core$Maybe$Nothing,
	widthSm: _elm_lang$core$Maybe$Nothing,
	widthMd: _elm_lang$core$Maybe$Nothing,
	widthLg: _elm_lang$core$Maybe$Nothing,
	widthXl: _elm_lang$core$Maybe$Nothing,
	offsetXs: _elm_lang$core$Maybe$Nothing,
	offsetSm: _elm_lang$core$Maybe$Nothing,
	offsetMd: _elm_lang$core$Maybe$Nothing,
	offsetLg: _elm_lang$core$Maybe$Nothing,
	offsetXl: _elm_lang$core$Maybe$Nothing,
	pullXs: _elm_lang$core$Maybe$Nothing,
	pullSm: _elm_lang$core$Maybe$Nothing,
	pullMd: _elm_lang$core$Maybe$Nothing,
	pullLg: _elm_lang$core$Maybe$Nothing,
	pullXl: _elm_lang$core$Maybe$Nothing,
	pushXs: _elm_lang$core$Maybe$Nothing,
	pushSm: _elm_lang$core$Maybe$Nothing,
	pushMd: _elm_lang$core$Maybe$Nothing,
	pushLg: _elm_lang$core$Maybe$Nothing,
	pushXl: _elm_lang$core$Maybe$Nothing,
	alignXs: _elm_lang$core$Maybe$Nothing,
	alignSm: _elm_lang$core$Maybe$Nothing,
	alignMd: _elm_lang$core$Maybe$Nothing,
	alignLg: _elm_lang$core$Maybe$Nothing,
	alignXl: _elm_lang$core$Maybe$Nothing
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyRowHAlign = F2(
	function (align, options) {
		var _p17 = align.screenSize;
		switch (_p17.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						hAlignXs: _elm_lang$core$Maybe$Just(align)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						hAlignSm: _elm_lang$core$Maybe$Just(align)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						hAlignMd: _elm_lang$core$Maybe$Just(align)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						hAlignLg: _elm_lang$core$Maybe$Just(align)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						hAlignXl: _elm_lang$core$Maybe$Just(align)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyRowVAlign = F2(
	function (align, options) {
		var _p18 = align.screenSize;
		switch (_p18.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						vAlignXs: _elm_lang$core$Maybe$Just(align)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						vAlignSm: _elm_lang$core$Maybe$Just(align)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						vAlignMd: _elm_lang$core$Maybe$Just(align)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						vAlignLg: _elm_lang$core$Maybe$Just(align)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						vAlignXl: _elm_lang$core$Maybe$Just(align)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyRowOption = F2(
	function (modifier, options) {
		var _p19 = modifier;
		switch (_p19.ctor) {
			case 'RowAttrs':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p19._0)
					});
			case 'RowVAlign':
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyRowVAlign, _p19._0, options);
			default:
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyRowHAlign, _p19._0, options);
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColAlign = F2(
	function (align, options) {
		var _p20 = align.screenSize;
		switch (_p20.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						alignXs: _elm_lang$core$Maybe$Just(align)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						alignSm: _elm_lang$core$Maybe$Just(align)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						alignMd: _elm_lang$core$Maybe$Just(align)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						alignLg: _elm_lang$core$Maybe$Just(align)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						alignXl: _elm_lang$core$Maybe$Just(align)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColPush = F2(
	function (push, options) {
		var _p21 = push.screenSize;
		switch (_p21.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pushXs: _elm_lang$core$Maybe$Just(push)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pushSm: _elm_lang$core$Maybe$Just(push)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pushMd: _elm_lang$core$Maybe$Just(push)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pushLg: _elm_lang$core$Maybe$Just(push)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pushXl: _elm_lang$core$Maybe$Just(push)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColPull = F2(
	function (pull, options) {
		var _p22 = pull.screenSize;
		switch (_p22.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pullXs: _elm_lang$core$Maybe$Just(pull)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pullSm: _elm_lang$core$Maybe$Just(pull)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pullMd: _elm_lang$core$Maybe$Just(pull)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pullLg: _elm_lang$core$Maybe$Just(pull)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						pullXl: _elm_lang$core$Maybe$Just(pull)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColOffset = F2(
	function (offset, options) {
		var _p23 = offset.screenSize;
		switch (_p23.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						offsetXs: _elm_lang$core$Maybe$Just(offset)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						offsetSm: _elm_lang$core$Maybe$Just(offset)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						offsetMd: _elm_lang$core$Maybe$Just(offset)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						offsetLg: _elm_lang$core$Maybe$Just(offset)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						offsetXl: _elm_lang$core$Maybe$Just(offset)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColWidth = F2(
	function (width, options) {
		var _p24 = width.screenSize;
		switch (_p24.ctor) {
			case 'XS':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						widthXs: _elm_lang$core$Maybe$Just(width)
					});
			case 'SM':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						widthSm: _elm_lang$core$Maybe$Just(width)
					});
			case 'MD':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						widthMd: _elm_lang$core$Maybe$Just(width)
					});
			case 'LG':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						widthLg: _elm_lang$core$Maybe$Just(width)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						widthXl: _elm_lang$core$Maybe$Just(width)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColOption = F2(
	function (modifier, options) {
		var _p25 = modifier;
		switch (_p25.ctor) {
			case 'ColAttrs':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p25._0)
					});
			case 'ColWidth':
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColWidth, _p25._0, options);
			case 'ColOffset':
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColOffset, _p25._0, options);
			case 'ColPull':
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColPull, _p25._0, options);
			case 'ColPush':
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColPush, _p25._0, options);
			default:
				return A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColAlign, _p25._0, options);
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyRowOption, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$defaultRowOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('row'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$vAlignsToAttributes,
				'align-items-',
				{
					ctor: '::',
					_0: options.vAlignXs,
					_1: {
						ctor: '::',
						_0: options.vAlignSm,
						_1: {
							ctor: '::',
							_0: options.vAlignMd,
							_1: {
								ctor: '::',
								_0: options.vAlignLg,
								_1: {
									ctor: '::',
									_0: options.vAlignXl,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$hAlignsToAttributes(
					{
						ctor: '::',
						_0: options.hAlignXs,
						_1: {
							ctor: '::',
							_0: options.hAlignSm,
							_1: {
								ctor: '::',
								_0: options.hAlignMd,
								_1: {
									ctor: '::',
									_0: options.hAlignLg,
									_1: {
										ctor: '::',
										_0: options.hAlignXl,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				options.attributes)));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Width = F2(
	function (a, b) {
		return {screenSize: a, columnCount: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset = F2(
	function (a, b) {
		return {screenSize: a, offsetCount: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Pull = F2(
	function (a, b) {
		return {screenSize: a, moveCount: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Push = F2(
	function (a, b) {
		return {screenSize: a, moveCount: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$VAlign = F2(
	function (a, b) {
		return {screenSize: a, align: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$HAlign = F2(
	function (a, b) {
		return {screenSize: a, align: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColOptions = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return {attributes: a, widthXs: b, widthSm: c, widthMd: d, widthLg: e, widthXl: f, offsetXs: g, offsetSm: h, offsetMd: i, offsetLg: j, offsetXl: k, pullXs: l, pullSm: m, pullMd: n, pullLg: o, pullXl: p, pushXs: q, pushSm: r, pushMd: s, pushLg: t, pushXl: u, alignXs: v, alignSm: w, alignMd: x, alignLg: y, alignXl: z};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowOptions = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {attributes: a, vAlignXs: b, vAlignSm: c, vAlignMd: d, vAlignLg: e, vAlignXl: f, hAlignXs: g, hAlignSm: h, hAlignMd: i, hAlignLg: j, hAlignXl: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAttrs = function (a) {
	return {ctor: 'ColAttrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAlign = function (a) {
	return {ctor: 'ColAlign', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign = F2(
	function (size, align) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAlign(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$VAlign, size, align));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColPush = function (a) {
	return {ctor: 'ColPush', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$push = F2(
	function (size, count) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColPush(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$Push, size, count));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColPull = function (a) {
	return {ctor: 'ColPull', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull = F2(
	function (size, count) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColPull(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$Pull, size, count));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColOffset = function (a) {
	return {ctor: 'ColOffset', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset = F2(
	function (size, count) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColOffset(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset, size, count));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColWidth = function (a) {
	return {ctor: 'ColWidth', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$width = F2(
	function (size, count) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColWidth(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$Width, size, count));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowAttrs = function (a) {
	return {ctor: 'RowAttrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowHAlign = function (a) {
	return {ctor: 'RowHAlign', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign = F2(
	function (size, align) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowHAlign(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$HAlign, size, align));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowVAlign = function (a) {
	return {ctor: 'RowVAlign', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign = F2(
	function (size, align) {
		return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowVAlign(
			A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$VAlign, size, align));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL = {ctor: 'XL'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG = {ctor: 'LG'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD = {ctor: 'MD'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM = {ctor: 'SM'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS = {ctor: 'XS'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAuto = {ctor: 'ColAuto'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col12 = {ctor: 'Col12'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col11 = {ctor: 'Col11'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col10 = {ctor: 'Col10'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col9 = {ctor: 'Col9'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col8 = {ctor: 'Col8'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col7 = {ctor: 'Col7'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col6 = {ctor: 'Col6'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col5 = {ctor: 'Col5'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col4 = {ctor: 'Col4'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col3 = {ctor: 'Col3'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col2 = {ctor: 'Col2'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col1 = {ctor: 'Col1'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col = {ctor: 'Col'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$colAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$applyColOption, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$defaultColOptions, modifiers);
	var shouldAddDefaultXs = _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: options.widthXs,
					_1: {
						ctor: '::',
						_0: options.widthSm,
						_1: {
							ctor: '::',
							_0: options.widthMd,
							_1: {
								ctor: '::',
								_0: options.widthLg,
								_1: {
									ctor: '::',
									_0: options.widthXl,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				})),
		0);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colWidthsToAttributes(
			{
				ctor: '::',
				_0: shouldAddDefaultXs ? _elm_lang$core$Maybe$Just(
					A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$Width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col)) : options.widthXs,
				_1: {
					ctor: '::',
					_0: options.widthSm,
					_1: {
						ctor: '::',
						_0: options.widthMd,
						_1: {
							ctor: '::',
							_0: options.widthLg,
							_1: {
								ctor: '::',
								_0: options.widthXl,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offsetsToAttributes(
				{
					ctor: '::',
					_0: options.offsetXs,
					_1: {
						ctor: '::',
						_0: options.offsetSm,
						_1: {
							ctor: '::',
							_0: options.offsetMd,
							_1: {
								ctor: '::',
								_0: options.offsetLg,
								_1: {
									ctor: '::',
									_0: options.offsetXl,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pullsToAttributes(
					{
						ctor: '::',
						_0: options.pullXs,
						_1: {
							ctor: '::',
							_0: options.pullSm,
							_1: {
								ctor: '::',
								_0: options.pullMd,
								_1: {
									ctor: '::',
									_0: options.pullLg,
									_1: {
										ctor: '::',
										_0: options.pullXl,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				A2(
					_elm_lang$core$Basics_ops['++'],
					_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pushesToAttributes(
						{
							ctor: '::',
							_0: options.pushXs,
							_1: {
								ctor: '::',
								_0: options.pushSm,
								_1: {
									ctor: '::',
									_0: options.pushMd,
									_1: {
										ctor: '::',
										_0: options.pushLg,
										_1: {
											ctor: '::',
											_0: options.pushXl,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_rundis$elm_bootstrap$Bootstrap_Grid_Internal$vAlignsToAttributes,
							'align-self-',
							{
								ctor: '::',
								_0: options.alignXs,
								_1: {
									ctor: '::',
									_0: options.alignSm,
									_1: {
										ctor: '::',
										_0: options.alignMd,
										_1: {
											ctor: '::',
											_0: options.alignLg,
											_1: {
												ctor: '::',
												_0: options.alignXl,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						options.attributes)))));
};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset11 = {ctor: 'Offset11'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset10 = {ctor: 'Offset10'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset9 = {ctor: 'Offset9'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset8 = {ctor: 'Offset8'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset7 = {ctor: 'Offset7'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset6 = {ctor: 'Offset6'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset5 = {ctor: 'Offset5'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset4 = {ctor: 'Offset4'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset3 = {ctor: 'Offset3'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset2 = {ctor: 'Offset2'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset1 = {ctor: 'Offset1'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset0 = {ctor: 'Offset0'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12 = {ctor: 'Move12'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11 = {ctor: 'Move11'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10 = {ctor: 'Move10'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9 = {ctor: 'Move9'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8 = {ctor: 'Move8'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7 = {ctor: 'Move7'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6 = {ctor: 'Move6'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5 = {ctor: 'Move5'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4 = {ctor: 'Move4'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3 = {ctor: 'Move3'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2 = {ctor: 'Move2'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1 = {ctor: 'Move1'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0 = {ctor: 'Move0'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom = {ctor: 'Bottom'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle = {ctor: 'Middle'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top = {ctor: 'Top'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Between = {ctor: 'Between'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Around = {ctor: 'Around'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Right = {ctor: 'Right'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Center = {ctor: 'Center'};
var _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Left = {ctor: 'Left'};

var _rundis$elm_bootstrap$Bootstrap_Internal_Button$roleClass = function (role) {
	var _p0 = role;
	switch (_p0.ctor) {
		case 'Primary':
			return 'primary';
		case 'Secondary':
			return 'secondary';
		case 'Success':
			return 'success';
		case 'Info':
			return 'info';
		case 'Warning':
			return 'warning';
		case 'Danger':
			return 'danger';
		default:
			return 'link';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$applyModifier = F2(
	function (modifier, options) {
		var _p1 = modifier;
		switch (_p1.ctor) {
			case 'Size':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						size: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Coloring':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						coloring: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Block':
				return _elm_lang$core$Native_Utils.update(
					options,
					{block: true});
			case 'Disabled':
				return _elm_lang$core$Native_Utils.update(
					options,
					{disabled: _p1._0});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p1._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$defaultOptions = {
	coloring: _elm_lang$core$Maybe$Nothing,
	block: false,
	disabled: false,
	size: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Internal_Button$applyModifier, _rundis$elm_bootstrap$Bootstrap_Internal_Button$defaultOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'btn', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'btn-block', _1: options.block},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'disabled', _1: options.disabled},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$disabled(options.disabled),
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p2 = A2(_elm_lang$core$Maybe$andThen, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption, options.size);
				if (_p2.ctor === 'Just') {
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], 'btn-', _p2._0)),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}(),
			A2(
				_elm_lang$core$Basics_ops['++'],
				function () {
					var _p3 = options.coloring;
					if (_p3.ctor === 'Just') {
						if (_p3._0.ctor === 'Roled') {
							return {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'btn-',
										_rundis$elm_bootstrap$Bootstrap_Internal_Button$roleClass(_p3._0._0))),
								_1: {ctor: '[]'}
							};
						} else {
							return {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'btn-outline-',
										_rundis$elm_bootstrap$Bootstrap_Internal_Button$roleClass(_p3._0._0))),
								_1: {ctor: '[]'}
							};
						}
					} else {
						return {ctor: '[]'};
					}
				}(),
				options.attributes)));
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Options = F5(
	function (a, b, c, d, e) {
		return {coloring: a, block: b, disabled: c, size: d, attributes: e};
	});
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Disabled = function (a) {
	return {ctor: 'Disabled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Block = {ctor: 'Block'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring = function (a) {
	return {ctor: 'Coloring', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Size = function (a) {
	return {ctor: 'Size', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined = function (a) {
	return {ctor: 'Outlined', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled = function (a) {
	return {ctor: 'Roled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Link = {ctor: 'Link'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Info = {ctor: 'Info'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Success = {ctor: 'Success'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Secondary = {ctor: 'Secondary'};
var _rundis$elm_bootstrap$Bootstrap_Internal_Button$Primary = {ctor: 'Primary'};

var _rundis$elm_bootstrap$Bootstrap_Button$disabled = function (disabled) {
	return _rundis$elm_bootstrap$Bootstrap_Internal_Button$Disabled(disabled);
};
var _rundis$elm_bootstrap$Bootstrap_Button$block = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Block;
var _rundis$elm_bootstrap$Bootstrap_Button$outlineDanger = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Danger));
var _rundis$elm_bootstrap$Bootstrap_Button$outlineWarning = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Warning));
var _rundis$elm_bootstrap$Bootstrap_Button$outlineInfo = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Info));
var _rundis$elm_bootstrap$Bootstrap_Button$outlineSuccess = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Success));
var _rundis$elm_bootstrap$Bootstrap_Button$outlineSecondary = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Secondary));
var _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Outlined(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Primary));
var _rundis$elm_bootstrap$Bootstrap_Button$roleLink = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Link));
var _rundis$elm_bootstrap$Bootstrap_Button$danger = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Danger));
var _rundis$elm_bootstrap$Bootstrap_Button$warning = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Warning));
var _rundis$elm_bootstrap$Bootstrap_Button$info = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Info));
var _rundis$elm_bootstrap$Bootstrap_Button$success = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Success));
var _rundis$elm_bootstrap$Bootstrap_Button$secondary = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Secondary));
var _rundis$elm_bootstrap$Bootstrap_Button$primary = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Coloring(
	_rundis$elm_bootstrap$Bootstrap_Internal_Button$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_Button$Primary));
var _rundis$elm_bootstrap$Bootstrap_Button$large = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG);
var _rundis$elm_bootstrap$Bootstrap_Button$small = _rundis$elm_bootstrap$Bootstrap_Internal_Button$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM);
var _rundis$elm_bootstrap$Bootstrap_Button$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Internal_Button$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Button$onClick = function (message) {
	var defaultOptions = _elm_lang$html$Html_Events$defaultOptions;
	return _rundis$elm_bootstrap$Bootstrap_Button$attrs(
		{
			ctor: '::',
			_0: A3(
				_elm_lang$html$Html_Events$onWithOptions,
				'click',
				_elm_lang$core$Native_Utils.update(
					defaultOptions,
					{preventDefault: true}),
				_elm_lang$core$Json_Decode$succeed(message)),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Button$checkboxButton = F3(
	function (checked, options, children) {
		return A2(
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'active', _1: checked},
						_1: {ctor: '[]'}
					}),
				_1: _rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(options)
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$checked(checked),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autocomplete(false),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: children
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Button$radioButton = F3(
	function (checked, options, children) {
		var hideRadio = A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'button');
		return A2(
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'active', _1: checked},
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: hideRadio,
					_1: _rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(options)
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('radio'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$checked(checked),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autocomplete(false),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: children
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Button$linkButton = F2(
	function (options, children) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
				_1: _rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(options)
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Button$button = F2(
	function (options, children) {
		return A2(
			_elm_lang$html$Html$button,
			_rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(options),
			children);
	});

var _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationToString = function (validation) {
	var _p0 = validation;
	switch (_p0.ctor) {
		case 'Success':
			return 'success';
		case 'Warning':
			return 'warning';
		default:
			return 'danger';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationWrapperAttribute = function (validation) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'has-',
			_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationToString(validation)));
};
var _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Success = {ctor: 'Success'};

var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$stateAttribute = function (state) {
	var _p0 = state;
	switch (_p0.ctor) {
		case 'On':
			return _elm_lang$html$Html_Attributes$checked(true);
		case 'Off':
			return _elm_lang$html$Html_Attributes$checked(false);
		default:
			return A2(_elm_lang$html$Html_Attributes$attribute, 'indeterminate', 'true');
	}
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$toAttributes = function (options) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				options.custom ? 'custom-control-input' : 'form-check-input'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$disabled(options.disabled),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$stateAttribute(options.state),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Events$onCheck, options.onChecked),
					_1: {ctor: '[]'}
				}),
			options.attributes));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$applyModifier = F2(
	function (modifier, options) {
		var _p1 = modifier;
		switch (_p1.ctor) {
			case 'Value':
				return _elm_lang$core$Native_Utils.update(
					options,
					{state: _p1._0});
			case 'Inline':
				return _elm_lang$core$Native_Utils.update(
					options,
					{inline: true});
			case 'OnChecked':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						onChecked: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Custom':
				return _elm_lang$core$Native_Utils.update(
					options,
					{custom: true});
			case 'Disabled':
				return _elm_lang$core$Native_Utils.update(
					options,
					{disabled: _p1._0});
			case 'Validation':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						validation: _elm_lang$core$Maybe$Just(_p1._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p1._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Options = F7(
	function (a, b, c, d, e, f, g) {
		return {state: a, inline: b, custom: c, disabled: d, onChecked: e, validation: f, attributes: g};
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Checkbox = function (a) {
	return {ctor: 'Checkbox', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$create = F2(
	function (options, label) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Checkbox(
			{options: options, label: label});
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Validation = function (a) {
	return {ctor: 'Validation', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$success = _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Success);
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$warning = _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Warning);
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$danger = _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Danger);
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Disabled = function (a) {
	return {ctor: 'Disabled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$disabled = function (disabled) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Disabled(disabled);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Custom = {ctor: 'Custom'};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$OnChecked = function (a) {
	return {ctor: 'OnChecked', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$onCheck = function (toMsg) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$OnChecked(toMsg);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Inline = {ctor: 'Inline'};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$inline = _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Inline;
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Value = function (a) {
	return {ctor: 'Value', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Indeterminate = {ctor: 'Indeterminate'};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$indeterminate = _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Value(_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Indeterminate);
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Off = {ctor: 'Off'};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$defaultOptions = {
	state: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Off,
	inline: false,
	custom: false,
	disabled: false,
	onChecked: _elm_lang$core$Maybe$Nothing,
	validation: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$view = function (_p2) {
	var _p3 = _p2;
	var _p5 = _p3._0;
	var opts = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$applyModifier, _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$defaultOptions, _p5.options);
	var validationAttrs = function () {
		var _p4 = opts.validation;
		if (_p4.ctor === 'Just') {
			return {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationWrapperAttribute(_p4._0),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	return opts.custom ? A2(
		_elm_lang$html$Html$div,
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'custom-controls-stacked', _1: !opts.inline},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'd-inline-block', _1: opts.inline},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			validationAttrs),
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('custom-control custom-checkbox'),
						_1: {ctor: '[]'}
					},
					validationAttrs),
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$toAttributes(opts),
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('custom-control-indicator'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('custom-control-description'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(_p5.label),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'form-check', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'form-check-inline', _1: opts.inline},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'disabled', _1: opts.disabled},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			validationAttrs),
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('form-check-label'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$toAttributes(opts),
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], ' ', _p5.label)),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$checkbox = F2(
	function (options, label) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$view(
			A2(_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$create, options, label));
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$custom = function (options) {
	return function (_p6) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$view(
			A2(
				_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$create,
				{ctor: '::', _0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Custom, _1: options},
				_p6));
	};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$On = {ctor: 'On'};
var _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$checked = function (isCheck) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Value(
		isCheck ? _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$On : _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$Off);
};

var _rundis$elm_bootstrap$Bootstrap_Form_Input$validationAttribute = function (validation) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'form-control-',
			_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationToString(validation)));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$typeAttribute = function (inputType) {
	return _elm_lang$html$Html_Attributes$type_(
		function () {
			var _p0 = inputType;
			switch (_p0.ctor) {
				case 'Text':
					return 'text';
				case 'Password':
					return 'password';
				case 'DatetimeLocal':
					return 'datetime-local';
				case 'Date':
					return 'date';
				case 'Month':
					return 'month';
				case 'Time':
					return 'time';
				case 'Week':
					return 'week';
				case 'Number':
					return 'number';
				case 'Email':
					return 'email';
				case 'Url':
					return 'url';
				case 'Search':
					return 'search';
				case 'Tel':
					return 'tel';
				default:
					return 'color';
			}
		}());
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$sizeAttribute = function (size) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (s) {
			return _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'form-control-', s));
		},
		_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(size));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$applyModifier = F2(
	function (modifier, options) {
		var _p1 = modifier;
		switch (_p1.ctor) {
			case 'Size':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						size: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Id':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						id: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Type':
				return _elm_lang$core$Native_Utils.update(
					options,
					{tipe: _p1._0});
			case 'Disabled':
				return _elm_lang$core$Native_Utils.update(
					options,
					{disabled: _p1._0});
			case 'Value':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						value: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'DefaultValue':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						defaultValue: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Placeholder':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						placeholder: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'OnInput':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						onInput: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Validation':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						validation: _elm_lang$core$Maybe$Just(_p1._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p1._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Options = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {tipe: a, id: b, size: c, disabled: d, value: e, defaultValue: f, placeholder: g, onInput: h, validation: i, attributes: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Input = function (a) {
	return {ctor: 'Input', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Placeholder = function (a) {
	return {ctor: 'Placeholder', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder = function (value) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$Placeholder(value);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Validation = function (a) {
	return {ctor: 'Validation', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$success = _rundis$elm_bootstrap$Bootstrap_Form_Input$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Success);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$warning = _rundis$elm_bootstrap$Bootstrap_Form_Input$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Warning);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$danger = _rundis$elm_bootstrap$Bootstrap_Form_Input$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Danger);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$OnInput = function (a) {
	return {ctor: 'OnInput', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput = function (toMsg) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$OnInput(toMsg);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$DefaultValue = function (a) {
	return {ctor: 'DefaultValue', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$defaultValue = function (value) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$DefaultValue(value);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Value = function (a) {
	return {ctor: 'Value', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$value = function (value) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$Value(value);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Disabled = function (a) {
	return {ctor: 'Disabled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$disabled = function (disabled) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$Disabled(disabled);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Type = function (a) {
	return {ctor: 'Type', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$create = F2(
	function (tipe, options) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Input$Input(
			{
				options: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$Type(tipe),
					_1: options
				}
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Id = function (a) {
	return {ctor: 'Id', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$id = function (id) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Input$Id(id);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Size = function (a) {
	return {ctor: 'Size', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$small = _rundis$elm_bootstrap$Bootstrap_Form_Input$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$large = _rundis$elm_bootstrap$Bootstrap_Form_Input$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Color = {ctor: 'Color'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Tel = {ctor: 'Tel'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Search = {ctor: 'Search'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Url = {ctor: 'Url'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Email = {ctor: 'Email'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Number = {ctor: 'Number'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Week = {ctor: 'Week'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Time = {ctor: 'Time'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Month = {ctor: 'Month'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Date = {ctor: 'Date'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$DatetimeLocal = {ctor: 'DatetimeLocal'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Password = {ctor: 'Password'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$Text = {ctor: 'Text'};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$defaultOptions = {
	tipe: _rundis$elm_bootstrap$Bootstrap_Form_Input$Text,
	id: _elm_lang$core$Maybe$Nothing,
	size: _elm_lang$core$Maybe$Nothing,
	disabled: false,
	value: _elm_lang$core$Maybe$Nothing,
	defaultValue: _elm_lang$core$Maybe$Nothing,
	placeholder: _elm_lang$core$Maybe$Nothing,
	onInput: _elm_lang$core$Maybe$Nothing,
	validation: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$toAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Form_Input$applyModifier, _rundis$elm_bootstrap$Bootstrap_Form_Input$defaultOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('form-control'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$disabled(options.disabled),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$typeAttribute(options.tipe),
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$id, options.id),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Maybe$andThen, _rundis$elm_bootstrap$Bootstrap_Form_Input$sizeAttribute, options.size),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$value, options.value),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$defaultValue, options.defaultValue),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$placeholder, options.placeholder),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Events$onInput, options.onInput),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$core$Maybe$map, _rundis$elm_bootstrap$Bootstrap_Form_Input$validationAttribute, options.validation),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}),
			options.attributes));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$view = function (_p2) {
	var _p3 = _p2;
	return A2(
		_elm_lang$html$Html$input,
		_rundis$elm_bootstrap$Bootstrap_Form_Input$toAttributes(_p3._0.options),
		{ctor: '[]'});
};
var _rundis$elm_bootstrap$Bootstrap_Form_Input$input = F2(
	function (tipe, options) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Input$view(
			A2(_rundis$elm_bootstrap$Bootstrap_Form_Input$create, tipe, options));
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Input$text = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Text);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$password = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Password);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$datetimeLocal = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$DatetimeLocal);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$date = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Date);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$month = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Month);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$time = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Time);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$week = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Week);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$number = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Number);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$email = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Email);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$url = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Url);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$search = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Search);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$tel = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Tel);
var _rundis$elm_bootstrap$Bootstrap_Form_Input$color = _rundis$elm_bootstrap$Bootstrap_Form_Input$input(_rundis$elm_bootstrap$Bootstrap_Form_Input$Color);

var _rundis$elm_bootstrap$Bootstrap_Modal$ifElse = F3(
	function (pred, $true, $false) {
		return pred ? $true : $false;
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$renderFooter = function (maybeFooter) {
	var _p0 = maybeFooter;
	if (_p0.ctor === 'Just') {
		var _p1 = _p0._0._0;
		return _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('modal-footer'),
					_1: _p1.attributes
				},
				_p1.children));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Modal$renderBody = function (maybeBody) {
	var _p2 = maybeBody;
	if (_p2.ctor === 'Just') {
		var _p3 = _p2._0._0;
		return _elm_lang$core$Maybe$Just(
			A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('modal-body'),
					_1: _p3.attributes
				},
				_p3.children));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Modal$modalClass = function (option) {
	var _p4 = option;
	var _p5 = _rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(_p4._0);
	if (_p5.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'modal-', _p5._0)));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Modal$modalAttributes = function (options) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('modal-dialog'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'auto'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Modal$modalClass, options)));
};
var _rundis$elm_bootstrap$Bootstrap_Modal$display = function (_p6) {
	var _p7 = _p6;
	var _p8 = _p7._0;
	return {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
					_1: {ctor: '[]'}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$ifElse,
					_p8,
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'},
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '0px'},
						_1: {ctor: '[]'}
					}))),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'modal', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'fade', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'show', _1: _p8},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$Item = F2(
	function (a, b) {
		return {attributes: a, children: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$Config = function (a) {
	return {ctor: 'Config', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$config = function (toMsg) {
	return _rundis$elm_bootstrap$Bootstrap_Modal$Config(
		{
			toMsg: toMsg,
			options: {ctor: '[]'},
			header: _elm_lang$core$Maybe$Nothing,
			body: _elm_lang$core$Maybe$Nothing,
			footer: _elm_lang$core$Maybe$Nothing
		});
};
var _rundis$elm_bootstrap$Bootstrap_Modal$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState = _rundis$elm_bootstrap$Bootstrap_Modal$State(false);
var _rundis$elm_bootstrap$Bootstrap_Modal$closeButton = function (toMsg) {
	return A2(
		_elm_lang$html$Html$button,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('close'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('x'),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Modal$renderHeader = F2(
	function (toMsg, maybeHeader) {
		var _p9 = maybeHeader;
		if (_p9.ctor === 'Just') {
			var _p10 = _p9._0._0;
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('modal-header'),
						_1: _p10.attributes
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p10.children,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Modal$closeButton(toMsg),
							_1: {ctor: '[]'}
						})));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$backdrop = F2(
	function (toMsg, _p11) {
		var _p12 = _p11;
		return _p12._0 ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('modal-backdrop fade show'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$view = F2(
	function (state, _p13) {
		var _p14 = _p13;
		var _p15 = _p14._0.toMsg;
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$tabindex(-1),
								_1: {ctor: '[]'}
							},
							_rundis$elm_bootstrap$Bootstrap_Modal$display(state)),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'document'),
									_1: _rundis$elm_bootstrap$Bootstrap_Modal$modalAttributes(_p14._0.options)
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('modal-content'),
											_1: {ctor: '[]'}
										},
										A2(
											_elm_lang$core$List$filterMap,
											_elm_lang$core$Basics$identity,
											{
												ctor: '::',
												_0: A2(_rundis$elm_bootstrap$Bootstrap_Modal$renderHeader, _p15, _p14._0.header),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Modal$renderBody(_p14._0.body),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Modal$renderFooter(_p14._0.footer),
														_1: {ctor: '[]'}
													}
												}
											})),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A2(_rundis$elm_bootstrap$Bootstrap_Modal$backdrop, _p15, state)));
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$visibleState = _rundis$elm_bootstrap$Bootstrap_Modal$State(true);
var _rundis$elm_bootstrap$Bootstrap_Modal$ModalSize = function (a) {
	return {ctor: 'ModalSize', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$small = function (_p16) {
	var _p17 = _p16;
	var _p18 = _p17._0;
	return _rundis$elm_bootstrap$Bootstrap_Modal$Config(
		_elm_lang$core$Native_Utils.update(
			_p18,
			{
				options: A2(
					_elm_lang$core$Basics_ops['++'],
					_p18.options,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Modal$ModalSize(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM),
						_1: {ctor: '[]'}
					})
			}));
};
var _rundis$elm_bootstrap$Bootstrap_Modal$large = function (_p19) {
	var _p20 = _p19;
	var _p21 = _p20._0;
	return _rundis$elm_bootstrap$Bootstrap_Modal$Config(
		_elm_lang$core$Native_Utils.update(
			_p21,
			{
				options: A2(
					_elm_lang$core$Basics_ops['++'],
					_p21.options,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Modal$ModalSize(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG),
						_1: {ctor: '[]'}
					})
			}));
};
var _rundis$elm_bootstrap$Bootstrap_Modal$Header = function (a) {
	return {ctor: 'Header', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$header = F3(
	function (attributes, children, _p22) {
		var _p23 = _p22;
		return _rundis$elm_bootstrap$Bootstrap_Modal$Config(
			_elm_lang$core$Native_Utils.update(
				_p23._0,
				{
					header: _elm_lang$core$Maybe$Just(
						_rundis$elm_bootstrap$Bootstrap_Modal$Header(
							{attributes: attributes, children: children}))
				}));
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader = F3(
	function (itemFn, attributes, children) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Modal$header,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					itemFn,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('modal-title'),
						_1: attributes
					},
					children),
				_1: {ctor: '[]'}
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$h1 = _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader(_elm_lang$html$Html$h1);
var _rundis$elm_bootstrap$Bootstrap_Modal$h2 = _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader(_elm_lang$html$Html$h2);
var _rundis$elm_bootstrap$Bootstrap_Modal$h3 = _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader(_elm_lang$html$Html$h3);
var _rundis$elm_bootstrap$Bootstrap_Modal$h4 = _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader(_elm_lang$html$Html$h4);
var _rundis$elm_bootstrap$Bootstrap_Modal$h5 = _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader(_elm_lang$html$Html$h5);
var _rundis$elm_bootstrap$Bootstrap_Modal$h6 = _rundis$elm_bootstrap$Bootstrap_Modal$titledHeader(_elm_lang$html$Html$h6);
var _rundis$elm_bootstrap$Bootstrap_Modal$Body = function (a) {
	return {ctor: 'Body', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$body = F3(
	function (attributes, children, _p24) {
		var _p25 = _p24;
		return _rundis$elm_bootstrap$Bootstrap_Modal$Config(
			_elm_lang$core$Native_Utils.update(
				_p25._0,
				{
					body: _elm_lang$core$Maybe$Just(
						_rundis$elm_bootstrap$Bootstrap_Modal$Body(
							{attributes: attributes, children: children}))
				}));
	});
var _rundis$elm_bootstrap$Bootstrap_Modal$Footer = function (a) {
	return {ctor: 'Footer', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Modal$footer = F3(
	function (attributes, children, _p26) {
		var _p27 = _p26;
		return _rundis$elm_bootstrap$Bootstrap_Modal$Config(
			_elm_lang$core$Native_Utils.update(
				_p27._0,
				{
					footer: _elm_lang$core$Maybe$Just(
						_rundis$elm_bootstrap$Bootstrap_Modal$Footer(
							{attributes: attributes, children: children}))
				}));
	});

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('Unable to parse \'' + str + '\' as a date. Dates must be in the ISO 8601 format.')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$PM = {ctor: 'PM'};
var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$AM = {ctor: 'AM'};
var _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod = function (d) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Date$hour(d),
		12) < 0) ? _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$AM : _rluiten$elm_date_extra$Date_Extra_TwelveHourClock$PM;
};

var _rluiten$elm_date_extra$Date_Extra_Config$Config = F2(
	function (a, b) {
		return {i18n: a, format: b};
	});

var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix = F2(
	function (pad, day) {
		var value = function () {
			var _p0 = day;
			switch (_p0) {
				case 1:
					return '1st';
				case 21:
					return '21st';
				case 2:
					return '2nd';
				case 22:
					return '22nd';
				case 3:
					return '3rd';
				case 23:
					return '23rd';
				case 31:
					return '31st';
				default:
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(day),
						'th');
			}
		}();
		return pad ? A3(
			_elm_lang$core$String$padLeft,
			4,
			_elm_lang$core$Native_Utils.chr(' '),
			value) : value;
	});
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort = function (month) {
	var _p2 = month;
	switch (_p2.ctor) {
		case 'Jan':
			return 'Jan';
		case 'Feb':
			return 'Feb';
		case 'Mar':
			return 'Mar';
		case 'Apr':
			return 'Apr';
		case 'May':
			return 'May';
		case 'Jun':
			return 'Jun';
		case 'Jul':
			return 'Jul';
		case 'Aug':
			return 'Aug';
		case 'Sep':
			return 'Sep';
		case 'Oct':
			return 'Oct';
		case 'Nov':
			return 'Nov';
		default:
			return 'Dec';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName = function (day) {
	var _p3 = day;
	switch (_p3.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort = function (day) {
	var _p4 = day;
	switch (_p4.ctor) {
		case 'Mon':
			return 'Mon';
		case 'Tue':
			return 'Tue';
		case 'Wed':
			return 'Wed';
		case 'Thu':
			return 'Thu';
		case 'Fri':
			return 'Fri';
		case 'Sat':
			return 'Sat';
		default:
			return 'Sun';
	}
};

var _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod = function (period) {
	var _p0 = period;
	if (_p0.ctor === 'AM') {
		return 'AM';
	} else {
		return 'PM';
	}
};

var _rluiten$elm_date_extra$Date_Extra_Config_Config_en_au$config = {
	i18n: {dayShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort, dayName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName, monthShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort, monthName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName, dayOfMonthWithSuffix: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix, twelveHourPeriod: _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod},
	format: {date: '%-d/%m/%Y', longDate: '%A, %-d %B %Y', time: '%-I:%M %p', longTime: '%-I:%M:%S %p', dateTime: '%-d/%m/%Y %-I:%M %p', firstDayOfWeek: _elm_lang$core$Date$Mon}
};

var _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config = {
	i18n: {dayShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayShort, dayName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayName, monthShort: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthShort, monthName: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$monthName, dayOfMonthWithSuffix: _rluiten$elm_date_extra$Date_Extra_I18n_I_en_us$dayOfMonthWithSuffix, twelveHourPeriod: _rluiten$elm_date_extra$Date_Extra_I18n_I_default$twelveHourPeriod},
	format: {date: '%-m/%-d/%Y', longDate: '%A, %B %d, %Y', time: '%-I:%M %p', longTime: '%-I:%M:%S %p', dateTime: '%-m/%-d/%Y %-I:%M %p', firstDayOfWeek: _elm_lang$core$Date$Sun}
};

var _rluiten$elm_date_extra$Date_Extra_Internal2$prevMonth = function (month) {
	var _p0 = month;
	switch (_p0.ctor) {
		case 'Jan':
			return _elm_lang$core$Date$Dec;
		case 'Feb':
			return _elm_lang$core$Date$Jan;
		case 'Mar':
			return _elm_lang$core$Date$Feb;
		case 'Apr':
			return _elm_lang$core$Date$Mar;
		case 'May':
			return _elm_lang$core$Date$Apr;
		case 'Jun':
			return _elm_lang$core$Date$May;
		case 'Jul':
			return _elm_lang$core$Date$Jun;
		case 'Aug':
			return _elm_lang$core$Date$Jul;
		case 'Sep':
			return _elm_lang$core$Date$Aug;
		case 'Oct':
			return _elm_lang$core$Date$Sep;
		case 'Nov':
			return _elm_lang$core$Date$Oct;
		default:
			return _elm_lang$core$Date$Nov;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$nextMonth = function (month) {
	var _p1 = month;
	switch (_p1.ctor) {
		case 'Jan':
			return _elm_lang$core$Date$Feb;
		case 'Feb':
			return _elm_lang$core$Date$Mar;
		case 'Mar':
			return _elm_lang$core$Date$Apr;
		case 'Apr':
			return _elm_lang$core$Date$May;
		case 'May':
			return _elm_lang$core$Date$Jun;
		case 'Jun':
			return _elm_lang$core$Date$Jul;
		case 'Jul':
			return _elm_lang$core$Date$Aug;
		case 'Aug':
			return _elm_lang$core$Date$Sep;
		case 'Sep':
			return _elm_lang$core$Date$Oct;
		case 'Oct':
			return _elm_lang$core$Date$Nov;
		case 'Nov':
			return _elm_lang$core$Date$Dec;
		default:
			return _elm_lang$core$Date$Jan;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$intToMonth = function (month) {
	return (_elm_lang$core$Native_Utils.cmp(month, 1) < 1) ? _elm_lang$core$Date$Jan : (_elm_lang$core$Native_Utils.eq(month, 2) ? _elm_lang$core$Date$Feb : (_elm_lang$core$Native_Utils.eq(month, 3) ? _elm_lang$core$Date$Mar : (_elm_lang$core$Native_Utils.eq(month, 4) ? _elm_lang$core$Date$Apr : (_elm_lang$core$Native_Utils.eq(month, 5) ? _elm_lang$core$Date$May : (_elm_lang$core$Native_Utils.eq(month, 6) ? _elm_lang$core$Date$Jun : (_elm_lang$core$Native_Utils.eq(month, 7) ? _elm_lang$core$Date$Jul : (_elm_lang$core$Native_Utils.eq(month, 8) ? _elm_lang$core$Date$Aug : (_elm_lang$core$Native_Utils.eq(month, 9) ? _elm_lang$core$Date$Sep : (_elm_lang$core$Native_Utils.eq(month, 10) ? _elm_lang$core$Date$Oct : (_elm_lang$core$Native_Utils.eq(month, 11) ? _elm_lang$core$Date$Nov : _elm_lang$core$Date$Dec))))))))));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt = function (month) {
	var _p2 = month;
	switch (_p2.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear = function (year) {
	return (_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 4),
		0) && (!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 100),
		0))) || _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 400),
		0);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYearDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(
		_elm_lang$core$Date$year(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$yearToDayLength = function (year) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(year) ? 366 : 365;
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth = F2(
	function (year, month) {
		var _p3 = month;
		switch (_p3.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$monthList = {
	ctor: '::',
	_0: _elm_lang$core$Date$Jan,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Feb,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Mar,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Apr,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$May,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Jun,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Jul,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Aug,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Sep,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$Oct,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Nov,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Date$Dec,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$toTime = function (_p4) {
	return _elm_lang$core$Basics$floor(
		_elm_lang$core$Date$toTime(_p4));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime = function (_p5) {
	return _elm_lang$core$Date$fromTime(
		_elm_lang$core$Basics$toFloat(_p5));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$prevDay = function (day) {
	var _p6 = day;
	switch (_p6.ctor) {
		case 'Mon':
			return _elm_lang$core$Date$Sun;
		case 'Tue':
			return _elm_lang$core$Date$Mon;
		case 'Wed':
			return _elm_lang$core$Date$Tue;
		case 'Thu':
			return _elm_lang$core$Date$Wed;
		case 'Fri':
			return _elm_lang$core$Date$Thu;
		case 'Sat':
			return _elm_lang$core$Date$Fri;
		default:
			return _elm_lang$core$Date$Sat;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$nextDay = function (day) {
	var _p7 = day;
	switch (_p7.ctor) {
		case 'Mon':
			return _elm_lang$core$Date$Tue;
		case 'Tue':
			return _elm_lang$core$Date$Wed;
		case 'Wed':
			return _elm_lang$core$Date$Thu;
		case 'Thu':
			return _elm_lang$core$Date$Fri;
		case 'Fri':
			return _elm_lang$core$Date$Sat;
		case 'Sat':
			return _elm_lang$core$Date$Sun;
		default:
			return _elm_lang$core$Date$Mon;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$isoDayOfWeek = function (day) {
	var _p8 = day;
	switch (_p8.ctor) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond = _elm_lang$core$Basics$floor(_elm_lang$core$Time$millisecond);
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond * 1000;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond * 60;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute * 60;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour * 24;
var _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay * 7;
var _rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks = function (date) {
	var dateTicks = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date);
	var day = _elm_lang$core$Date$day(date);
	var month = _elm_lang$core$Date$month(date);
	var year = _elm_lang$core$Date$year(date);
	var daysInMonthVal = A2(_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth, year, month);
	var addDays = daysInMonthVal - day;
	return dateTicks + (addDays * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks(date) + _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInNextMonth = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate(
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks = function (date) {
	var dateTicks = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date);
	var day = _elm_lang$core$Date$day(date);
	return dateTicks + ((1 - day) * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks(date) - _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay);
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$daysInPrevMonth = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate(
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal2$epochDateStr = '1970-01-01T00:00:00Z';

var _rluiten$elm_date_extra$Date_Extra_Period$diff = F2(
	function (date1, date2) {
		var millisecondDiff = _elm_lang$core$Date$millisecond(date1) - _elm_lang$core$Date$millisecond(date2);
		var secondDiff = _elm_lang$core$Date$second(date1) - _elm_lang$core$Date$second(date2);
		var minuteDiff = _elm_lang$core$Date$minute(date1) - _elm_lang$core$Date$minute(date2);
		var hourDiff = _elm_lang$core$Date$hour(date1) - _elm_lang$core$Date$hour(date2);
		var ticksDiff = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date1) - _rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date2);
		var ticksDayDiff = (((ticksDiff - (hourDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour)) - (minuteDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute)) - (secondDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond)) - (millisecondDiff * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond);
		var onlyDaysDiff = (ticksDayDiff / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay) | 0;
		var _p0 = function () {
			if (_elm_lang$core$Native_Utils.cmp(onlyDaysDiff, 0) < 0) {
				var absDayDiff = _elm_lang$core$Basics$abs(onlyDaysDiff);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Basics$negate((absDayDiff / 7) | 0),
					_1: _elm_lang$core$Basics$negate(
						A2(_elm_lang$core$Basics_ops['%'], absDayDiff, 7))
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: (onlyDaysDiff / 7) | 0,
					_1: A2(_elm_lang$core$Basics_ops['%'], onlyDaysDiff, 7)
				};
			}
		}();
		var weekDiff = _p0._0;
		var dayDiff = _p0._1;
		return {week: weekDiff, day: dayDiff, hour: hourDiff, minute: minuteDiff, second: secondDiff, millisecond: millisecondDiff};
	});
var _rluiten$elm_date_extra$Date_Extra_Period$addTimeUnit = F3(
	function (unit, addend, date) {
		return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				addend * unit,
				_rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date)));
	});
var _rluiten$elm_date_extra$Date_Extra_Period$toTicks = function (period) {
	var _p1 = period;
	switch (_p1.ctor) {
		case 'Millisecond':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond;
		case 'Second':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond;
		case 'Minute':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute;
		case 'Hour':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour;
		case 'Day':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay;
		case 'Week':
			return _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek;
		default:
			var _p2 = _p1._0;
			return (((((_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond * _p2.millisecond) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond * _p2.second)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute * _p2.minute)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour * _p2.hour)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay * _p2.day)) + (_rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek * _p2.week);
	}
};
var _rluiten$elm_date_extra$Date_Extra_Period$add = function (period) {
	return _rluiten$elm_date_extra$Date_Extra_Period$addTimeUnit(
		_rluiten$elm_date_extra$Date_Extra_Period$toTicks(period));
};
var _rluiten$elm_date_extra$Date_Extra_Period$zeroDelta = {week: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0};
var _rluiten$elm_date_extra$Date_Extra_Period$DeltaRecord = F6(
	function (a, b, c, d, e, f) {
		return {week: a, day: b, hour: c, minute: d, second: e, millisecond: f};
	});
var _rluiten$elm_date_extra$Date_Extra_Period$Delta = function (a) {
	return {ctor: 'Delta', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Period$Week = {ctor: 'Week'};
var _rluiten$elm_date_extra$Date_Extra_Period$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_Period$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_Period$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_Period$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_Period$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_TypeAlias$TimeFromFields = F4(
	function (a, b, c, d) {
		return {hour: a, minute: b, second: c, millisecond: d};
	});
var _rluiten$elm_date_extra$Date_Extra_TypeAlias$DateFromFields = F7(
	function (a, b, c, d, e, f, g) {
		return {year: a, month: b, day: c, hour: d, minute: e, second: f, millisecond: g};
	});

var _rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil = F3(
	function (year, month, day) {
		var doy = (((((153 * (month + ((_elm_lang$core$Native_Utils.cmp(month, 2) > 0) ? -3 : 9))) + 2) / 5) | 0) + day) - 1;
		var y = year - ((_elm_lang$core$Native_Utils.cmp(month, 2) < 1) ? 1 : 0);
		var era = (((_elm_lang$core$Native_Utils.cmp(y, 0) > -1) ? y : (y - 399)) / 400) | 0;
		var yoe = y - (era * 400);
		var doe = (((yoe * 365) + ((yoe / 4) | 0)) - ((yoe / 100) | 0)) + doy;
		return ((era * 146097) + doe) - 719468;
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields = F7(
	function (year, month, day, hour, minute, second, millisecond) {
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt(month);
		var clampYear = (_elm_lang$core$Native_Utils.cmp(year, 0) < 0) ? 0 : year;
		var clampDay = A3(
			_elm_lang$core$Basics$clamp,
			1,
			A2(_rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth, clampYear, month),
			day);
		var dayCount = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, clampYear, monthInt, clampDay);
		return _rluiten$elm_date_extra$Date_Extra_Period$toTicks(
			_rluiten$elm_date_extra$Date_Extra_Period$Delta(
				{
					millisecond: A3(_elm_lang$core$Basics$clamp, 0, 999, millisecond),
					second: A3(_elm_lang$core$Basics$clamp, 0, 59, second),
					minute: A3(_elm_lang$core$Basics$clamp, 0, 59, minute),
					hour: A3(_elm_lang$core$Basics$clamp, 0, 23, hour),
					day: dayCount,
					week: 0
				}));
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromDateFields = function (date) {
	return A7(
		_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date),
		_elm_lang$core$Date$day(date),
		_elm_lang$core$Date$hour(date),
		_elm_lang$core$Date$minute(date),
		_elm_lang$core$Date$second(date),
		_elm_lang$core$Date$millisecond(date));
};
var _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset = function (date) {
	var v1Ticks = _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromDateFields(date);
	var dateTicks = _elm_lang$core$Basics$floor(
		_elm_lang$core$Date$toTime(date));
	return ((dateTicks - v1Ticks) / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute) | 0;
};
var _rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFieldsRecord = function (_p0) {
	var _p1 = _p0;
	return A7(_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields, _p1.year, _p1.month, _p1.day, _p1.hour, _p1.minute, _p1.second, _p1.millisecond);
};
var _rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset = F2(
	function (offsetMinutes, date) {
		return _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			A2(
				F2(
					function (x, y) {
						return x + y;
					}),
				offsetMinutes * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute,
				_rluiten$elm_date_extra$Date_Extra_Internal2$toTime(date)));
	});
var _rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsUtc = function (date) {
	var offset = _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date);
	var oHours = (offset / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour) | 0;
	var oMinutes = ((offset - (oHours * _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour)) / _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute) | 0;
	return A2(_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset, offset, date);
};

var _rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset = F2(
	function (date1, date2) {
		return A3(
			_rluiten$elm_date_extra$Date_Extra_Period$add,
			_rluiten$elm_date_extra$Date_Extra_Period$Minute,
			_rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date2) - _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset(date1),
			date2);
	});
var _rluiten$elm_date_extra$Date_Extra_Core$lastOfMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfMonthTicks(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Core$toFirstOfMonth = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$fromTime(
			_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfMonthTicks(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Core$lastOfPrevMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$lastOfPrevMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Core$firstOfNextMonthDate = function (date) {
	return A2(
		_rluiten$elm_date_extra$Date_Extra_Core$compensateZoneOffset,
		date,
		_rluiten$elm_date_extra$Date_Extra_Internal2$firstOfNextMonthDate(date));
};
var _rluiten$elm_date_extra$Date_Extra_Core$yearToDayLength = _rluiten$elm_date_extra$Date_Extra_Internal2$yearToDayLength;
var _rluiten$elm_date_extra$Date_Extra_Core$toTime = _rluiten$elm_date_extra$Date_Extra_Internal2$toTime;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAWeek;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksASecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksASecond;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMinute;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAMillisecond = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAMillisecond;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksADay = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksADay;
var _rluiten$elm_date_extra$Date_Extra_Core$ticksAnHour = _rluiten$elm_date_extra$Date_Extra_Internal2$ticksAnHour;
var _rluiten$elm_date_extra$Date_Extra_Core$prevMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$prevMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$prevDay = _rluiten$elm_date_extra$Date_Extra_Internal2$prevDay;
var _rluiten$elm_date_extra$Date_Extra_Core$nextMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$nextMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$nextDay = _rluiten$elm_date_extra$Date_Extra_Internal2$nextDay;
var _rluiten$elm_date_extra$Date_Extra_Core$monthToInt = _rluiten$elm_date_extra$Date_Extra_Internal2$monthToInt;
var _rluiten$elm_date_extra$Date_Extra_Core$monthList = _rluiten$elm_date_extra$Date_Extra_Internal2$monthList;
var _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek = _rluiten$elm_date_extra$Date_Extra_Internal2$isoDayOfWeek;
var _rluiten$elm_date_extra$Date_Extra_Core$daysBackToStartOfWeek = F2(
	function (dateDay, startOfWeekDay) {
		var startOfWeekDayIndex = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(startOfWeekDay);
		var dateDayIndex = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(dateDay);
		return (_elm_lang$core$Native_Utils.cmp(dateDayIndex, startOfWeekDayIndex) < 0) ? ((7 + dateDayIndex) - startOfWeekDayIndex) : (dateDayIndex - startOfWeekDayIndex);
	});
var _rluiten$elm_date_extra$Date_Extra_Core$isLeapYearDate = _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYearDate;
var _rluiten$elm_date_extra$Date_Extra_Core$isLeapYear = _rluiten$elm_date_extra$Date_Extra_Internal2$isLeapYear;
var _rluiten$elm_date_extra$Date_Extra_Core$intToMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$intToMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$fromTime = _rluiten$elm_date_extra$Date_Extra_Internal2$fromTime;
var _rluiten$elm_date_extra$Date_Extra_Core$epochDateStr = _rluiten$elm_date_extra$Date_Extra_Internal2$epochDateStr;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonthDate;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInPrevMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInPrevMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInNextMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInNextMonth;
var _rluiten$elm_date_extra$Date_Extra_Core$daysInMonth = _rluiten$elm_date_extra$Date_Extra_Internal2$daysInMonth;

var _rluiten$elm_date_extra$Date_Extra_Create$epochDate = _elm_lang$core$Date$fromTime(0);
var _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset = function () {
	var inMinutes = (_elm_lang$core$Date$hour(_rluiten$elm_date_extra$Date_Extra_Create$epochDate) * 60) + _elm_lang$core$Date$minute(_rluiten$elm_date_extra$Date_Extra_Create$epochDate);
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Date$year(_rluiten$elm_date_extra$Date_Extra_Create$epochDate),
		1969) ? (0 - (inMinutes - (24 * 60))) : (0 - inMinutes);
}();
var _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset = _rluiten$elm_date_extra$Date_Extra_Internal$getTimezoneOffset;
var _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate = function (ticks) {
	var date = A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, ticks + (_rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset * _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute), _rluiten$elm_date_extra$Date_Extra_Create$epochDate);
	var dateOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date);
	return _elm_lang$core$Native_Utils.eq(dateOffset, _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset) ? date : A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Minute, dateOffset - _rluiten$elm_date_extra$Date_Extra_Create$epochTimezoneOffset, date);
};
var _rluiten$elm_date_extra$Date_Extra_Create$dateFromFields = F7(
	function (year, month, day, hour, minute, second, millisecond) {
		return _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate(
			A7(_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFields, year, month, day, hour, minute, second, millisecond));
	});
var _rluiten$elm_date_extra$Date_Extra_Create$timeFromFields = A3(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, 1970, _elm_lang$core$Date$Jan, 1);
var _rluiten$elm_date_extra$Date_Extra_Create$timeFromFieldsRecord = function (_p0) {
	var _p1 = _p0;
	return A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, 1970, _elm_lang$core$Date$Jan, 1, _p1.hour, _p1.minute, _p1.second, _p1.millisecond);
};
var _rluiten$elm_date_extra$Date_Extra_Create$dateFromFieldsRecord = function (_p2) {
	return _rluiten$elm_date_extra$Date_Extra_Create$adjustedTicksToDate(
		_rluiten$elm_date_extra$Date_Extra_Internal$ticksFromFieldsRecord(_p2));
};

var _rluiten$elm_date_extra$Date_Extra_Compare$is3 = F4(
	function (comp, date1, date2, date3) {
		var time3 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date3);
		var time2 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date2);
		var highBound = A2(_elm_lang$core$Basics$max, time2, time3);
		var lowBound = A2(_elm_lang$core$Basics$min, time2, time3);
		var time1 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date1);
		var _p0 = comp;
		switch (_p0.ctor) {
			case 'Between':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > 0) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 0);
			case 'BetweenOpenStart':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > -1) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 0);
			case 'BetweenOpenEnd':
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > 0) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 1);
			default:
				return (_elm_lang$core$Native_Utils.cmp(time1, lowBound) > -1) && (_elm_lang$core$Native_Utils.cmp(time1, highBound) < 1);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Compare$is = F3(
	function (comp, date1, date2) {
		var time2 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date2);
		var time1 = _rluiten$elm_date_extra$Date_Extra_Core$toTime(date1);
		var _p1 = comp;
		switch (_p1.ctor) {
			case 'Before':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) < 0;
			case 'After':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) > 0;
			case 'Same':
				return _elm_lang$core$Native_Utils.eq(time1, time2);
			case 'SameOrBefore':
				return _elm_lang$core$Native_Utils.cmp(time1, time2) < 1;
			default:
				return _elm_lang$core$Native_Utils.cmp(time1, time2) > -1;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Compare$SameOrBefore = {ctor: 'SameOrBefore'};
var _rluiten$elm_date_extra$Date_Extra_Compare$SameOrAfter = {ctor: 'SameOrAfter'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Same = {ctor: 'Same'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Before = {ctor: 'Before'};
var _rluiten$elm_date_extra$Date_Extra_Compare$After = {ctor: 'After'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpen = {ctor: 'BetweenOpen'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenEnd = {ctor: 'BetweenOpenEnd'};
var _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenStart = {ctor: 'BetweenOpenStart'};
var _rluiten$elm_date_extra$Date_Extra_Compare$Between = {ctor: 'Between'};

var _rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays = F3(
	function (date1, date2, multiplier) {
		var date2DaysFromCivil = A3(
			_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil,
			_elm_lang$core$Date$year(date2),
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date2)),
			_elm_lang$core$Date$day(date2));
		var date1DaysFromCivil = A3(
			_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil,
			_elm_lang$core$Date$year(date1),
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date1)),
			_elm_lang$core$Date$day(date1));
		return (date1DaysFromCivil - date2DaysFromCivil) * multiplier;
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$diffDays = F2(
	function (date1, date2) {
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, date1, date2) ? A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays, date1, date2, 1) : A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiffDays, date2, date1, -1);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff = F3(
	function (date1, date2, multiplier) {
		var propogateCarry = F3(
			function (current, carry, maxVal) {
				var adjusted = current + carry;
				return (_elm_lang$core$Native_Utils.cmp(adjusted, 0) < 0) ? {ctor: '_Tuple2', _0: maxVal + adjusted, _1: -1} : {ctor: '_Tuple2', _0: adjusted, _1: 0};
			});
		var accumulatedDiff = F4(
			function (acc, v1, v2, maxV2) {
				return (_elm_lang$core$Native_Utils.cmp(v1, v2) < 0) ? {ctor: '_Tuple2', _0: acc - 1, _1: (maxV2 + v1) - v2} : {ctor: '_Tuple2', _0: acc, _1: v1 - v2};
			});
		var msec2 = _elm_lang$core$Date$millisecond(date2);
		var msec1 = _elm_lang$core$Date$millisecond(date1);
		var second2 = _elm_lang$core$Date$second(date2);
		var second1 = _elm_lang$core$Date$second(date1);
		var minute2 = _elm_lang$core$Date$minute(date2);
		var minute1 = _elm_lang$core$Date$minute(date1);
		var hour2 = _elm_lang$core$Date$hour(date2);
		var hour1 = _elm_lang$core$Date$hour(date1);
		var day2 = _elm_lang$core$Date$day(date2);
		var day1 = _elm_lang$core$Date$day(date1);
		var month2Mon = _elm_lang$core$Date$month(date2);
		var month2 = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month2Mon);
		var month1Mon = _elm_lang$core$Date$month(date1);
		var month1 = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month1Mon);
		var year2 = _elm_lang$core$Date$year(date2);
		var daysInDate2Month = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth, year2, month2Mon);
		var year1 = _elm_lang$core$Date$year(date1);
		var daysInDate1Month = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth, year1, month1Mon);
		var _p0 = A4(accumulatedDiff, year1 - year2, month1, month2, 12);
		var yearDiff = _p0._0;
		var monthDiffA = _p0._1;
		var _p1 = A4(accumulatedDiff, monthDiffA, day1, day2, daysInDate2Month);
		var monthDiff = _p1._0;
		var dayDiffA = _p1._1;
		var _p2 = A4(accumulatedDiff, dayDiffA, hour1, hour2, 24);
		var dayDiff = _p2._0;
		var hourDiffA = _p2._1;
		var _p3 = A4(accumulatedDiff, hourDiffA, minute1, minute2, 60);
		var hourDiff = _p3._0;
		var minuteDiffA = _p3._1;
		var _p4 = A4(accumulatedDiff, minuteDiffA, second1, second2, 60);
		var minuteDiff = _p4._0;
		var secondDiffA = _p4._1;
		var _p5 = A4(accumulatedDiff, secondDiffA, msec1, msec2, 1000);
		var secondDiff = _p5._0;
		var msecDiff = _p5._1;
		var _p6 = A3(propogateCarry, msecDiff, 0, 1000);
		var msecX = _p6._0;
		var secondCarry = _p6._1;
		var _p7 = A3(propogateCarry, secondDiff, secondCarry, 60);
		var secondX = _p7._0;
		var minuteCarry = _p7._1;
		var _p8 = A3(propogateCarry, minuteDiff, minuteCarry, 60);
		var minuteX = _p8._0;
		var hourCarry = _p8._1;
		var _p9 = A3(propogateCarry, hourDiff, hourCarry, 60);
		var hourX = _p9._0;
		var dayCarry = _p9._1;
		var _p10 = A3(propogateCarry, dayDiff, dayCarry, daysInDate1Month);
		var dayX = _p10._0;
		var monthCarry = _p10._1;
		var _p11 = A3(propogateCarry, monthDiff, monthCarry, 12);
		var monthX = _p11._0;
		var yearCarry = _p11._1;
		var _p12 = A3(propogateCarry, yearDiff, yearCarry, 0);
		var yearX = _p12._0;
		return {year: yearX * multiplier, month: monthX * multiplier, day: dayX * multiplier, hour: hourX * multiplier, minute: minuteX * multiplier, second: secondX * multiplier, millisecond: msecX * multiplier};
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$diff = F2(
	function (date1, date2) {
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, date1, date2) ? A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff, date1, date2, 1) : A3(_rluiten$elm_date_extra$Date_Extra_Duration$positiveDiff, date2, date1, -1);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$addMonth = F2(
	function (monthCount, date) {
		var day = _elm_lang$core$Date$day(date);
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
			_elm_lang$core$Date$month(date));
		var newMonthInt = monthInt + monthCount;
		var targetMonthInt = A2(_elm_lang$core$Basics_ops['%'], newMonthInt, 12);
		var yearOffset = ((_elm_lang$core$Native_Utils.cmp(newMonthInt, 0) < 0) && (!_elm_lang$core$Native_Utils.eq(targetMonthInt, 0))) ? (((newMonthInt / 12) | 0) - 1) : ((newMonthInt / 12) | 0);
		var year = _elm_lang$core$Date$year(date);
		var inputCivil = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, year, monthInt, day);
		var newYear = year + yearOffset;
		var newDay = A2(
			_elm_lang$core$Basics$min,
			A2(
				_rluiten$elm_date_extra$Date_Extra_Core$daysInMonth,
				newYear,
				_rluiten$elm_date_extra$Date_Extra_Core$intToMonth(newMonthInt)),
			day);
		var newCivil = A3(_rluiten$elm_date_extra$Date_Extra_Internal$daysFromCivil, newYear, targetMonthInt, newDay);
		var daysDifferent = newCivil - inputCivil;
		return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Day, daysDifferent, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$addYear = F2(
	function (yearCount, date) {
		return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addMonth, 12 * yearCount, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$daylightOffsetCompensate = F2(
	function (dateBefore, dateAfter) {
		var offsetAfter = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(dateAfter);
		var offsetBefore = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(dateBefore);
		if (!_elm_lang$core$Native_Utils.eq(offsetBefore, offsetAfter)) {
			var adjustedDate = A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, (offsetAfter - offsetBefore) * _rluiten$elm_date_extra$Date_Extra_Core$ticksAMinute, dateAfter);
			var adjustedOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(adjustedDate);
			return (!_elm_lang$core$Native_Utils.eq(adjustedOffset, offsetAfter)) ? dateAfter : adjustedDate;
		} else {
			return dateAfter;
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$requireDaylightCompensateInAdd = function (duration) {
	var _p13 = duration;
	switch (_p13.ctor) {
		case 'Millisecond':
			return false;
		case 'Second':
			return false;
		case 'Minute':
			return false;
		case 'Hour':
			return false;
		case 'Day':
			return true;
		case 'Week':
			return true;
		case 'Month':
			return true;
		case 'Year':
			return true;
		default:
			var _p14 = _p13._0;
			return (!_elm_lang$core$Native_Utils.eq(_p14.day, 0)) || ((!_elm_lang$core$Native_Utils.eq(_p14.month, 0)) || (!_elm_lang$core$Native_Utils.eq(_p14.year, 0)));
	}
};
var _rluiten$elm_date_extra$Date_Extra_Duration$zeroDelta = {year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0};
var _rluiten$elm_date_extra$Date_Extra_Duration$DeltaRecord = F7(
	function (a, b, c, d, e, f, g) {
		return {year: a, month: b, day: c, hour: d, minute: e, second: f, millisecond: g};
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$Delta = function (a) {
	return {ctor: 'Delta', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Duration$Year = {ctor: 'Year'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Month = {ctor: 'Month'};
var _rluiten$elm_date_extra$Date_Extra_Duration$doAdd = F3(
	function (duration, addend, date) {
		var _p15 = duration;
		switch (_p15.ctor) {
			case 'Millisecond':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Millisecond, addend, date);
			case 'Second':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Second, addend, date);
			case 'Minute':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Minute, addend, date);
			case 'Hour':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Hour, addend, date);
			case 'Day':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Day, addend, date);
			case 'Week':
				return A3(_rluiten$elm_date_extra$Date_Extra_Period$add, _rluiten$elm_date_extra$Date_Extra_Period$Week, addend, date);
			case 'Month':
				return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addMonth, addend, date);
			case 'Year':
				return A2(_rluiten$elm_date_extra$Date_Extra_Duration$addYear, addend, date);
			default:
				var _p16 = _p15._0;
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Period$add,
					_rluiten$elm_date_extra$Date_Extra_Period$Delta(
						{week: 0, day: _p16.day, hour: _p16.hour, minute: _p16.minute, second: _p16.second, millisecond: _p16.millisecond}),
					addend,
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$doAdd,
						_rluiten$elm_date_extra$Date_Extra_Duration$Month,
						_p16.month,
						A3(_rluiten$elm_date_extra$Date_Extra_Duration$doAdd, _rluiten$elm_date_extra$Date_Extra_Duration$Year, _p16.year, date)));
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$add = F3(
	function (duration, addend, date) {
		var outputDate = A3(_rluiten$elm_date_extra$Date_Extra_Duration$doAdd, duration, addend, date);
		return _rluiten$elm_date_extra$Date_Extra_Duration$requireDaylightCompensateInAdd(duration) ? A2(_rluiten$elm_date_extra$Date_Extra_Duration$daylightOffsetCompensate, date, outputDate) : outputDate;
	});
var _rluiten$elm_date_extra$Date_Extra_Duration$Week = {ctor: 'Week'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_Duration$Millisecond = {ctor: 'Millisecond'};

var _rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate = F3(
	function (newDayOfWeek, startOfWeekDay, date) {
		var targetIsoDay = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(newDayOfWeek);
		var dayOfWeek = _elm_lang$core$Date$dayOfWeek(date);
		var daysToStartOfWeek = A2(_rluiten$elm_date_extra$Date_Extra_Core$daysBackToStartOfWeek, dayOfWeek, startOfWeekDay);
		var isoDay = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(dayOfWeek);
		var dayDiff = targetIsoDay - isoDay;
		var adjustedDiff = (_elm_lang$core$Native_Utils.cmp(daysToStartOfWeek + dayDiff, 0) < 0) ? (dayDiff + 7) : dayDiff;
		return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, adjustedDiff, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Field$monthToDate = F2(
	function (month, date) {
		var monthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
			_elm_lang$core$Date$month(date));
		var targetMonthInt = _rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month);
		return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Month, targetMonthInt - monthInt, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp = F2(
	function (field, date) {
		var _p0 = field;
		switch (_p0.ctor) {
			case 'Millisecond':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Millisecond,
					A3(_elm_lang$core$Basics$clamp, 0, 999, _p0._0) - _elm_lang$core$Date$millisecond(date),
					date);
			case 'Second':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Second,
					A3(_elm_lang$core$Basics$clamp, 0, 59, _p0._0) - _elm_lang$core$Date$second(date),
					date);
			case 'Minute':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Minute,
					A3(_elm_lang$core$Basics$clamp, 0, 59, _p0._0) - _elm_lang$core$Date$minute(date),
					date);
			case 'Hour':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Hour,
					A3(_elm_lang$core$Basics$clamp, 0, 23, _p0._0) - _elm_lang$core$Date$hour(date),
					date);
			case 'DayOfWeek':
				return A3(_rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate, _p0._0._0, _p0._0._1, date);
			case 'DayOfMonth':
				var maxDays = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(date);
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Day,
					A3(_elm_lang$core$Basics$clamp, 1, maxDays, _p0._0) - _elm_lang$core$Date$day(date),
					date);
			case 'Month':
				return A2(_rluiten$elm_date_extra$Date_Extra_Field$monthToDate, _p0._0, date);
			default:
				var _p1 = _p0._0;
				var minYear = (_elm_lang$core$Native_Utils.cmp(_p1, 0) < 0) ? 0 : _p1;
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Duration$add,
					_rluiten$elm_date_extra$Date_Extra_Duration$Year,
					minYear - _elm_lang$core$Date$year(date),
					date);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Field$fieldToDate = F2(
	function (field, date) {
		var _p2 = field;
		switch (_p2.ctor) {
			case 'Millisecond':
				var _p3 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p3, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p3, 999) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Millisecond,
						_p3 - _elm_lang$core$Date$millisecond(date),
						date));
			case 'Second':
				var _p4 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p4, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p4, 59) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Second,
						_p4 - _elm_lang$core$Date$second(date),
						date));
			case 'Minute':
				var _p5 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p5, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p5, 59) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Minute,
						_p5 - _elm_lang$core$Date$minute(date),
						date));
			case 'Hour':
				var _p6 = _p2._0;
				return ((_elm_lang$core$Native_Utils.cmp(_p6, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(_p6, 23) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Hour,
						_p6 - _elm_lang$core$Date$hour(date),
						date));
			case 'DayOfWeek':
				return _elm_lang$core$Maybe$Just(
					A3(_rluiten$elm_date_extra$Date_Extra_Field$dayOfWeekToDate, _p2._0._0, _p2._0._1, date));
			case 'DayOfMonth':
				var _p7 = _p2._0;
				var maxDays = _rluiten$elm_date_extra$Date_Extra_Core$daysInMonthDate(date);
				return ((_elm_lang$core$Native_Utils.cmp(_p7, 1) < 0) || (_elm_lang$core$Native_Utils.cmp(_p7, maxDays) > 0)) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Day,
						_p7 - _elm_lang$core$Date$day(date),
						date));
			case 'Month':
				return _elm_lang$core$Maybe$Just(
					A2(_rluiten$elm_date_extra$Date_Extra_Field$monthToDate, _p2._0, date));
			default:
				var _p8 = _p2._0;
				return (_elm_lang$core$Native_Utils.cmp(_p8, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					A3(
						_rluiten$elm_date_extra$Date_Extra_Duration$add,
						_rluiten$elm_date_extra$Date_Extra_Duration$Year,
						_p8 - _elm_lang$core$Date$year(date),
						date));
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Field$Year = function (a) {
	return {ctor: 'Year', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Month = function (a) {
	return {ctor: 'Month', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth = function (a) {
	return {ctor: 'DayOfMonth', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$DayOfWeek = function (a) {
	return {ctor: 'DayOfWeek', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Hour = function (a) {
	return {ctor: 'Hour', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Minute = function (a) {
	return {ctor: 'Minute', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Second = function (a) {
	return {ctor: 'Second', _0: a};
};
var _rluiten$elm_date_extra$Date_Extra_Field$Millisecond = function (a) {
	return {ctor: 'Millisecond', _0: a};
};

var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Year = {ctor: 'Year'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Month = {ctor: 'Month'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day = {ctor: 'Day'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour = {ctor: 'Hour'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute = {ctor: 'Minute'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second = {ctor: 'Second'};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime = F2(
	function (unit, date) {
		var _p0 = unit;
		switch (_p0.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Millisecond(0),
					date);
			case 'Minute':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Second(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second, date));
			case 'Hour':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Minute(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute, date));
			case 'Day':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Hour(0),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour, date));
			case 'Month':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(1),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day, date));
			default:
				return _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTimeYear(date);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTimeYear = function (date) {
	var startMonthDate = A2(
		_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
		_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(1),
		date);
	var startYearDate = A2(
		_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
		_rluiten$elm_date_extra$Date_Extra_Field$Month(_elm_lang$core$Date$Jan),
		startMonthDate);
	var monthTicks = _rluiten$elm_date_extra$Date_Extra_Core$toTime(startMonthDate) - _rluiten$elm_date_extra$Date_Extra_Core$toTime(startYearDate);
	var updatedDate = _rluiten$elm_date_extra$Date_Extra_Core$fromTime(
		_rluiten$elm_date_extra$Date_Extra_Core$toTime(date) - monthTicks);
	return A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Month, updatedDate);
};
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime = F2(
	function (unit, date) {
		var _p1 = unit;
		switch (_p1.ctor) {
			case 'Millisecond':
				return date;
			case 'Second':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Millisecond(999),
					date);
			case 'Minute':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Second(59),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Second, date));
			case 'Hour':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Minute(59),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Minute, date));
			case 'Day':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$Hour(23),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Hour, date));
			case 'Month':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Field$fieldToDateClamp,
					_rluiten$elm_date_extra$Date_Extra_Field$DayOfMonth(31),
					A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$endOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Day, date));
			default:
				var extraYear = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Year, 1, date);
				var startYear = A2(_rluiten$elm_date_extra$Date_Extra_TimeUnit$startOfTime, _rluiten$elm_date_extra$Date_Extra_TimeUnit$Year, extraYear);
				return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Millisecond, -1, startYear);
		}
	});
var _rluiten$elm_date_extra$Date_Extra_TimeUnit$Millisecond = {ctor: 'Millisecond'};

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _rluiten$elm_date_extra$Date_Extra_Utils$unsafeFromString = function (dateStr) {
	var _p0 = _elm_lang$core$Date$fromString(dateStr);
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Date.Extra.Utils',
			{
				start: {line: 146, column: 5},
				end: {line: 151, column: 43}
			},
			_p0)('unsafeFromString');
	}
};
var _rluiten$elm_date_extra$Date_Extra_Utils$isoDayofWeekMonday = _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(_elm_lang$core$Date$Mon);
var _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne = function (year) {
	var dateJan4 = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, year, _elm_lang$core$Date$Jan, 4, 0, 0, 0, 0);
	return A3(
		_rluiten$elm_date_extra$Date_Extra_Duration$add,
		_rluiten$elm_date_extra$Date_Extra_Duration$Day,
		_rluiten$elm_date_extra$Date_Extra_Utils$isoDayofWeekMonday - _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(
			_elm_lang$core$Date$dayOfWeek(dateJan4)),
		dateJan4);
};
var _rluiten$elm_date_extra$Date_Extra_Utils$getYearIsoWeekDate = function (date) {
	var inputYear = _elm_lang$core$Date$year(date);
	var maxIsoWeekDateInYear = A7(_rluiten$elm_date_extra$Date_Extra_Create$dateFromFields, inputYear, _elm_lang$core$Date$Dec, 29, 0, 0, 0, 0);
	if (A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$SameOrAfter, date, maxIsoWeekDateInYear)) {
		var nextYearIsoWeek1Date = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear + 1);
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, date, nextYearIsoWeek1Date) ? {
			ctor: '_Tuple2',
			_0: inputYear,
			_1: _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear)
		} : {ctor: '_Tuple2', _0: inputYear + 1, _1: nextYearIsoWeek1Date};
	} else {
		var thisYearIsoWeek1Date = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear);
		return A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, date, thisYearIsoWeek1Date) ? {
			ctor: '_Tuple2',
			_0: inputYear - 1,
			_1: _rluiten$elm_date_extra$Date_Extra_Utils$isoWeekOne(inputYear - 1)
		} : {ctor: '_Tuple2', _0: inputYear, _1: thisYearIsoWeek1Date};
	}
};
var _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek = function (date) {
	var _p2 = _rluiten$elm_date_extra$Date_Extra_Utils$getYearIsoWeekDate(date);
	var year = _p2._0;
	var isoWeek1Date = _p2._1;
	var daysSinceIsoWeek1 = A2(_rluiten$elm_date_extra$Date_Extra_Duration$diffDays, date, isoWeek1Date);
	return {
		ctor: '_Tuple3',
		_0: year,
		_1: ((daysSinceIsoWeek1 / 7) | 0) + 1,
		_2: _rluiten$elm_date_extra$Date_Extra_Core$isoDayOfWeek(
			_elm_lang$core$Date$dayOfWeek(date))
	};
};
var _rluiten$elm_date_extra$Date_Extra_Utils$dayList_ = F3(
	function (dayCount, date, list) {
		dayList_:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(dayCount, 0)) {
				return list;
			} else {
				if (_elm_lang$core$Native_Utils.cmp(dayCount, 0) > 0) {
					var _v1 = dayCount - 1,
						_v2 = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, 1, date),
						_v3 = {ctor: '::', _0: date, _1: list};
					dayCount = _v1;
					date = _v2;
					list = _v3;
					continue dayList_;
				} else {
					var _v4 = dayCount + 1,
						_v5 = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, -1, date),
						_v6 = {ctor: '::', _0: date, _1: list};
					dayCount = _v4;
					date = _v5;
					list = _v6;
					continue dayList_;
				}
			}
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Utils$dayList = F2(
	function (dayCount, startDate) {
		return _elm_lang$core$List$reverse(
			A3(
				_rluiten$elm_date_extra$Date_Extra_Utils$dayList_,
				dayCount,
				startDate,
				{ctor: '[]'}));
	});

var _rluiten$elm_date_extra$Date_Extra_Format$toHourMin = function (offsetMinutes) {
	return {
		ctor: '_Tuple2',
		_0: (offsetMinutes / 60) | 0,
		_1: A2(_elm_lang$core$Basics_ops['%'], offsetMinutes, 60)
	};
};
var _rluiten$elm_date_extra$Date_Extra_Format$padWithN = F2(
	function (n, c) {
		return function (_p0) {
			return A3(
				_elm_lang$core$String$padLeft,
				n,
				c,
				_elm_lang$core$Basics$toString(_p0));
		};
	});
var _rluiten$elm_date_extra$Date_Extra_Format$padWith = function (c) {
	return function (_p1) {
		return A3(
			_elm_lang$core$String$padLeft,
			2,
			c,
			_elm_lang$core$Basics$toString(_p1));
	};
};
var _rluiten$elm_date_extra$Date_Extra_Format$hourMod12 = function (h) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], h, 12),
		0) ? 12 : A2(_elm_lang$core$Basics_ops['%'], h, 12);
};
var _rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr = F2(
	function (betweenHoursMinutes, offset) {
		var _p2 = _rluiten$elm_date_extra$Date_Extra_Format$toHourMin(
			_elm_lang$core$Basics$abs(offset));
		var hour = _p2._0;
		var minute = _p2._1;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			(_elm_lang$core$Native_Utils.cmp(offset, 0) < 1) ? '+' : '-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					hour),
				A2(
					_elm_lang$core$Basics_ops['++'],
					betweenHoursMinutes,
					A2(
						_rluiten$elm_date_extra$Date_Extra_Format$padWith,
						_elm_lang$core$Native_Utils.chr('0'),
						minute))));
	});
var _rluiten$elm_date_extra$Date_Extra_Format$collapse = function (m) {
	return A2(_elm_lang$core$Maybe$andThen, _elm_lang$core$Basics$identity, m);
};
var _rluiten$elm_date_extra$Date_Extra_Format$formatToken = F4(
	function (config, offset, d, m) {
		var symbol = A2(
			_elm_lang$core$Maybe$withDefault,
			' ',
			_rluiten$elm_date_extra$Date_Extra_Format$collapse(
				_elm_lang$core$List$head(m.submatches)));
		var _p3 = symbol;
		switch (_p3) {
			case 'Y':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					4,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$year(d));
			case 'y':
				return A2(
					_elm_lang$core$String$right,
					2,
					A3(
						_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Date$year(d)));
			case 'm':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case '_m':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case '-m':
				return _elm_lang$core$Basics$toString(
					_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
						_elm_lang$core$Date$month(d)));
			case 'B':
				return config.i18n.monthName(
					_elm_lang$core$Date$month(d));
			case '^B':
				return _elm_lang$core$String$toUpper(
					config.i18n.monthName(
						_elm_lang$core$Date$month(d)));
			case 'b':
				return config.i18n.monthShort(
					_elm_lang$core$Date$month(d));
			case '^b':
				return _elm_lang$core$String$toUpper(
					config.i18n.monthShort(
						_elm_lang$core$Date$month(d)));
			case 'd':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$day(d));
			case '-d':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$day(d));
			case '-@d':
				return A2(
					config.i18n.dayOfMonthWithSuffix,
					false,
					_elm_lang$core$Date$day(d));
			case 'e':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$day(d));
			case '@e':
				return A2(
					config.i18n.dayOfMonthWithSuffix,
					true,
					_elm_lang$core$Date$day(d));
			case 'A':
				return config.i18n.dayName(
					_elm_lang$core$Date$dayOfWeek(d));
			case '^A':
				return _elm_lang$core$String$toUpper(
					config.i18n.dayName(
						_elm_lang$core$Date$dayOfWeek(d)));
			case 'a':
				return config.i18n.dayShort(
					_elm_lang$core$Date$dayOfWeek(d));
			case '^a':
				return _elm_lang$core$String$toUpper(
					config.i18n.dayShort(
						_elm_lang$core$Date$dayOfWeek(d)));
			case 'H':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$hour(d));
			case '-H':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$hour(d));
			case 'k':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$hour(d));
			case 'I':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case '-I':
				return _elm_lang$core$Basics$toString(
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case 'l':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_rluiten$elm_date_extra$Date_Extra_Format$hourMod12(
						_elm_lang$core$Date$hour(d)));
			case 'p':
				return _elm_lang$core$String$toUpper(
					config.i18n.twelveHourPeriod(
						_rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod(d)));
			case 'P':
				return config.i18n.twelveHourPeriod(
					_rluiten$elm_date_extra$Date_Extra_TwelveHourClock$twelveHourPeriod(d));
			case 'M':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$minute(d));
			case 'S':
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$second(d));
			case 'L':
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					3,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$millisecond(d));
			case '%':
				return symbol;
			case 'z':
				return A2(_rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr, '', offset);
			case ':z':
				return A2(_rluiten$elm_date_extra$Date_Extra_Format$formatOffsetStr, ':', offset);
			case 'G':
				var _p4 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return A3(
					_rluiten$elm_date_extra$Date_Extra_Format$padWithN,
					3,
					_elm_lang$core$Native_Utils.chr('0'),
					_p4._0);
			case 'V':
				var _p5 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return A2(
					_rluiten$elm_date_extra$Date_Extra_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_p5._1);
			case '-V':
				var _p6 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return _elm_lang$core$Basics$toString(_p6._1);
			case 'u':
				var _p7 = _rluiten$elm_date_extra$Date_Extra_Utils$isoWeek(d);
				return _elm_lang$core$Basics$toString(_p7._2);
			default:
				return '';
		}
	});
var _rluiten$elm_date_extra$Date_Extra_Format$formatRegex = _elm_lang$core$Regex$regex('%(y|Y|m|_m|-m|B|^B|b|^b|d|-d|-@d|e|@e|A|^A|a|^a|H|-H|k|I|-I|l|p|P|M|S|%|L|z|:z|G|V|-V|u)');
var _rluiten$elm_date_extra$Date_Extra_Format$formatOffset = F4(
	function (config, targetOffset, formatStr, date) {
		var dateOffset = _rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date);
		var hackOffset = dateOffset - targetOffset;
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_rluiten$elm_date_extra$Date_Extra_Format$formatRegex,
			A3(
				_rluiten$elm_date_extra$Date_Extra_Format$formatToken,
				config,
				targetOffset,
				A2(_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsOffset, hackOffset, date)),
			formatStr);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$format = F3(
	function (config, formatStr, date) {
		return A4(
			_rluiten$elm_date_extra$Date_Extra_Format$formatOffset,
			config,
			_rluiten$elm_date_extra$Date_Extra_Create$getTimezoneOffset(date),
			formatStr,
			date);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$formatUtc = F3(
	function (config, formatStr, date) {
		return A4(_rluiten$elm_date_extra$Date_Extra_Format$formatOffset, config, 0, formatStr, date);
	});
var _rluiten$elm_date_extra$Date_Extra_Format$isoDateString = function (date) {
	var day = _elm_lang$core$Date$day(date);
	var month = _elm_lang$core$Date$month(date);
	var year = _elm_lang$core$Date$year(date);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(
			_elm_lang$core$String$padLeft,
			4,
			_elm_lang$core$Native_Utils.chr('0'),
			_elm_lang$core$Basics$toString(year)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A3(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Basics$toString(
						_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month))),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'-',
					A3(
						_elm_lang$core$String$padLeft,
						2,
						_elm_lang$core$Native_Utils.chr('0'),
						_elm_lang$core$Basics$toString(day))))));
};
var _rluiten$elm_date_extra$Date_Extra_Format$utcIsoDateString = function (date) {
	return _rluiten$elm_date_extra$Date_Extra_Format$isoDateString(
		_rluiten$elm_date_extra$Date_Extra_Internal$hackDateAsUtc(date));
};
var _rluiten$elm_date_extra$Date_Extra_Format$yearInt = function (year) {
	return A3(
		_elm_lang$core$String$padLeft,
		4,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(year));
};
var _rluiten$elm_date_extra$Date_Extra_Format$year = function (date) {
	return A3(
		_elm_lang$core$String$padLeft,
		4,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Date$year(date)));
};
var _rluiten$elm_date_extra$Date_Extra_Format$monthMonth = function (month) {
	return A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(month)));
};
var _rluiten$elm_date_extra$Date_Extra_Format$month = function (date) {
	return A3(
		_elm_lang$core$String$padLeft,
		2,
		_elm_lang$core$Native_Utils.chr('0'),
		_elm_lang$core$Basics$toString(
			_rluiten$elm_date_extra$Date_Extra_Core$monthToInt(
				_elm_lang$core$Date$month(date))));
};
var _rluiten$elm_date_extra$Date_Extra_Format$isoTimeFormat = '%H:%M:%S';
var _rluiten$elm_date_extra$Date_Extra_Format$isoDateFormat = '%Y-%m-%d';
var _rluiten$elm_date_extra$Date_Extra_Format$isoMsecOffsetFormat = '%Y-%m-%dT%H:%M:%S.%L%:z';
var _rluiten$elm_date_extra$Date_Extra_Format$isoString = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecOffsetFormat);
var _rluiten$elm_date_extra$Date_Extra_Format$isoOffsetFormat = '%Y-%m-%dT%H:%M:%S%z';
var _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat = '%Y-%m-%dT%H:%M:%S.%L';
var _rluiten$elm_date_extra$Date_Extra_Format$isoStringNoOffset = A2(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat);
var _rluiten$elm_date_extra$Date_Extra_Format$utcIsoString = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A3(_rluiten$elm_date_extra$Date_Extra_Format$formatUtc, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, _rluiten$elm_date_extra$Date_Extra_Format$isoMsecFormat, date),
		'Z');
};
var _rluiten$elm_date_extra$Date_Extra_Format$isoFormat = '%Y-%m-%dT%H:%M:%S';

var _ryannhg$elm_date_format$DateFormat$toSuffix = function (num) {
	var suffix = function () {
		var _p0 = num;
		switch (_p0) {
			case 11:
				return 'th';
			case 12:
				return 'th';
			case 13:
				return 'th';
			default:
				var _p1 = A2(_elm_lang$core$Basics_ops['%'], num, 10);
				switch (_p1) {
					case 1:
						return 'st';
					case 2:
						return 'nd';
					case 3:
						return 'rd';
					default:
						return 'th';
				}
		}
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(num),
		suffix);
};
var _ryannhg$elm_date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = _elm_lang$core$Basics$toString(num);
		var numZerosNeeded = totalChars - _elm_lang$core$String$length(numStr);
		var zeros = A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p2) {
					return '0';
				},
				A2(_elm_lang$core$List$range, 1, numZerosNeeded)));
		return A2(_elm_lang$core$Basics_ops['++'], zeros, numStr);
	});
var _ryannhg$elm_date_format$DateFormat$toNonMilitary = function (num) {
	return _elm_lang$core$Native_Utils.eq(num, 0) ? 12 : ((_elm_lang$core$Native_Utils.cmp(num, 12) < 1) ? num : (num - 12));
};
var _ryannhg$elm_date_format$DateFormat$amPm = function (date) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Date$hour(date),
		11) > 0) ? 'pm' : 'am';
};
var _ryannhg$elm_date_format$DateFormat$year = function (date) {
	return _elm_lang$core$Basics$toString(
		_elm_lang$core$Date$year(date));
};
var _ryannhg$elm_date_format$DateFormat$firstDayOfYear = function (date) {
	var _p3 = _elm_lang$core$Date$fromString(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Date$year(date)),
			'-01-01T00:00:00.000Z'));
	if (_p3.ctor === 'Ok') {
		return _p3._0;
	} else {
		return date;
	}
};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekName = function (date) {
	var _p4 = _elm_lang$core$Date$dayOfWeek(date);
	switch (_p4.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _ryannhg$elm_date_format$DateFormat$dayOfMonth = _elm_lang$core$Date$day;
var _ryannhg$elm_date_format$DateFormat$isLeapYear = function (year) {
	return (!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 4),
		0)) ? false : ((!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 100),
		0)) ? true : ((!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], year, 400),
		0)) ? false : true));
};
var _ryannhg$elm_date_format$DateFormat$daysInMonth = F2(
	function (year, month) {
		var _p5 = month;
		switch (_p5.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _ryannhg$elm_date_format$DateFormat$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _ryannhg$elm_date_format$DateFormat$fullMonthName = function (date) {
	var _p6 = _elm_lang$core$Date$month(date);
	switch (_p6.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _ryannhg$elm_date_format$DateFormat$days = {
	ctor: '::',
	_0: _elm_lang$core$Date$Sun,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Mon,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Tue,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Wed,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$Thu,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Fri,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Sat,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	}
};
var _ryannhg$elm_date_format$DateFormat$dayOfWeek = function (date) {
	return function (_p7) {
		var _p8 = _p7;
		return _p8._0;
	}(
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Date$Sun},
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (_p9) {
						var _p10 = _p9;
						return _elm_lang$core$Native_Utils.eq(
							_p10._1,
							_elm_lang$core$Date$dayOfWeek(date));
					},
					A2(
						_elm_lang$core$List$indexedMap,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						_ryannhg$elm_date_format$DateFormat$days)))));
};
var _ryannhg$elm_date_format$DateFormat$months = {
	ctor: '::',
	_0: _elm_lang$core$Date$Jan,
	_1: {
		ctor: '::',
		_0: _elm_lang$core$Date$Feb,
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Date$Mar,
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Date$Apr,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Date$May,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Date$Jun,
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Date$Jul,
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Date$Aug,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Date$Sep,
									_1: {
										ctor: '::',
										_0: _elm_lang$core$Date$Oct,
										_1: {
											ctor: '::',
											_0: _elm_lang$core$Date$Nov,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Date$Dec,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _ryannhg$elm_date_format$DateFormat$monthPair = function (date) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		{ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Date$Jan},
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (_p11) {
					var _p12 = _p11;
					return _elm_lang$core$Native_Utils.eq(
						_p12._1,
						_elm_lang$core$Date$month(date));
				},
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					_ryannhg$elm_date_format$DateFormat$months))));
};
var _ryannhg$elm_date_format$DateFormat$monthNumber_ = function (date) {
	return A2(
		F2(
			function (x, y) {
				return x + y;
			}),
		1,
		function (_p13) {
			var _p14 = _p13;
			return _p14._0;
		}(
			_ryannhg$elm_date_format$DateFormat$monthPair(date)));
};
var _ryannhg$elm_date_format$DateFormat$quarter = function (date) {
	return (_ryannhg$elm_date_format$DateFormat$monthNumber_(date) / 4) | 0;
};
var _ryannhg$elm_date_format$DateFormat$dayOfYear = function (date) {
	var monthsBeforeThisOne = A2(
		_elm_lang$core$List$take,
		_ryannhg$elm_date_format$DateFormat$monthNumber_(date) - 1,
		_ryannhg$elm_date_format$DateFormat$months);
	var daysBeforeThisMonth = _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			_ryannhg$elm_date_format$DateFormat$daysInMonth(
				_elm_lang$core$Date$year(date)),
			monthsBeforeThisOne));
	return daysBeforeThisMonth + _ryannhg$elm_date_format$DateFormat$dayOfMonth(date);
};
var _ryannhg$elm_date_format$DateFormat$weekOfYear = function (date) {
	var firstDay = _ryannhg$elm_date_format$DateFormat$firstDayOfYear(date);
	var firstDayOffset = _ryannhg$elm_date_format$DateFormat$dayOfWeek(firstDay);
	var daysSoFar = _ryannhg$elm_date_format$DateFormat$dayOfYear(date);
	return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
};
var _ryannhg$elm_date_format$DateFormat$piece = F2(
	function (date, token) {
		var _p15 = token;
		switch (_p15.ctor) {
			case 'MonthNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$monthNumber_(date));
			case 'MonthSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$monthNumber_(date));
			case 'MonthFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_ryannhg$elm_date_format$DateFormat$monthNumber_(date));
			case 'MonthNameFirst':
				return A2(
					_elm_lang$core$String$left,
					_p15._0,
					_ryannhg$elm_date_format$DateFormat$fullMonthName(date));
			case 'MonthNameFull':
				return _ryannhg$elm_date_format$DateFormat$fullMonthName(date);
			case 'QuarterNumber':
				return _elm_lang$core$Basics$toString(
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						1,
						_ryannhg$elm_date_format$DateFormat$quarter(date)));
			case 'QuarterSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						1,
						_ryannhg$elm_date_format$DateFormat$quarter(date)));
			case 'DayOfMonthNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$dayOfMonth(date));
			case 'DayOfMonthSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$dayOfMonth(date));
			case 'DayOfMonthFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_ryannhg$elm_date_format$DateFormat$dayOfMonth(date));
			case 'DayOfYearNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$dayOfYear(date));
			case 'DayOfYearSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$dayOfYear(date));
			case 'DayOfYearFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					3,
					_ryannhg$elm_date_format$DateFormat$dayOfYear(date));
			case 'DayOfWeekNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$dayOfWeek(date));
			case 'DayOfWeekSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$dayOfWeek(date));
			case 'DayOfWeekNameFirst':
				return A2(
					_elm_lang$core$String$left,
					_p15._0,
					_ryannhg$elm_date_format$DateFormat$dayOfWeekName(date));
			case 'DayOfWeekNameFull':
				return _ryannhg$elm_date_format$DateFormat$dayOfWeekName(date);
			case 'WeekOfYearNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$weekOfYear(date));
			case 'WeekOfYearSuffix':
				return _ryannhg$elm_date_format$DateFormat$toSuffix(
					_ryannhg$elm_date_format$DateFormat$weekOfYear(date));
			case 'WeekOfYearFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_ryannhg$elm_date_format$DateFormat$weekOfYear(date));
			case 'YearNumberLastTwo':
				return A2(
					_elm_lang$core$String$right,
					2,
					_ryannhg$elm_date_format$DateFormat$year(date));
			case 'YearNumber':
				return _ryannhg$elm_date_format$DateFormat$year(date);
			case 'AmPmUppercase':
				return _elm_lang$core$String$toUpper(
					_ryannhg$elm_date_format$DateFormat$amPm(date));
			case 'AmPmLowercase':
				return _elm_lang$core$String$toLower(
					_ryannhg$elm_date_format$DateFormat$amPm(date));
			case 'HourMilitaryNumber':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$hour(date));
			case 'HourMilitaryFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_elm_lang$core$Date$hour(date));
			case 'HourNumber':
				return _elm_lang$core$Basics$toString(
					_ryannhg$elm_date_format$DateFormat$toNonMilitary(
						_elm_lang$core$Date$hour(date)));
			case 'HourFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_ryannhg$elm_date_format$DateFormat$toNonMilitary(
						_elm_lang$core$Date$hour(date)));
			case 'HourMilitaryFromOneNumber':
				return _elm_lang$core$Basics$toString(
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						1,
						_elm_lang$core$Date$hour(date)));
			case 'HourMilitaryFromOneFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					A2(
						F2(
							function (x, y) {
								return x + y;
							}),
						1,
						_elm_lang$core$Date$hour(date)));
			case 'MinuteNumber':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$minute(date));
			case 'MinuteFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_elm_lang$core$Date$minute(date));
			case 'SecondNumber':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$second(date));
			case 'SecondFixed':
				return A2(
					_ryannhg$elm_date_format$DateFormat$toFixedLength,
					2,
					_elm_lang$core$Date$second(date));
			default:
				return _p15._0;
		}
	});
var _ryannhg$elm_date_format$DateFormat$format = F2(
	function (tokens, date) {
		return A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$map,
				_ryannhg$elm_date_format$DateFormat$piece(date),
				tokens));
	});
var _ryannhg$elm_date_format$DateFormat$SimpleDate = F3(
	function (a, b, c) {
		return {month: a, day: b, year: c};
	});
var _ryannhg$elm_date_format$DateFormat$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _ryannhg$elm_date_format$DateFormat$text = _ryannhg$elm_date_format$DateFormat$Text;
var _ryannhg$elm_date_format$DateFormat$SecondFixed = {ctor: 'SecondFixed'};
var _ryannhg$elm_date_format$DateFormat$secondFixed = _ryannhg$elm_date_format$DateFormat$SecondFixed;
var _ryannhg$elm_date_format$DateFormat$SecondNumber = {ctor: 'SecondNumber'};
var _ryannhg$elm_date_format$DateFormat$secondNumber = _ryannhg$elm_date_format$DateFormat$SecondNumber;
var _ryannhg$elm_date_format$DateFormat$MinuteFixed = {ctor: 'MinuteFixed'};
var _ryannhg$elm_date_format$DateFormat$minuteFixed = _ryannhg$elm_date_format$DateFormat$MinuteFixed;
var _ryannhg$elm_date_format$DateFormat$MinuteNumber = {ctor: 'MinuteNumber'};
var _ryannhg$elm_date_format$DateFormat$minuteNumber = _ryannhg$elm_date_format$DateFormat$MinuteNumber;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneFixed = {ctor: 'HourMilitaryFromOneFixed'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryFromOneFixed = _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneFixed;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneNumber = {ctor: 'HourMilitaryFromOneNumber'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryFromOneNumber = _ryannhg$elm_date_format$DateFormat$HourMilitaryFromOneNumber;
var _ryannhg$elm_date_format$DateFormat$HourFixed = {ctor: 'HourFixed'};
var _ryannhg$elm_date_format$DateFormat$hourFixed = _ryannhg$elm_date_format$DateFormat$HourFixed;
var _ryannhg$elm_date_format$DateFormat$HourNumber = {ctor: 'HourNumber'};
var _ryannhg$elm_date_format$DateFormat$hourNumber = _ryannhg$elm_date_format$DateFormat$HourNumber;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryFixed = {ctor: 'HourMilitaryFixed'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryFixed = _ryannhg$elm_date_format$DateFormat$HourMilitaryFixed;
var _ryannhg$elm_date_format$DateFormat$HourMilitaryNumber = {ctor: 'HourMilitaryNumber'};
var _ryannhg$elm_date_format$DateFormat$hourMilitaryNumber = _ryannhg$elm_date_format$DateFormat$HourMilitaryNumber;
var _ryannhg$elm_date_format$DateFormat$AmPmLowercase = {ctor: 'AmPmLowercase'};
var _ryannhg$elm_date_format$DateFormat$amPmLowercase = _ryannhg$elm_date_format$DateFormat$AmPmLowercase;
var _ryannhg$elm_date_format$DateFormat$AmPmUppercase = {ctor: 'AmPmUppercase'};
var _ryannhg$elm_date_format$DateFormat$amPmUppercase = _ryannhg$elm_date_format$DateFormat$AmPmUppercase;
var _ryannhg$elm_date_format$DateFormat$WeekOfYearFixed = {ctor: 'WeekOfYearFixed'};
var _ryannhg$elm_date_format$DateFormat$weekOfYearFixed = _ryannhg$elm_date_format$DateFormat$WeekOfYearFixed;
var _ryannhg$elm_date_format$DateFormat$WeekOfYearSuffix = {ctor: 'WeekOfYearSuffix'};
var _ryannhg$elm_date_format$DateFormat$weekOfYearSuffix = _ryannhg$elm_date_format$DateFormat$WeekOfYearSuffix;
var _ryannhg$elm_date_format$DateFormat$WeekOfYearNumber = {ctor: 'WeekOfYearNumber'};
var _ryannhg$elm_date_format$DateFormat$weekOfYearNumber = _ryannhg$elm_date_format$DateFormat$WeekOfYearNumber;
var _ryannhg$elm_date_format$DateFormat$QuarterSuffix = {ctor: 'QuarterSuffix'};
var _ryannhg$elm_date_format$DateFormat$quarterSuffix = _ryannhg$elm_date_format$DateFormat$QuarterSuffix;
var _ryannhg$elm_date_format$DateFormat$QuarterNumber = {ctor: 'QuarterNumber'};
var _ryannhg$elm_date_format$DateFormat$quarterNumber = _ryannhg$elm_date_format$DateFormat$QuarterNumber;
var _ryannhg$elm_date_format$DateFormat$YearNumber = {ctor: 'YearNumber'};
var _ryannhg$elm_date_format$DateFormat$yearNumber = _ryannhg$elm_date_format$DateFormat$YearNumber;
var _ryannhg$elm_date_format$DateFormat$YearNumberLastTwo = {ctor: 'YearNumberLastTwo'};
var _ryannhg$elm_date_format$DateFormat$yearNumberLastTwo = _ryannhg$elm_date_format$DateFormat$YearNumberLastTwo;
var _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFull = {ctor: 'DayOfWeekNameFull'};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNameFull = _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFull;
var _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFirst = function (a) {
	return {ctor: 'DayOfWeekNameFirst', _0: a};
};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNameFirstTwo = _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFirst(2);
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNameFirstThree = _ryannhg$elm_date_format$DateFormat$DayOfWeekNameFirst(3);
var _ryannhg$elm_date_format$DateFormat$DayOfWeekSuffix = {ctor: 'DayOfWeekSuffix'};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekSuffix = _ryannhg$elm_date_format$DateFormat$DayOfWeekSuffix;
var _ryannhg$elm_date_format$DateFormat$DayOfWeekNumber = {ctor: 'DayOfWeekNumber'};
var _ryannhg$elm_date_format$DateFormat$dayOfWeekNumber = _ryannhg$elm_date_format$DateFormat$DayOfWeekNumber;
var _ryannhg$elm_date_format$DateFormat$DayOfYearFixed = {ctor: 'DayOfYearFixed'};
var _ryannhg$elm_date_format$DateFormat$dayOfYearFixed = _ryannhg$elm_date_format$DateFormat$DayOfYearFixed;
var _ryannhg$elm_date_format$DateFormat$DayOfYearSuffix = {ctor: 'DayOfYearSuffix'};
var _ryannhg$elm_date_format$DateFormat$dayOfYearSuffix = _ryannhg$elm_date_format$DateFormat$DayOfYearSuffix;
var _ryannhg$elm_date_format$DateFormat$DayOfYearNumber = {ctor: 'DayOfYearNumber'};
var _ryannhg$elm_date_format$DateFormat$dayOfYearNumber = _ryannhg$elm_date_format$DateFormat$DayOfYearNumber;
var _ryannhg$elm_date_format$DateFormat$DayOfMonthFixed = {ctor: 'DayOfMonthFixed'};
var _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed = _ryannhg$elm_date_format$DateFormat$DayOfMonthFixed;
var _ryannhg$elm_date_format$DateFormat$DayOfMonthSuffix = {ctor: 'DayOfMonthSuffix'};
var _ryannhg$elm_date_format$DateFormat$dayOfMonthSuffix = _ryannhg$elm_date_format$DateFormat$DayOfMonthSuffix;
var _ryannhg$elm_date_format$DateFormat$DayOfMonthNumber = {ctor: 'DayOfMonthNumber'};
var _ryannhg$elm_date_format$DateFormat$dayOfMonthNumber = _ryannhg$elm_date_format$DateFormat$DayOfMonthNumber;
var _ryannhg$elm_date_format$DateFormat$MonthNameFull = {ctor: 'MonthNameFull'};
var _ryannhg$elm_date_format$DateFormat$monthNameFull = _ryannhg$elm_date_format$DateFormat$MonthNameFull;
var _ryannhg$elm_date_format$DateFormat$MonthNameFirst = function (a) {
	return {ctor: 'MonthNameFirst', _0: a};
};
var _ryannhg$elm_date_format$DateFormat$monthNameFirstThree = _ryannhg$elm_date_format$DateFormat$MonthNameFirst(3);
var _ryannhg$elm_date_format$DateFormat$MonthFixed = {ctor: 'MonthFixed'};
var _ryannhg$elm_date_format$DateFormat$monthFixed = _ryannhg$elm_date_format$DateFormat$MonthFixed;
var _ryannhg$elm_date_format$DateFormat$MonthSuffix = {ctor: 'MonthSuffix'};
var _ryannhg$elm_date_format$DateFormat$monthSuffix = _ryannhg$elm_date_format$DateFormat$MonthSuffix;
var _ryannhg$elm_date_format$DateFormat$MonthNumber = {ctor: 'MonthNumber'};
var _ryannhg$elm_date_format$DateFormat$monthNumber = _ryannhg$elm_date_format$DateFormat$MonthNumber;

var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode = _elm_lang$core$Json_Decode$succeed;
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$resolve = _elm_lang$core$Json_Decode$andThen(_elm_lang$core$Basics$identity);
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom = F2(
	function (decoder, wrapped) {
		return A3(
			_elm_lang$core$Json_Decode$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			wrapped,
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$hardcoded = function (_p0) {
	return _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom(
		_elm_lang$core$Json_Decode$succeed(_p0));
};
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return _elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: decoder,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Json_Decode$null(fallback),
						_1: {ctor: '[]'}
					}
				});
		};
		var handleResult = function (input) {
			var _p1 = A2(_elm_lang$core$Json_Decode$decodeValue, pathDecoder, input);
			if (_p1.ctor === 'Ok') {
				var _p2 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					nullOr(valDecoder),
					_p1._0);
				if (_p2.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(_p2._0);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p2._0);
				}
			} else {
				var _p3 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					_elm_lang$core$Json_Decode$keyValuePairs(_elm_lang$core$Json_Decode$value),
					input);
				if (_p3.ctor === 'Ok') {
					return _elm_lang$core$Json_Decode$succeed(fallback);
				} else {
					return _elm_lang$core$Json_Decode$fail(_p3._0);
				}
			}
		};
		return A2(_elm_lang$core$Json_Decode$andThen, handleResult, _elm_lang$core$Json_Decode$value);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt = F4(
	function (path, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$at, path, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalDecoder,
				A2(_elm_lang$core$Json_Decode$field, key, _elm_lang$core$Json_Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$at, path, valDecoder),
			decoder);
	});
var _NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$custom,
			A2(_elm_lang$core$Json_Decode$field, key, valDecoder),
			decoder);
	});

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_community$list_extra$List_Extra$greedyGroupsOfWithStep = F3(
	function (size, step, xs) {
		var okayXs = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(xs),
			0) > 0;
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		return (okayArgs && okayXs) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$greedyGroupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$greedyGroupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$groupsOfWithStep = F3(
	function (size, step, xs) {
		var okayArgs = (_elm_lang$core$Native_Utils.cmp(size, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(step, 0) > 0);
		var xs_ = A2(_elm_lang$core$List$drop, step, xs);
		var group = A2(_elm_lang$core$List$take, size, xs);
		var okayLength = _elm_lang$core$Native_Utils.eq(
			size,
			_elm_lang$core$List$length(group));
		return (okayArgs && okayLength) ? {
			ctor: '::',
			_0: group,
			_1: A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, step, xs_)
		} : {ctor: '[]'};
	});
var _elm_community$list_extra$List_Extra$groupsOf = F2(
	function (size, xs) {
		return A3(_elm_community$list_extra$List_Extra$groupsOfWithStep, size, size, xs);
	});
var _elm_community$list_extra$List_Extra$zip5 = _elm_lang$core$List$map5(
	F5(
		function (v0, v1, v2, v3, v4) {
			return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
		}));
var _elm_community$list_extra$List_Extra$zip4 = _elm_lang$core$List$map4(
	F4(
		function (v0, v1, v2, v3) {
			return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
		}));
var _elm_community$list_extra$List_Extra$zip3 = _elm_lang$core$List$map3(
	F3(
		function (v0, v1, v2) {
			return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
		}));
var _elm_community$list_extra$List_Extra$zip = _elm_lang$core$List$map2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}));
var _elm_community$list_extra$List_Extra$isSubsequenceOf = F2(
	function (subseq, list) {
		isSubsequenceOf:
		while (true) {
			var _p0 = {ctor: '_Tuple2', _0: subseq, _1: list};
			if (_p0._0.ctor === '[]') {
				return true;
			} else {
				if (_p0._1.ctor === '[]') {
					return false;
				} else {
					var _p1 = _p0._1._1;
					if (_elm_lang$core$Native_Utils.eq(_p0._0._0, _p0._1._0)) {
						var _v1 = _p0._0._1,
							_v2 = _p1;
						subseq = _v1;
						list = _v2;
						continue isSubsequenceOf;
					} else {
						var _v3 = subseq,
							_v4 = _p1;
						subseq = _v3;
						list = _v4;
						continue isSubsequenceOf;
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$isPrefixOf = F2(
	function (prefix, xs) {
		var _p2 = {ctor: '_Tuple2', _0: prefix, _1: xs};
		if (_p2._0.ctor === '[]') {
			return true;
		} else {
			if (_p2._1.ctor === '[]') {
				return false;
			} else {
				return _elm_lang$core$Native_Utils.eq(_p2._0._0, _p2._1._0) && A2(_elm_community$list_extra$List_Extra$isPrefixOf, _p2._0._1, _p2._1._1);
			}
		}
	});
var _elm_community$list_extra$List_Extra$isSuffixOf = F2(
	function (suffix, xs) {
		return A2(
			_elm_community$list_extra$List_Extra$isPrefixOf,
			_elm_lang$core$List$reverse(suffix),
			_elm_lang$core$List$reverse(xs));
	});
var _elm_community$list_extra$List_Extra$isInfixOfHelp = F3(
	function (infixHead, infixTail, list) {
		isInfixOfHelp:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return false;
			} else {
				var _p4 = _p3._1;
				if (_elm_lang$core$Native_Utils.eq(_p3._0, infixHead)) {
					return A2(_elm_community$list_extra$List_Extra$isPrefixOf, infixTail, _p4);
				} else {
					var _v7 = infixHead,
						_v8 = infixTail,
						_v9 = _p4;
					infixHead = _v7;
					infixTail = _v8;
					list = _v9;
					continue isInfixOfHelp;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$isInfixOf = F2(
	function (infixList, list) {
		var _p5 = infixList;
		if (_p5.ctor === '[]') {
			return true;
		} else {
			return A3(_elm_community$list_extra$List_Extra$isInfixOfHelp, _p5._0, _p5._1, list);
		}
	});
var _elm_community$list_extra$List_Extra$selectSplit = function (xs) {
	var _p6 = xs;
	if (_p6.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p10 = _p6._1;
		var _p9 = _p6._0;
		return {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _p9,
				_2: _p10
			},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple3',
						_0: {ctor: '::', _0: _p9, _1: _p8._0},
						_1: _p8._1,
						_2: _p8._2
					};
				},
				_elm_community$list_extra$List_Extra$selectSplit(_p10))
		};
	}
};
var _elm_community$list_extra$List_Extra$select = function (xs) {
	var _p11 = xs;
	if (_p11.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p15 = _p11._1;
		var _p14 = _p11._0;
		return {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p14, _1: _p15},
			_1: A2(
				_elm_lang$core$List$map,
				function (_p12) {
					var _p13 = _p12;
					return {
						ctor: '_Tuple2',
						_0: _p13._0,
						_1: {ctor: '::', _0: _p14, _1: _p13._1}
					};
				},
				_elm_community$list_extra$List_Extra$select(_p15))
		};
	}
};
var _elm_community$list_extra$List_Extra$tailsHelp = F2(
	function (e, list) {
		var _p16 = list;
		if (_p16.ctor === '::') {
			var _p17 = _p16._0;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: e, _1: _p17},
				_1: {ctor: '::', _0: _p17, _1: _p16._1}
			};
		} else {
			return {ctor: '[]'};
		}
	});
var _elm_community$list_extra$List_Extra$tails = A2(
	_elm_lang$core$List$foldr,
	_elm_community$list_extra$List_Extra$tailsHelp,
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$inits = A2(
	_elm_lang$core$List$foldr,
	F2(
		function (e, acc) {
			return {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: A2(
					_elm_lang$core$List$map,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						})(e),
					acc)
			};
		}),
	{
		ctor: '::',
		_0: {ctor: '[]'},
		_1: {ctor: '[]'}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitivelyHelp = F4(
	function (result, currentGroup, compare, list) {
		groupWhileTransitivelyHelp:
		while (true) {
			var _p18 = list;
			if (_p18.ctor === '[]') {
				return _elm_lang$core$List$reverse(
					_elm_lang$core$List$isEmpty(currentGroup) ? result : _elm_lang$core$List$reverse(
						{ctor: '::', _0: currentGroup, _1: result}));
			} else {
				if (_p18._1.ctor === '[]') {
					return _elm_lang$core$List$reverse(
						{
							ctor: '::',
							_0: _elm_lang$core$List$reverse(
								{ctor: '::', _0: _p18._0, _1: currentGroup}),
							_1: result
						});
				} else {
					var _p20 = _p18._1;
					var _p19 = _p18._0;
					if (A2(compare, _p19, _p18._1._0)) {
						var _v17 = result,
							_v18 = {ctor: '::', _0: _p19, _1: currentGroup},
							_v19 = compare,
							_v20 = _p20;
						result = _v17;
						currentGroup = _v18;
						compare = _v19;
						list = _v20;
						continue groupWhileTransitivelyHelp;
					} else {
						var _v21 = {
							ctor: '::',
							_0: _elm_lang$core$List$reverse(
								{ctor: '::', _0: _p19, _1: currentGroup}),
							_1: result
						},
							_v22 = {ctor: '[]'},
							_v23 = compare,
							_v24 = _p20;
						result = _v21;
						currentGroup = _v22;
						compare = _v23;
						list = _v24;
						continue groupWhileTransitivelyHelp;
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupWhileTransitively = F2(
	function (compare, list) {
		return A4(
			_elm_community$list_extra$List_Extra$groupWhileTransitivelyHelp,
			{ctor: '[]'},
			{ctor: '[]'},
			compare,
			list);
	});
var _elm_community$list_extra$List_Extra$stripPrefix = F2(
	function (prefix, xs) {
		var step = F2(
			function (e, m) {
				var _p21 = m;
				if (_p21.ctor === 'Nothing') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p21._0.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						return _elm_lang$core$Native_Utils.eq(e, _p21._0._0) ? _elm_lang$core$Maybe$Just(_p21._0._1) : _elm_lang$core$Maybe$Nothing;
					}
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			step,
			_elm_lang$core$Maybe$Just(xs),
			prefix);
	});
var _elm_community$list_extra$List_Extra$dropWhileRight = function (p) {
	return A2(
		_elm_lang$core$List$foldr,
		F2(
			function (x, xs) {
				return (p(x) && _elm_lang$core$List$isEmpty(xs)) ? {ctor: '[]'} : {ctor: '::', _0: x, _1: xs};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$takeWhileRight = function (p) {
	var step = F2(
		function (x, _p22) {
			var _p23 = _p22;
			var _p24 = _p23._0;
			return (p(x) && _p23._1) ? {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: x, _1: _p24},
				_1: true
			} : {ctor: '_Tuple2', _0: _p24, _1: false};
		});
	return function (_p25) {
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: {ctor: '[]'},
					_1: true
				},
				_p25));
	};
};
var _elm_community$list_extra$List_Extra$splitAt = F2(
	function (n, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$List$take, n, xs),
			_1: A2(_elm_lang$core$List$drop, n, xs)
		};
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying_ = F3(
	function (listOflengths, list, accu) {
		groupsOfVarying_:
		while (true) {
			var _p26 = {ctor: '_Tuple2', _0: listOflengths, _1: list};
			if (((_p26.ctor === '_Tuple2') && (_p26._0.ctor === '::')) && (_p26._1.ctor === '::')) {
				var _p27 = A2(_elm_community$list_extra$List_Extra$splitAt, _p26._0._0, list);
				var head = _p27._0;
				var tail = _p27._1;
				var _v28 = _p26._0._1,
					_v29 = tail,
					_v30 = {ctor: '::', _0: head, _1: accu};
				listOflengths = _v28;
				list = _v29;
				accu = _v30;
				continue groupsOfVarying_;
			} else {
				return _elm_lang$core$List$reverse(accu);
			}
		}
	});
var _elm_community$list_extra$List_Extra$groupsOfVarying = F2(
	function (listOflengths, list) {
		return A3(
			_elm_community$list_extra$List_Extra$groupsOfVarying_,
			listOflengths,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$unfoldr = F2(
	function (f, seed) {
		var _p28 = f(seed);
		if (_p28.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: _p28._0._0,
				_1: A2(_elm_community$list_extra$List_Extra$unfoldr, f, _p28._0._1)
			};
		}
	});
var _elm_community$list_extra$List_Extra$mapAccumr = F3(
	function (f, acc0, list) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, _p29) {
					var _p30 = _p29;
					var _p31 = A2(f, _p30._0, x);
					var acc2 = _p31._0;
					var y = _p31._1;
					return {
						ctor: '_Tuple2',
						_0: acc2,
						_1: {ctor: '::', _0: y, _1: _p30._1}
					};
				}),
			{
				ctor: '_Tuple2',
				_0: acc0,
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_community$list_extra$List_Extra$mapAccuml = F3(
	function (f, acc0, list) {
		var _p32 = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, _p33) {
					var _p34 = _p33;
					var _p35 = A2(f, _p34._0, x);
					var acc2 = _p35._0;
					var y = _p35._1;
					return {
						ctor: '_Tuple2',
						_0: acc2,
						_1: {ctor: '::', _0: y, _1: _p34._1}
					};
				}),
			{
				ctor: '_Tuple2',
				_0: acc0,
				_1: {ctor: '[]'}
			},
			list);
		var accFinal = _p32._0;
		var generatedList = _p32._1;
		return {
			ctor: '_Tuple2',
			_0: accFinal,
			_1: _elm_lang$core$List$reverse(generatedList)
		};
	});
var _elm_community$list_extra$List_Extra$scanr1 = F2(
	function (f, xs_) {
		var _p36 = xs_;
		if (_p36.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p36._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: _p36._0,
					_1: {ctor: '[]'}
				};
			} else {
				var _p37 = A2(_elm_community$list_extra$List_Extra$scanr1, f, _p36._1);
				if (_p37.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, _p36._0, _p37._0),
						_1: _p37
					};
				} else {
					return {ctor: '[]'};
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanr = F3(
	function (f, acc, xs_) {
		var _p38 = xs_;
		if (_p38.ctor === '[]') {
			return {
				ctor: '::',
				_0: acc,
				_1: {ctor: '[]'}
			};
		} else {
			var _p39 = A3(_elm_community$list_extra$List_Extra$scanr, f, acc, _p38._1);
			if (_p39.ctor === '::') {
				return {
					ctor: '::',
					_0: A2(f, _p38._0, _p39._0),
					_1: _p39
				};
			} else {
				return {ctor: '[]'};
			}
		}
	});
var _elm_community$list_extra$List_Extra$scanl1 = F2(
	function (f, xs_) {
		var _p40 = xs_;
		if (_p40.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$scanl, f, _p40._0, _p40._1);
		}
	});
var _elm_community$list_extra$List_Extra$indexedFoldr = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p41) {
				var _p42 = _p41;
				var _p43 = _p42._0;
				return {
					ctor: '_Tuple2',
					_0: _p43 - 1,
					_1: A3(func, _p43, x, _p42._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				step,
				{
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$length(list) - 1,
					_1: acc
				},
				list));
	});
var _elm_community$list_extra$List_Extra$indexedFoldl = F3(
	function (func, acc, list) {
		var step = F2(
			function (x, _p44) {
				var _p45 = _p44;
				var _p46 = _p45._0;
				return {
					ctor: '_Tuple2',
					_0: _p46 + 1,
					_1: A3(func, _p46, x, _p45._1)
				};
			});
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldl,
				step,
				{ctor: '_Tuple2', _0: 0, _1: acc},
				list));
	});
var _elm_community$list_extra$List_Extra$foldr1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p47 = m;
						if (_p47.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, x, _p47._0);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldr, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$foldl1 = F2(
	function (f, xs) {
		var mf = F2(
			function (x, m) {
				return _elm_lang$core$Maybe$Just(
					function () {
						var _p48 = m;
						if (_p48.ctor === 'Nothing') {
							return x;
						} else {
							return A2(f, _p48._0, x);
						}
					}());
			});
		return A3(_elm_lang$core$List$foldl, mf, _elm_lang$core$Maybe$Nothing, xs);
	});
var _elm_community$list_extra$List_Extra$reverseAppend = F2(
	function (list1, list2) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			list2,
			list1);
	});
var _elm_community$list_extra$List_Extra$interweaveHelp = F3(
	function (acc, list1, list2) {
		interweaveHelp:
		while (true) {
			var _p49 = {ctor: '_Tuple2', _0: list1, _1: list2};
			if (_p49._0.ctor === '::') {
				if (_p49._1.ctor === '::') {
					var _v44 = {
						ctor: '::',
						_0: _p49._1._0,
						_1: {ctor: '::', _0: _p49._0._0, _1: acc}
					},
						_v45 = _p49._0._1,
						_v46 = _p49._1._1;
					acc = _v44;
					list1 = _v45;
					list2 = _v46;
					continue interweaveHelp;
				} else {
					return A2(_elm_community$list_extra$List_Extra$reverseAppend, acc, list1);
				}
			} else {
				return A2(_elm_community$list_extra$List_Extra$reverseAppend, acc, list2);
			}
		}
	});
var _elm_community$list_extra$List_Extra$interweave = _elm_community$list_extra$List_Extra$interweaveHelp(
	{ctor: '[]'});
var _elm_community$list_extra$List_Extra$permutations = function (xs_) {
	var _p50 = xs_;
	if (_p50.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var f = function (_p51) {
			var _p52 = _p51;
			return A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					})(_p52._0),
				_elm_community$list_extra$List_Extra$permutations(_p52._1));
		};
		return A2(
			_elm_lang$core$List$concatMap,
			f,
			_elm_community$list_extra$List_Extra$select(_p50));
	}
};
var _elm_community$list_extra$List_Extra$isPermutationOf = F2(
	function (permut, xs) {
		return A2(
			_elm_lang$core$List$member,
			permut,
			_elm_community$list_extra$List_Extra$permutations(xs));
	});
var _elm_community$list_extra$List_Extra$subsequencesNonEmpty = function (xs) {
	var _p53 = xs;
	if (_p53.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var _p54 = _p53._0;
		var f = F2(
			function (ys, r) {
				return {
					ctor: '::',
					_0: ys,
					_1: {
						ctor: '::',
						_0: {ctor: '::', _0: _p54, _1: ys},
						_1: r
					}
				};
			});
		return {
			ctor: '::',
			_0: {
				ctor: '::',
				_0: _p54,
				_1: {ctor: '[]'}
			},
			_1: A3(
				_elm_lang$core$List$foldr,
				f,
				{ctor: '[]'},
				_elm_community$list_extra$List_Extra$subsequencesNonEmpty(_p53._1))
		};
	}
};
var _elm_community$list_extra$List_Extra$subsequences = function (xs) {
	return {
		ctor: '::',
		_0: {ctor: '[]'},
		_1: _elm_community$list_extra$List_Extra$subsequencesNonEmpty(xs)
	};
};
var _elm_community$list_extra$List_Extra$rowsLength = function (listOfLists) {
	var _p55 = listOfLists;
	if (_p55.ctor === '[]') {
		return 0;
	} else {
		return _elm_lang$core$List$length(_p55._0);
	}
};
var _elm_community$list_extra$List_Extra$transpose = function (listOfLists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$map2(
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				})),
		A2(
			_elm_lang$core$List$repeat,
			_elm_community$list_extra$List_Extra$rowsLength(listOfLists),
			{ctor: '[]'}),
		listOfLists);
};
var _elm_community$list_extra$List_Extra$intercalate = function (xs) {
	return function (_p56) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$intersperse, xs, _p56));
	};
};
var _elm_community$list_extra$List_Extra$filterNot = F2(
	function (pred, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (_p57) {
				return !pred(_p57);
			},
			list);
	});
var _elm_community$list_extra$List_Extra$removeIfIndex = function (predicate) {
	return A2(
		_elm_community$list_extra$List_Extra$indexedFoldr,
		F3(
			function (index, item, acc) {
				return predicate(index) ? acc : {ctor: '::', _0: item, _1: acc};
			}),
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$removeAt = F2(
	function (index, l) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return l;
		} else {
			var tail = _elm_lang$core$List$tail(
				A2(_elm_lang$core$List$drop, index, l));
			var head = A2(_elm_lang$core$List$take, index, l);
			var _p58 = tail;
			if (_p58.ctor === 'Nothing') {
				return l;
			} else {
				return A2(_elm_lang$core$List$append, head, _p58._0);
			}
		}
	});
var _elm_community$list_extra$List_Extra$stableSortWith = F2(
	function (pred, list) {
		var predWithIndex = F2(
			function (_p60, _p59) {
				var _p61 = _p60;
				var _p62 = _p59;
				var result = A2(pred, _p61._0, _p62._0);
				var _p63 = result;
				if (_p63.ctor === 'EQ') {
					return A2(_elm_lang$core$Basics$compare, _p61._1, _p62._1);
				} else {
					return result;
				}
			});
		var listWithIndex = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, a) {
					return {ctor: '_Tuple2', _0: a, _1: i};
				}),
			list);
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(_elm_lang$core$List$sortWith, predWithIndex, listWithIndex));
	});
var _elm_community$list_extra$List_Extra$remove = F2(
	function (x, xs) {
		var _p64 = xs;
		if (_p64.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p66 = _p64._1;
			var _p65 = _p64._0;
			return _elm_lang$core$Native_Utils.eq(x, _p65) ? _p66 : {
				ctor: '::',
				_0: _p65,
				_1: A2(_elm_community$list_extra$List_Extra$remove, x, _p66)
			};
		}
	});
var _elm_community$list_extra$List_Extra$updateIfIndex = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (i, x) {
					return predicate(i) ? update(x) : x;
				}),
			list);
	});
var _elm_community$list_extra$List_Extra$updateAt = F3(
	function (index, fn, list) {
		if (_elm_lang$core$Native_Utils.cmp(index, 0) < 0) {
			return list;
		} else {
			var tail = A2(_elm_lang$core$List$drop, index, list);
			var head = A2(_elm_lang$core$List$take, index, list);
			var _p67 = tail;
			if (_p67.ctor === '::') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					head,
					{
						ctor: '::',
						_0: fn(_p67._0),
						_1: _p67._1
					});
			} else {
				return list;
			}
		}
	});
var _elm_community$list_extra$List_Extra$setAt = F2(
	function (index, value) {
		return A2(
			_elm_community$list_extra$List_Extra$updateAt,
			index,
			_elm_lang$core$Basics$always(value));
	});
var _elm_community$list_extra$List_Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			_elm_lang$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var _elm_community$list_extra$List_Extra$replaceIf = F3(
	function (predicate, replacement, list) {
		return A3(
			_elm_community$list_extra$List_Extra$updateIf,
			predicate,
			_elm_lang$core$Basics$always(replacement),
			list);
	});
var _elm_community$list_extra$List_Extra$count = function (predicate) {
	return A2(
		_elm_lang$core$List$foldl,
		F2(
			function (x, acc) {
				return predicate(x) ? (acc + 1) : acc;
			}),
		0);
};
var _elm_community$list_extra$List_Extra$findIndices = function (predicate) {
	var consIndexIf = F3(
		function (index, x, acc) {
			return predicate(x) ? {ctor: '::', _0: index, _1: acc} : acc;
		});
	return A2(
		_elm_community$list_extra$List_Extra$indexedFoldr,
		consIndexIf,
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			var _p68 = list;
			if (_p68.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (predicate(_p68._0)) {
					return _elm_lang$core$Maybe$Just(index);
				} else {
					var _v58 = index + 1,
						_v59 = predicate,
						_v60 = _p68._1;
					index = _v58;
					predicate = _v59;
					list = _v60;
					continue findIndexHelp;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$findIndex = _elm_community$list_extra$List_Extra$findIndexHelp(0);
var _elm_community$list_extra$List_Extra$splitWhen = F2(
	function (predicate, list) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (i) {
				return A2(_elm_community$list_extra$List_Extra$splitAt, i, list);
			},
			A2(_elm_community$list_extra$List_Extra$findIndex, predicate, list));
	});
var _elm_community$list_extra$List_Extra$elemIndices = function (x) {
	return _elm_community$list_extra$List_Extra$findIndices(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$elemIndex = function (x) {
	return _elm_community$list_extra$List_Extra$findIndex(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(x));
};
var _elm_community$list_extra$List_Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			var _p69 = list;
			if (_p69.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p70 = _p69._0;
				if (predicate(_p70)) {
					return _elm_lang$core$Maybe$Just(_p70);
				} else {
					var _v62 = predicate,
						_v63 = _p69._1;
					predicate = _v62;
					list = _v63;
					continue find;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$notMember = function (x) {
	return function (_p71) {
		return !A2(_elm_lang$core$List$member, x, _p71);
	};
};
var _elm_community$list_extra$List_Extra$reverseMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_community$list_extra$List_Extra$andThen = _elm_lang$core$List$concatMap;
var _elm_community$list_extra$List_Extra$lift2 = F3(
	function (f, la, lb) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return {
							ctor: '::',
							_0: A2(f, a, b),
							_1: {ctor: '[]'}
						};
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$cartesianProduct = function (ll) {
	var _p72 = ll;
	if (_p72.ctor === '[]') {
		return {
			ctor: '::',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		return A3(
			_elm_community$list_extra$List_Extra$lift2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p72._0,
			_elm_community$list_extra$List_Extra$cartesianProduct(_p72._1));
	}
};
var _elm_community$list_extra$List_Extra$lift3 = F4(
	function (f, la, lb, lc) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return {
									ctor: '::',
									_0: A3(f, a, b, c),
									_1: {ctor: '[]'}
								};
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$lift4 = F5(
	function (f, la, lb, lc, ld) {
		return A2(
			_elm_community$list_extra$List_Extra$andThen,
			function (a) {
				return A2(
					_elm_community$list_extra$List_Extra$andThen,
					function (b) {
						return A2(
							_elm_community$list_extra$List_Extra$andThen,
							function (c) {
								return A2(
									_elm_community$list_extra$List_Extra$andThen,
									function (d) {
										return {
											ctor: '::',
											_0: A4(f, a, b, c, d),
											_1: {ctor: '[]'}
										};
									},
									ld);
							},
							lc);
					},
					lb);
			},
			la);
	});
var _elm_community$list_extra$List_Extra$andMap = F2(
	function (l, fl) {
		return A3(
			_elm_lang$core$List$map2,
			F2(
				function (x, y) {
					return x(y);
				}),
			fl,
			l);
	});
var _elm_community$list_extra$List_Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			var _p73 = remaining;
			if (_p73.ctor === '[]') {
				return _elm_lang$core$List$reverse(accumulator);
			} else {
				var _p75 = _p73._1;
				var _p74 = _p73._0;
				var computedFirst = f(_p74);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v66 = f,
						_v67 = existing,
						_v68 = _p75,
						_v69 = accumulator;
					f = _v66;
					existing = _v67;
					remaining = _v68;
					accumulator = _v69;
					continue uniqueHelp;
				} else {
					var _v70 = f,
						_v71 = A2(_elm_lang$core$Set$insert, computedFirst, existing),
						_v72 = _p75,
						_v73 = {ctor: '::', _0: _p74, _1: accumulator};
					f = _v70;
					existing = _v71;
					remaining = _v72;
					accumulator = _v73;
					continue uniqueHelp;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$uniqueBy = F2(
	function (f, list) {
		return A4(
			_elm_community$list_extra$List_Extra$uniqueHelp,
			f,
			_elm_lang$core$Set$empty,
			list,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$allDifferentBy = F2(
	function (f, list) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(list),
			_elm_lang$core$List$length(
				A2(_elm_community$list_extra$List_Extra$uniqueBy, f, list)));
	});
var _elm_community$list_extra$List_Extra$allDifferent = function (list) {
	return A2(_elm_community$list_extra$List_Extra$allDifferentBy, _elm_lang$core$Basics$identity, list);
};
var _elm_community$list_extra$List_Extra$unique = function (list) {
	return A4(
		_elm_community$list_extra$List_Extra$uniqueHelp,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Set$empty,
		list,
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			var _p76 = list;
			if (_p76.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				if (predicate(_p76._0)) {
					var _v75 = predicate,
						_v76 = _p76._1;
					predicate = _v75;
					list = _v76;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				var _p77 = list;
				if (_p77.ctor === '[]') {
					return _elm_lang$core$List$reverse(memo);
				} else {
					var _p78 = _p77._0;
					if (predicate(_p78)) {
						var _v78 = {ctor: '::', _0: _p78, _1: memo},
							_v79 = _p77._1;
						memo = _v78;
						list = _v79;
						continue takeWhileMemo;
					} else {
						return _elm_lang$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(
		{ctor: '[]'});
};
var _elm_community$list_extra$List_Extra$span = F2(
	function (p, xs) {
		return {
			ctor: '_Tuple2',
			_0: A2(_elm_community$list_extra$List_Extra$takeWhile, p, xs),
			_1: A2(_elm_community$list_extra$List_Extra$dropWhile, p, xs)
		};
	});
var _elm_community$list_extra$List_Extra$break = function (p) {
	return _elm_community$list_extra$List_Extra$span(
		function (_p79) {
			return !p(_p79);
		});
};
var _elm_community$list_extra$List_Extra$groupWhile = F2(
	function (eq, xs_) {
		var _p80 = xs_;
		if (_p80.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var _p82 = _p80._0;
			var _p81 = A2(
				_elm_community$list_extra$List_Extra$span,
				eq(_p82),
				_p80._1);
			var ys = _p81._0;
			var zs = _p81._1;
			return {
				ctor: '::',
				_0: {ctor: '::', _0: _p82, _1: ys},
				_1: A2(_elm_community$list_extra$List_Extra$groupWhile, eq, zs)
			};
		}
	});
var _elm_community$list_extra$List_Extra$group = _elm_community$list_extra$List_Extra$groupWhile(
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$list_extra$List_Extra$minimumBy = F2(
	function (f, ls) {
		var minBy = F2(
			function (x, _p83) {
				var _p84 = _p83;
				var _p85 = _p84._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p85) < 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p84._0, _1: _p85};
			});
		var _p86 = ls;
		if (_p86.ctor === '::') {
			if (_p86._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p86._0);
			} else {
				var _p87 = _p86._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							minBy,
							{
								ctor: '_Tuple2',
								_0: _p87,
								_1: f(_p87)
							},
							_p86._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$maximumBy = F2(
	function (f, ls) {
		var maxBy = F2(
			function (x, _p88) {
				var _p89 = _p88;
				var _p90 = _p89._1;
				var fx = f(x);
				return (_elm_lang$core$Native_Utils.cmp(fx, _p90) > 0) ? {ctor: '_Tuple2', _0: x, _1: fx} : {ctor: '_Tuple2', _0: _p89._0, _1: _p90};
			});
		var _p91 = ls;
		if (_p91.ctor === '::') {
			if (_p91._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p91._0);
			} else {
				var _p92 = _p91._0;
				return _elm_lang$core$Maybe$Just(
					_elm_lang$core$Tuple$first(
						A3(
							_elm_lang$core$List$foldl,
							maxBy,
							{
								ctor: '_Tuple2',
								_0: _p92,
								_1: f(_p92)
							},
							_p91._1)));
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_community$list_extra$List_Extra$uncons = function (xs) {
	var _p93 = xs;
	if (_p93.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{ctor: '_Tuple2', _0: _p93._0, _1: _p93._1});
	}
};
var _elm_community$list_extra$List_Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(index1, index2) || (_elm_lang$core$Native_Utils.cmp(index1, 0) < 0)) {
				return l;
			} else {
				if (_elm_lang$core$Native_Utils.cmp(index1, index2) > 0) {
					var _v86 = index2,
						_v87 = index1,
						_v88 = l;
					index1 = _v86;
					index2 = _v87;
					l = _v88;
					continue swapAt;
				} else {
					var _p94 = A2(_elm_community$list_extra$List_Extra$splitAt, index1, l);
					var part1 = _p94._0;
					var tail1 = _p94._1;
					var _p95 = A2(_elm_community$list_extra$List_Extra$splitAt, index2 - index1, tail1);
					var head2 = _p95._0;
					var tail2 = _p95._1;
					var _p96 = {
						ctor: '_Tuple2',
						_0: _elm_community$list_extra$List_Extra$uncons(head2),
						_1: _elm_community$list_extra$List_Extra$uncons(tail2)
					};
					if (((((_p96.ctor === '_Tuple2') && (_p96._0.ctor === 'Just')) && (_p96._0._0.ctor === '_Tuple2')) && (_p96._1.ctor === 'Just')) && (_p96._1._0.ctor === '_Tuple2')) {
						return _elm_lang$core$List$concat(
							{
								ctor: '::',
								_0: part1,
								_1: {
									ctor: '::',
									_0: {ctor: '::', _0: _p96._1._0._0, _1: _p96._0._0._1},
									_1: {
										ctor: '::',
										_0: {ctor: '::', _0: _p96._0._0._0, _1: _p96._1._0._1},
										_1: {ctor: '[]'}
									}
								}
							});
					} else {
						return l;
					}
				}
			}
		}
	});
var _elm_community$list_extra$List_Extra$cycleHelp = F3(
	function (acc, n, list) {
		cycleHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) > 0) {
				var _v90 = A2(_elm_community$list_extra$List_Extra$reverseAppend, list, acc),
					_v91 = n - 1,
					_v92 = list;
				acc = _v90;
				n = _v91;
				list = _v92;
				continue cycleHelp;
			} else {
				return acc;
			}
		}
	});
var _elm_community$list_extra$List_Extra$cycle = F2(
	function (len, list) {
		var cycleLength = _elm_lang$core$List$length(list);
		return (_elm_lang$core$Native_Utils.eq(cycleLength, 0) || _elm_lang$core$Native_Utils.eq(cycleLength, len)) ? list : ((_elm_lang$core$Native_Utils.cmp(cycleLength, len) < 0) ? _elm_lang$core$List$reverse(
			A2(
				_elm_community$list_extra$List_Extra$reverseAppend,
				A2(
					_elm_lang$core$List$take,
					A2(_elm_lang$core$Basics$rem, len, cycleLength),
					list),
				A3(
					_elm_community$list_extra$List_Extra$cycleHelp,
					{ctor: '[]'},
					(len / cycleLength) | 0,
					list))) : A2(_elm_lang$core$List$take, len, list));
	});
var _elm_community$list_extra$List_Extra$initialize = F2(
	function (n, f) {
		var step = F2(
			function (i, acc) {
				step:
				while (true) {
					if (_elm_lang$core$Native_Utils.cmp(i, 0) < 0) {
						return acc;
					} else {
						var _v93 = i - 1,
							_v94 = {
							ctor: '::',
							_0: f(i),
							_1: acc
						};
						i = _v93;
						acc = _v94;
						continue step;
					}
				}
			});
		return A2(
			step,
			n - 1,
			{ctor: '[]'});
	});
var _elm_community$list_extra$List_Extra$iterate = F2(
	function (f, x) {
		var _p97 = f(x);
		if (_p97.ctor === 'Just') {
			return {
				ctor: '::',
				_0: x,
				_1: A2(_elm_community$list_extra$List_Extra$iterate, f, _p97._0)
			};
		} else {
			return {
				ctor: '::',
				_0: x,
				_1: {ctor: '[]'}
			};
		}
	});
var _elm_community$list_extra$List_Extra$getAt = F2(
	function (idx, xs) {
		return (_elm_lang$core$Native_Utils.cmp(idx, 0) < 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, idx, xs));
	});
var _elm_community$list_extra$List_Extra_ops = _elm_community$list_extra$List_Extra_ops || {};
_elm_community$list_extra$List_Extra_ops['!!'] = _elm_lang$core$Basics$flip(_elm_community$list_extra$List_Extra$getAt);
var _elm_community$list_extra$List_Extra$init = function (items) {
	var _p98 = items;
	if (_p98.ctor === '[]') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$List$reverse,
			_elm_lang$core$List$tail(
				_elm_lang$core$List$reverse(_p98)));
	}
};
var _elm_community$list_extra$List_Extra$last = function (items) {
	last:
	while (true) {
		var _p99 = items;
		if (_p99.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p99._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p99._0);
			} else {
				var _v98 = _p99._1;
				items = _v98;
				continue last;
			}
		}
	}
};

var _jschomay$elm_bounded_number$Number_Bounded$maxBound = function (_p0) {
	var _p1 = _p0;
	return _p1._0.max;
};
var _jschomay$elm_bounded_number$Number_Bounded$minBound = function (_p2) {
	var _p3 = _p2;
	return _p3._0.min;
};
var _jschomay$elm_bounded_number$Number_Bounded$value = function (_p4) {
	var _p5 = _p4;
	return _p5._0.value;
};
var _jschomay$elm_bounded_number$Number_Bounded$Bounded = function (a) {
	return {ctor: 'Bounded', _0: a};
};
var _jschomay$elm_bounded_number$Number_Bounded$between = F2(
	function (a, b) {
		return (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? _jschomay$elm_bounded_number$Number_Bounded$Bounded(
			{min: a, max: b, value: a}) : _jschomay$elm_bounded_number$Number_Bounded$Bounded(
			{min: b, max: a, value: b});
	});
var _jschomay$elm_bounded_number$Number_Bounded$set = F2(
	function (value, _p6) {
		var _p7 = _p6;
		var _p9 = _p7._0.min;
		var _p8 = _p7._0.max;
		return _jschomay$elm_bounded_number$Number_Bounded$Bounded(
			{
				min: _p9,
				max: _p8,
				value: A2(
					_elm_lang$core$Basics$max,
					_p9,
					A2(_elm_lang$core$Basics$min, _p8, value))
			});
	});
var _jschomay$elm_bounded_number$Number_Bounded$inc = F2(
	function (by, _p10) {
		var _p11 = _p10;
		var _p12 = _p11._0.max;
		return _jschomay$elm_bounded_number$Number_Bounded$Bounded(
			{
				min: _p11._0.min,
				max: _p12,
				value: A2(_elm_lang$core$Basics$min, _p12, _p11._0.value + by)
			});
	});
var _jschomay$elm_bounded_number$Number_Bounded$dec = F2(
	function (by, _p13) {
		var _p14 = _p13;
		var _p15 = _p14._0.min;
		return _jschomay$elm_bounded_number$Number_Bounded$Bounded(
			{
				min: _p15,
				max: _p14._0.max,
				value: A2(_elm_lang$core$Basics$max, _p15, _p14._0.value - by)
			});
	});

var _jschomay$elm_paginate$Paginate_Custom$pager = F2(
	function (f, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._0.currentPage;
		return A2(
			_elm_lang$core$List$map,
			function (i) {
				return A2(
					f,
					i,
					_elm_lang$core$Native_Utils.eq(
						i,
						_jschomay$elm_bounded_number$Number_Bounded$value(_p2)));
			},
			A2(
				_elm_lang$core$List$range,
				1,
				_jschomay$elm_bounded_number$Number_Bounded$maxBound(_p2)));
	});
var _jschomay$elm_paginate$Paginate_Custom$page = F2(
	function (sliceFn, _p3) {
		var _p4 = _p3;
		var _p5 = _p4._0.itemsPerPage;
		var from = (_jschomay$elm_bounded_number$Number_Bounded$value(_p4._0.currentPage) - 1) * _p5;
		var to = from + _p5;
		return A3(sliceFn, from, to, _p4._0.items);
	});
var _jschomay$elm_paginate$Paginate_Custom$foldMap = F2(
	function (f, _p6) {
		var _p7 = _p6;
		return f(_p7._0.items);
	});
var _jschomay$elm_paginate$Paginate_Custom$totalPages = function (_p8) {
	var _p9 = _p8;
	return _jschomay$elm_bounded_number$Number_Bounded$maxBound(_p9._0.currentPage);
};
var _jschomay$elm_paginate$Paginate_Custom$itemsPerPage = function (_p10) {
	var _p11 = _p10;
	return _p11._0.itemsPerPage;
};
var _jschomay$elm_paginate$Paginate_Custom$currentPage = function (_p12) {
	var _p13 = _p12;
	return _jschomay$elm_bounded_number$Number_Bounded$value(_p13._0.currentPage);
};
var _jschomay$elm_paginate$Paginate_Custom$isLast = function (_p14) {
	var _p15 = _p14;
	var _p16 = _p15._0.currentPage;
	return _elm_lang$core$Native_Utils.eq(
		_jschomay$elm_bounded_number$Number_Bounded$value(_p16),
		_jschomay$elm_bounded_number$Number_Bounded$maxBound(_p16));
};
var _jschomay$elm_paginate$Paginate_Custom$isFirst = function (_p17) {
	var _p18 = _p17;
	return _elm_lang$core$Native_Utils.eq(
		_jschomay$elm_bounded_number$Number_Bounded$value(_p18._0.currentPage),
		1);
};
var _jschomay$elm_paginate$Paginate_Custom$Paginated = function (a) {
	return {ctor: 'Paginated', _0: a};
};
var _jschomay$elm_paginate$Paginate_Custom$init = F3(
	function (lengthFn, itemsPerPage, items) {
		var max = _elm_lang$core$Native_Utils.eq(
			lengthFn(items),
			0) ? 1 : _elm_lang$core$Basics$ceiling(
			_elm_lang$core$Basics$toFloat(
				lengthFn(items)) / _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, 1, itemsPerPage)));
		return _jschomay$elm_paginate$Paginate_Custom$Paginated(
			{
				itemsPerPage: A2(_elm_lang$core$Basics$max, 1, itemsPerPage),
				currentPage: A2(_jschomay$elm_bounded_number$Number_Bounded$between, 1, max),
				items: items
			});
	});
var _jschomay$elm_paginate$Paginate_Custom$goTo = F2(
	function (i, _p19) {
		var _p20 = _p19;
		var _p21 = _p20._0;
		return _jschomay$elm_paginate$Paginate_Custom$Paginated(
			_elm_lang$core$Native_Utils.update(
				_p21,
				{
					currentPage: A2(_jschomay$elm_bounded_number$Number_Bounded$set, i, _p21.currentPage)
				}));
	});
var _jschomay$elm_paginate$Paginate_Custom$map = F3(
	function (lengthFn, f, _p22) {
		var _p23 = _p22;
		return A2(
			_jschomay$elm_paginate$Paginate_Custom$goTo,
			_jschomay$elm_bounded_number$Number_Bounded$value(_p23._0.currentPage),
			A3(
				_jschomay$elm_paginate$Paginate_Custom$init,
				lengthFn,
				_p23._0.itemsPerPage,
				f(_p23._0.items)));
	});
var _jschomay$elm_paginate$Paginate_Custom$changeItemsPerPage = F3(
	function (lengthFn, newItemsPerPage, _p24) {
		var _p25 = _p24;
		return A2(
			_jschomay$elm_paginate$Paginate_Custom$goTo,
			_jschomay$elm_bounded_number$Number_Bounded$value(_p25._0.currentPage),
			A3(_jschomay$elm_paginate$Paginate_Custom$init, lengthFn, newItemsPerPage, _p25._0.items));
	});
var _jschomay$elm_paginate$Paginate_Custom$first = function (paginatedList) {
	return A2(_jschomay$elm_paginate$Paginate_Custom$goTo, 1, paginatedList);
};
var _jschomay$elm_paginate$Paginate_Custom$last = function (paginatedList) {
	return A2(
		_jschomay$elm_paginate$Paginate_Custom$goTo,
		_jschomay$elm_paginate$Paginate_Custom$totalPages(paginatedList),
		paginatedList);
};
var _jschomay$elm_paginate$Paginate_Custom$next = function (_p26) {
	var _p27 = _p26;
	var _p28 = _p27._0;
	return _jschomay$elm_paginate$Paginate_Custom$Paginated(
		_elm_lang$core$Native_Utils.update(
			_p28,
			{
				currentPage: A2(_jschomay$elm_bounded_number$Number_Bounded$inc, 1, _p28.currentPage)
			}));
};
var _jschomay$elm_paginate$Paginate_Custom$prev = function (_p29) {
	var _p30 = _p29;
	var _p31 = _p30._0;
	return _jschomay$elm_paginate$Paginate_Custom$Paginated(
		_elm_lang$core$Native_Utils.update(
			_p31,
			{
				currentPage: A2(_jschomay$elm_bounded_number$Number_Bounded$dec, 1, _p31.currentPage)
			}));
};

var _jschomay$elm_paginate$Paginate$pager = _jschomay$elm_paginate$Paginate_Custom$pager;
var _jschomay$elm_paginate$Paginate$page = _jschomay$elm_paginate$Paginate_Custom$page(
	F2(
		function (from, to) {
			return function (_p0) {
				return A2(
					_elm_lang$core$List$take,
					to - from,
					A2(_elm_lang$core$List$drop, from, _p0));
			};
		}));
var _jschomay$elm_paginate$Paginate$foldMap = _jschomay$elm_paginate$Paginate_Custom$foldMap;
var _jschomay$elm_paginate$Paginate$allItems = _jschomay$elm_paginate$Paginate_Custom$foldMap(_elm_lang$core$Basics$identity);
var _jschomay$elm_paginate$Paginate$totalPages = _jschomay$elm_paginate$Paginate_Custom$totalPages;
var _jschomay$elm_paginate$Paginate$itemsPerPage = _jschomay$elm_paginate$Paginate_Custom$itemsPerPage;
var _jschomay$elm_paginate$Paginate$currentPage = _jschomay$elm_paginate$Paginate_Custom$currentPage;
var _jschomay$elm_paginate$Paginate$length = _jschomay$elm_paginate$Paginate_Custom$foldMap(_elm_lang$core$List$length);
var _jschomay$elm_paginate$Paginate$isLast = _jschomay$elm_paginate$Paginate_Custom$isLast;
var _jschomay$elm_paginate$Paginate$isFirst = _jschomay$elm_paginate$Paginate_Custom$isFirst;
var _jschomay$elm_paginate$Paginate$last = _jschomay$elm_paginate$Paginate_Custom$last;
var _jschomay$elm_paginate$Paginate$first = _jschomay$elm_paginate$Paginate_Custom$first;
var _jschomay$elm_paginate$Paginate$prev = _jschomay$elm_paginate$Paginate_Custom$prev;
var _jschomay$elm_paginate$Paginate$next = _jschomay$elm_paginate$Paginate_Custom$next;
var _jschomay$elm_paginate$Paginate$goTo = _jschomay$elm_paginate$Paginate_Custom$goTo;
var _jschomay$elm_paginate$Paginate$changeItemsPerPage = _jschomay$elm_paginate$Paginate_Custom$changeItemsPerPage(_elm_lang$core$List$length);
var _jschomay$elm_paginate$Paginate$map = _jschomay$elm_paginate$Paginate_Custom$map(_elm_lang$core$List$length);
var _jschomay$elm_paginate$Paginate$fromList = F2(
	function (a, b) {
		return A3(_jschomay$elm_paginate$Paginate_Custom$init, _elm_lang$core$List$length, a, b);
	});

var _Giga_dev$newman$Utils_Types$decodeStatus = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'status',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$string);
var _Giga_dev$newman$Utils_Types$encodeListOfStrings = function (lst) {
	return _elm_lang$core$Json_Encode$list(
		A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, lst));
};
var _Giga_dev$newman$Utils_Types$testStatusToString = function (ts) {
	var _p0 = ts;
	switch (_p0.ctor) {
		case 'TEST_RUNNING':
			return 'Running';
		case 'TEST_SUCCESS':
			return 'Success';
		case 'TEST_FAIL':
			return 'Fail';
		default:
			return 'Pending';
	}
};
var _Giga_dev$newman$Utils_Types$decodeAgentGroups = _elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string);
var _Giga_dev$newman$Utils_Types$jobStateToString = function (jState) {
	var _p1 = jState;
	switch (_p1.ctor) {
		case 'READY':
			return 'Ready';
		case 'RUNNING':
			return 'RUNNING';
		case 'DONE':
			return 'DONE';
		case 'PAUSED':
			return 'PAUSED';
		default:
			return 'BROKEN';
	}
};
var _Giga_dev$newman$Utils_Types$radioStateToString = function (state) {
	var _p2 = state;
	switch (_p2.ctor) {
		case 'STATUS_RUNNING':
			return 'RUNNING';
		case 'STATUS_SUCCESS':
			return 'SUCCESS';
		case 'STATUS_FAIL':
			return 'FAIL';
		case 'STATUS_FAILED3TIMES':
			return 'FAILED3TIMES';
		default:
			return 'ALL';
	}
};
var _Giga_dev$newman$Utils_Types$Job = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return {id: a, submitTime: b, submittedBy: c, state: d, preparingAgents: e, agents: f, agentGroups: g, buildId: h, buildName: i, buildBranch: j, suiteId: k, suiteName: l, jobConfigId: m, jobConfigName: n, totalTests: o, failedTests: p, failed3TimesTests: q, passedTests: r, runningTests: s, numOfTestRetries: t, startTime: u, endTime: v, jobSetupLogs: w};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Utils_Types$Build = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {id: a, name: b, branch: c, tags: d, buildTime: e, buildStatus: f, resources: g, testsMetadata: h, shas: i};
	});
var _Giga_dev$newman$Utils_Types$Agent = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {id: a, name: b, host: c, hostAddress: d, lastTouchTime: e, currentTests: f, state: g, capabilities: h, pid: i, setupRetries: j, jobId: k, buildName: l, suiteName: m, groupName: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Utils_Types$decodeAgent = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'groupName',
	_elm_lang$core$Json_Decode$string,
	'undefined',
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt,
		{
			ctor: '::',
			_0: 'job',
			_1: {
				ctor: '::',
				_0: 'suite',
				_1: {
					ctor: '::',
					_0: 'name',
					_1: {ctor: '[]'}
				}
			}
		},
		_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt,
			{
				ctor: '::',
				_0: 'job',
				_1: {
					ctor: '::',
					_0: 'build',
					_1: {
						ctor: '::',
						_0: 'name',
						_1: {ctor: '[]'}
					}
				}
			},
			_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
			_elm_lang$core$Maybe$Nothing,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt,
				{
					ctor: '::',
					_0: 'job',
					_1: {
						ctor: '::',
						_0: 'id',
						_1: {ctor: '[]'}
					}
				},
				_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string),
				_elm_lang$core$Maybe$Nothing,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'setupRetries',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'pid',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'capabilities',
							_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'state',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'currentTests',
									_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'lastTouchTime',
										_elm_lang$core$Json_Decode$int,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'hostAddress',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'host',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'name',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'id',
														_elm_lang$core$Json_Decode$string,
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Agent)))))))))))))));
var _Giga_dev$newman$Utils_Types$decodeAgents = A2(
	_elm_lang$core$Json_Decode$field,
	'values',
	_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeAgent));
var _Giga_dev$newman$Utils_Types$decodeAgentList = _elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeAgent);
var _Giga_dev$newman$Utils_Types$Suite = F3(
	function (a, b, c) {
		return {id: a, name: b, customVariables: c};
	});
var _Giga_dev$newman$Utils_Types$decodeSuite = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'customVariables',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'name',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'id',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Suite))));
var _Giga_dev$newman$Utils_Types$decodeSuites = A2(
	_elm_lang$core$Json_Decode$field,
	'values',
	_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeSuite));
var _Giga_dev$newman$Utils_Types$SuiteWithCriteria = F5(
	function (a, b, c, d, e) {
		return {id: a, name: b, customVariables: c, requirements: d, criteria: e};
	});
var _Giga_dev$newman$Utils_Types$decodeSuiteWithCriteria = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'criteria',
	A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Json_Encode$encode(4),
		_elm_lang$core$Json_Decode$value),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'requirements',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'customVariables',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'name',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'id',
					_elm_lang$core$Json_Decode$string,
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$SuiteWithCriteria))))));
var _Giga_dev$newman$Utils_Types$JobConfig = F3(
	function (a, b, c) {
		return {id: a, name: b, javaVersion: c};
	});
var _Giga_dev$newman$Utils_Types$decodeJobConfig = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'javaVersion',
	_elm_lang$core$Json_Decode$string,
	'N/A',
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'name',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'id',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$JobConfig))));
var _Giga_dev$newman$Utils_Types$decodeJobConfigs = _elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeJobConfig);
var _Giga_dev$newman$Utils_Types$User = function (a) {
	return {userName: a};
};
var _Giga_dev$newman$Utils_Types$decodeUser = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'userName',
	_elm_lang$core$Json_Decode$string,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$User));
var _Giga_dev$newman$Utils_Types$TestHistoryItem = F2(
	function (a, b) {
		return {test: a, job: b};
	});
var _Giga_dev$newman$Utils_Types$TestHistoryTestView = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {id: a, jobId: b, name: c, $arguments: d, status: e, errorMessage: f, startTime: g, endTime: h, runNumber: i, assignedAgent: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Utils_Types$decodeTestHistoryTestView = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'assignedAgent',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'runNumber',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'endTime',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'startTime',
				_elm_lang$core$Json_Decode$int,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'errorMessage',
					_elm_lang$core$Json_Decode$string,
					'',
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'status',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'arguments',
							_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'name',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'jobId',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'id',
										_elm_lang$core$Json_Decode$string,
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$TestHistoryTestView)))))))))));
var _Giga_dev$newman$Utils_Types$TestHistoryJobView = F6(
	function (a, b, c, d, e, f) {
		return {id: a, buildId: b, buildName: c, buildBranch: d, jobConfigName: e, jobConfigId: f};
	});
var _Giga_dev$newman$Utils_Types$decodeTestHistoryJobView = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'jobConfigId',
	_elm_lang$core$Json_Decode$string,
	'',
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'jobConfigName',
		_elm_lang$core$Json_Decode$string,
		'',
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'buildBranch',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'buildName',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'buildId',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'id',
						_elm_lang$core$Json_Decode$string,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$TestHistoryJobView)))))));
var _Giga_dev$newman$Utils_Types$decodeTestHistoryItem = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'job',
	_Giga_dev$newman$Utils_Types$decodeTestHistoryJobView,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'test',
		_Giga_dev$newman$Utils_Types$decodeTestHistoryTestView,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$TestHistoryItem)));
var _Giga_dev$newman$Utils_Types$decodeTestHistoryItems = A2(
	_elm_lang$core$Json_Decode$field,
	'values',
	_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeTestHistoryItem));
var _Giga_dev$newman$Utils_Types$DashboardJob = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {id: a, suiteId: b, suiteName: c, totalTests: d, failedTests: e, failed3TimesTests: f, passedTests: g, runningTests: h, numOfTestRetries: i};
	});
var _Giga_dev$newman$Utils_Types$decodeDashboardJob = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'numOfTestRetries',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'runningTests',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'passedTests',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'failed3TimesTests',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'failedTests',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'totalTests',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
							{
								ctor: '::',
								_0: 'suite',
								_1: {
									ctor: '::',
									_0: 'name',
									_1: {ctor: '[]'}
								}
							},
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
								{
									ctor: '::',
									_0: 'suite',
									_1: {
										ctor: '::',
										_0: 'id',
										_1: {ctor: '[]'}
									}
								},
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$string,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$DashboardJob))))))))));
var _Giga_dev$newman$Utils_Types$DashboardData = F5(
	function (a, b, c, d, e) {
		return {historyBuilds: a, futureJobs: b, pendingBuilds: c, activeBuilds: d, activeJobs: e};
	});
var _Giga_dev$newman$Utils_Types$FutureJob = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {id: a, buildId: b, buildName: c, buildBranch: d, suiteId: e, suiteName: f, author: g, agentGroups: h, submitTime: i};
	});
var _Giga_dev$newman$Utils_Types$decodeFutureJob = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'submitTime',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'agentGroups',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'author',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'suiteName',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'suiteID',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'buildBranch',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'buildName',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'buildID',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$string,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$FutureJob))))))))));
var _Giga_dev$newman$Utils_Types$DashboardBuildStatus = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {totalTests: a, passedTests: b, failedTests: c, failed3TimesTests: d, runningTests: e, numOfTestRetries: f, totalJobs: g, pendingJobs: h, runningJobs: i, doneJobs: j, brokenJobs: k, suitesNames: l, suitesIds: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Utils_Types$decodeDashboardBuildStatus = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'suitesIds',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'suitesNames',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'brokenJobs',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'doneJobs',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'runningJobs',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'pendingJobs',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'totalJobs',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'runningTests',
								_elm_lang$core$Json_Decode$int,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'numOfTestRetries',
									_elm_lang$core$Json_Decode$int,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'failed3TimesTests',
										_elm_lang$core$Json_Decode$int,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'failedTests',
											_elm_lang$core$Json_Decode$int,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'passedTests',
												_elm_lang$core$Json_Decode$int,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'totalTests',
													_elm_lang$core$Json_Decode$int,
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$DashboardBuildStatus))))))))))))));
var _Giga_dev$newman$Utils_Types$decodeBuild = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'shas',
	_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'testsMetadata',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'resources',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'buildStatus',
				_Giga_dev$newman$Utils_Types$decodeDashboardBuildStatus,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'buildTime',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'tags',
						_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'branch',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'name',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$string,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Build))))))))));
var _Giga_dev$newman$Utils_Types$decodeDashboardData = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'activeJobs',
	_elm_lang$core$Json_Decode$dict(
		_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeDashboardJob)),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'activeBuilds',
		_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeBuild),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'pendingBuilds',
			_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeBuild),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'futureJobs',
				_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeFutureJob),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'historyBuilds',
					_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeBuild),
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$DashboardData))))));
var _Giga_dev$newman$Utils_Types$decodeBuilds = A2(
	_elm_lang$core$Json_Decode$field,
	'values',
	_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeBuild));
var _Giga_dev$newman$Utils_Types$Test = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return {id: a, jobId: b, name: c, $arguments: d, testType: e, timeout: f, status: g, errorMessage: h, testScore: i, historyStats: j, logs: k, assignedAgent: l, startTime: m, endTime: n, scheduledAt: o, progressPercent: p, runNumber: q};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Utils_Types$STATUS_ALL = {ctor: 'STATUS_ALL'};
var _Giga_dev$newman$Utils_Types$STATUS_FAILED3TIMES = {ctor: 'STATUS_FAILED3TIMES'};
var _Giga_dev$newman$Utils_Types$STATUS_FAIL = {ctor: 'STATUS_FAIL'};
var _Giga_dev$newman$Utils_Types$STATUS_SUCCESS = {ctor: 'STATUS_SUCCESS'};
var _Giga_dev$newman$Utils_Types$STATUS_RUNNING = {ctor: 'STATUS_RUNNING'};
var _Giga_dev$newman$Utils_Types$stringToRadioState = function (state) {
	var _p3 = state;
	switch (_p3) {
		case 'RUNNING':
			return _Giga_dev$newman$Utils_Types$STATUS_RUNNING;
		case 'SUCCESS':
			return _Giga_dev$newman$Utils_Types$STATUS_SUCCESS;
		case 'FAIL':
			return _Giga_dev$newman$Utils_Types$STATUS_FAIL;
		case 'FAILED3TIMES':
			return _Giga_dev$newman$Utils_Types$STATUS_FAILED3TIMES;
		case 'ALL':
			return _Giga_dev$newman$Utils_Types$STATUS_ALL;
		default:
			return _Giga_dev$newman$Utils_Types$STATUS_ALL;
	}
};
var _Giga_dev$newman$Utils_Types$BROKEN = {ctor: 'BROKEN'};
var _Giga_dev$newman$Utils_Types$PAUSED = {ctor: 'PAUSED'};
var _Giga_dev$newman$Utils_Types$DONE = {ctor: 'DONE'};
var _Giga_dev$newman$Utils_Types$RUNNING = {ctor: 'RUNNING'};
var _Giga_dev$newman$Utils_Types$READY = {ctor: 'READY'};
var _Giga_dev$newman$Utils_Types$decodeJobState = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p4 = str;
		switch (_p4) {
			case 'READY':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$READY);
			case 'RUNNING':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$RUNNING);
			case 'DONE':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$DONE);
			case 'PAUSED':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$PAUSED);
			case 'BROKEN':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$BROKEN);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'unknown job state: ', str));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _Giga_dev$newman$Utils_Types$decodeJob = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'jobSetupLogs',
	_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string),
	_elm_lang$core$Dict$empty,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'endTime',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'startTime',
			_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
			_elm_lang$core$Maybe$Nothing,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'numOfTestRetries',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'runningTests',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'passedTests',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'failed3TimesTests',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'failedTests',
								_elm_lang$core$Json_Decode$int,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'totalTests',
									_elm_lang$core$Json_Decode$int,
									A4(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt,
										{
											ctor: '::',
											_0: 'jobConfig',
											_1: {
												ctor: '::',
												_0: 'name',
												_1: {ctor: '[]'}
											}
										},
										_elm_lang$core$Json_Decode$string,
										'',
										A4(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optionalAt,
											{
												ctor: '::',
												_0: 'jobConfig',
												_1: {
													ctor: '::',
													_0: 'id',
													_1: {ctor: '[]'}
												}
											},
											_elm_lang$core$Json_Decode$string,
											'',
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
												{
													ctor: '::',
													_0: 'suite',
													_1: {
														ctor: '::',
														_0: 'name',
														_1: {ctor: '[]'}
													}
												},
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
													{
														ctor: '::',
														_0: 'suite',
														_1: {
															ctor: '::',
															_0: 'id',
															_1: {ctor: '[]'}
														}
													},
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
														{
															ctor: '::',
															_0: 'build',
															_1: {
																ctor: '::',
																_0: 'branch',
																_1: {ctor: '[]'}
															}
														},
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
															{
																ctor: '::',
																_0: 'build',
																_1: {
																	ctor: '::',
																	_0: 'name',
																	_1: {ctor: '[]'}
																}
															},
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$requiredAt,
																{
																	ctor: '::',
																	_0: 'build',
																	_1: {
																		ctor: '::',
																		_0: 'id',
																		_1: {ctor: '[]'}
																	}
																},
																_elm_lang$core$Json_Decode$string,
																A4(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
																	'agentGroups',
																	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
																	{ctor: '[]'},
																	A3(
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																		'agents',
																		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
																		A3(
																			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																			'preparingAgents',
																			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
																			A3(
																				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																				'state',
																				_Giga_dev$newman$Utils_Types$decodeJobState,
																				A3(
																					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																					'submittedBy',
																					_elm_lang$core$Json_Decode$string,
																					A3(
																						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																						'submitTime',
																						_elm_lang$core$Json_Decode$int,
																						A3(
																							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																							'id',
																							_elm_lang$core$Json_Decode$string,
																							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Job))))))))))))))))))))))));
var _Giga_dev$newman$Utils_Types$decodeJobList = _elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeJob);
var _Giga_dev$newman$Utils_Types$decodeJobView = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'jobSetupLogs',
	_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string),
	_elm_lang$core$Dict$empty,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'endTime',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'startTime',
			_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
			_elm_lang$core$Maybe$Nothing,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'numOfTestRetries',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'runningTests',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'passedTests',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'failed3TimesTests',
							_elm_lang$core$Json_Decode$int,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'failedTests',
								_elm_lang$core$Json_Decode$int,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'totalTests',
									_elm_lang$core$Json_Decode$int,
									A4(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
										'jobConfigName',
										_elm_lang$core$Json_Decode$string,
										'',
										A4(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
											'jobConfigId',
											_elm_lang$core$Json_Decode$string,
											'',
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'suiteName',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'suiteId',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'buildBranch',
														_elm_lang$core$Json_Decode$string,
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'buildName',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'buildId',
																_elm_lang$core$Json_Decode$string,
																A4(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
																	'agentGroups',
																	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
																	{ctor: '[]'},
																	A4(
																		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
																		'agents',
																		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
																		{ctor: '[]'},
																		A3(
																			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																			'preparingAgents',
																			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
																			A3(
																				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																				'state',
																				_Giga_dev$newman$Utils_Types$decodeJobState,
																				A3(
																					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																					'submittedBy',
																					_elm_lang$core$Json_Decode$string,
																					A3(
																						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																						'submitTime',
																						_elm_lang$core$Json_Decode$int,
																						A3(
																							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																							'id',
																							_elm_lang$core$Json_Decode$string,
																							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Job))))))))))))))))))))))));
var _Giga_dev$newman$Utils_Types$TEST_PENDING = {ctor: 'TEST_PENDING'};
var _Giga_dev$newman$Utils_Types$TEST_FAIL = {ctor: 'TEST_FAIL'};
var _Giga_dev$newman$Utils_Types$TEST_SUCCESS = {ctor: 'TEST_SUCCESS'};
var _Giga_dev$newman$Utils_Types$TEST_RUNNING = {ctor: 'TEST_RUNNING'};
var _Giga_dev$newman$Utils_Types$decodeTestStatus = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (str) {
		var _p5 = str;
		switch (_p5) {
			case 'RUNNING':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$TEST_RUNNING);
			case 'SUCCESS':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$TEST_SUCCESS);
			case 'FAIL':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$TEST_FAIL);
			case 'PENDING':
				return _elm_lang$core$Json_Decode$succeed(_Giga_dev$newman$Utils_Types$TEST_PENDING);
			default:
				return _elm_lang$core$Json_Decode$fail(
					A2(_elm_lang$core$Basics_ops['++'], 'unknown test state ', str));
		}
	},
	_elm_lang$core$Json_Decode$string);
var _Giga_dev$newman$Utils_Types$decodeTest = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'runNumber',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'progressPercent',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'scheduledAt',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'endTime',
				_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'startTime',
					_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
					A4(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
						'assignedAgent',
						_elm_lang$core$Json_Decode$string,
						'',
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'logs',
							_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string),
							A4(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
								'historyStats',
								_elm_lang$core$Json_Decode$string,
								'',
								A4(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
									'testScore',
									_elm_lang$core$Json_Decode$int,
									-1,
									A4(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
										'errorMessage',
										_elm_lang$core$Json_Decode$string,
										'',
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'status',
											_Giga_dev$newman$Utils_Types$decodeTestStatus,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'timeout',
												_elm_lang$core$Json_Decode$int,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'testType',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'arguments',
														_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'name',
															_elm_lang$core$Json_Decode$string,
															A3(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																'jobId',
																_elm_lang$core$Json_Decode$string,
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'id',
																	_elm_lang$core$Json_Decode$string,
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Test))))))))))))))))));
var _Giga_dev$newman$Utils_Types$decodeTestView = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'runNumber',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'progressPercent',
		_elm_lang$core$Json_Decode$int,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'scheduledAt',
			_elm_lang$core$Json_Decode$int,
			0,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'endTime',
				_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
				_elm_lang$core$Maybe$Nothing,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'startTime',
					_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$int),
					_elm_lang$core$Maybe$Nothing,
					A4(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
						'assignedAgent',
						_elm_lang$core$Json_Decode$string,
						'',
						A4(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
							'logs',
							_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string),
							_elm_lang$core$Dict$empty,
							A4(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
								'historyStats',
								_elm_lang$core$Json_Decode$string,
								'',
								A4(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
									'testScore',
									_elm_lang$core$Json_Decode$int,
									-1,
									A4(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
										'errorMessage',
										_elm_lang$core$Json_Decode$string,
										'',
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'status',
											_Giga_dev$newman$Utils_Types$decodeTestStatus,
											A4(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
												'timeout',
												_elm_lang$core$Json_Decode$int,
												0,
												A4(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
													'testType',
													_elm_lang$core$Json_Decode$string,
													'',
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'arguments',
														_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
														A3(
															_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
															'name',
															_elm_lang$core$Json_Decode$string,
															A4(
																_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
																'jobId',
																_elm_lang$core$Json_Decode$string,
																'',
																A3(
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
																	'id',
																	_elm_lang$core$Json_Decode$string,
																	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Utils_Types$Test))))))))))))))))));

var _elm_lang$websocket$Native_WebSocket = function() {

function open(url, settings)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			var socket = new WebSocket(url);
			socket.elm_web_socket = true;
		}
		catch(err)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({
				ctor: err.name === 'SecurityError' ? 'BadSecurity' : 'BadArgs',
				_0: err.message
			}));
		}

		socket.addEventListener("open", function(event) {
			callback(_elm_lang$core$Native_Scheduler.succeed(socket));
		});

		socket.addEventListener("message", function(event) {
			_elm_lang$core$Native_Scheduler.rawSpawn(A2(settings.onMessage, socket, event.data));
		});

		socket.addEventListener("close", function(event) {
			_elm_lang$core$Native_Scheduler.rawSpawn(settings.onClose({
				code: event.code,
				reason: event.reason,
				wasClean: event.wasClean
			}));
		});

		return function()
		{
			if (socket && socket.close)
			{
				socket.close();
			}
		};
	});
}

function send(socket, string)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var result =
			socket.readyState === WebSocket.OPEN
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just({ ctor: 'NotOpen' });

		try
		{
			socket.send(string);
		}
		catch(err)
		{
			result = _elm_lang$core$Maybe$Just({ ctor: 'BadString' });
		}

		callback(_elm_lang$core$Native_Scheduler.succeed(result));
	});
}

function close(code, reason, socket)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		try
		{
			socket.close(code, reason);
		}
		catch(err)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail(_elm_lang$core$Maybe$Just({
				ctor: err.name === 'SyntaxError' ? 'BadReason' : 'BadCode'
			})));
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Maybe$Nothing));
	});
}

function bytesQueued(socket)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		callback(_elm_lang$core$Native_Scheduler.succeed(socket.bufferedAmount));
	});
}

return {
	open: F2(open),
	send: F2(send),
	close: F3(close),
	bytesQueued: bytesQueued
};

}();

var _elm_lang$websocket$WebSocket_LowLevel$bytesQueued = _elm_lang$websocket$Native_WebSocket.bytesQueued;
var _elm_lang$websocket$WebSocket_LowLevel$send = _elm_lang$websocket$Native_WebSocket.send;
var _elm_lang$websocket$WebSocket_LowLevel$closeWith = _elm_lang$websocket$Native_WebSocket.close;
var _elm_lang$websocket$WebSocket_LowLevel$close = function (socket) {
	return A2(
		_elm_lang$core$Task$map,
		_elm_lang$core$Basics$always(
			{ctor: '_Tuple0'}),
		A3(_elm_lang$websocket$WebSocket_LowLevel$closeWith, 1000, '', socket));
};
var _elm_lang$websocket$WebSocket_LowLevel$open = _elm_lang$websocket$Native_WebSocket.open;
var _elm_lang$websocket$WebSocket_LowLevel$Settings = F2(
	function (a, b) {
		return {onMessage: a, onClose: b};
	});
var _elm_lang$websocket$WebSocket_LowLevel$WebSocket = {ctor: 'WebSocket'};
var _elm_lang$websocket$WebSocket_LowLevel$BadArgs = {ctor: 'BadArgs'};
var _elm_lang$websocket$WebSocket_LowLevel$BadSecurity = {ctor: 'BadSecurity'};
var _elm_lang$websocket$WebSocket_LowLevel$BadReason = {ctor: 'BadReason'};
var _elm_lang$websocket$WebSocket_LowLevel$BadCode = {ctor: 'BadCode'};
var _elm_lang$websocket$WebSocket_LowLevel$BadString = {ctor: 'BadString'};
var _elm_lang$websocket$WebSocket_LowLevel$NotOpen = {ctor: 'NotOpen'};

var _elm_lang$websocket$WebSocket$closeConnection = function (connection) {
	var _p0 = connection;
	if (_p0.ctor === 'Opening') {
		return _elm_lang$core$Process$kill(_p0._1);
	} else {
		return _elm_lang$websocket$WebSocket_LowLevel$close(_p0._0);
	}
};
var _elm_lang$websocket$WebSocket$after = function (backoff) {
	return (_elm_lang$core$Native_Utils.cmp(backoff, 1) < 0) ? _elm_lang$core$Task$succeed(
		{ctor: '_Tuple0'}) : _elm_lang$core$Process$sleep(
		_elm_lang$core$Basics$toFloat(
			10 * Math.pow(2, backoff)));
};
var _elm_lang$websocket$WebSocket$removeQueue = F2(
	function (name, state) {
		return _elm_lang$core$Native_Utils.update(
			state,
			{
				queues: A2(_elm_lang$core$Dict$remove, name, state.queues)
			});
	});
var _elm_lang$websocket$WebSocket$updateSocket = F3(
	function (name, connection, state) {
		return _elm_lang$core$Native_Utils.update(
			state,
			{
				sockets: A3(_elm_lang$core$Dict$insert, name, connection, state.sockets)
			});
	});
var _elm_lang$websocket$WebSocket$add = F2(
	function (value, maybeList) {
		var _p1 = maybeList;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p1._0});
		}
	});
var _elm_lang$websocket$WebSocket$buildSubDict = F2(
	function (subs, dict) {
		buildSubDict:
		while (true) {
			var _p2 = subs;
			if (_p2.ctor === '[]') {
				return dict;
			} else {
				if (_p2._0.ctor === 'Listen') {
					var _v3 = _p2._1,
						_v4 = A3(
						_elm_lang$core$Dict$update,
						_p2._0._0,
						_elm_lang$websocket$WebSocket$add(_p2._0._1),
						dict);
					subs = _v3;
					dict = _v4;
					continue buildSubDict;
				} else {
					var _v5 = _p2._1,
						_v6 = A3(
						_elm_lang$core$Dict$update,
						_p2._0._0,
						function (_p3) {
							return _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Maybe$withDefault,
									{ctor: '[]'},
									_p3));
						},
						dict);
					subs = _v5;
					dict = _v6;
					continue buildSubDict;
				}
			}
		}
	});
var _elm_lang$websocket$WebSocket_ops = _elm_lang$websocket$WebSocket_ops || {};
_elm_lang$websocket$WebSocket_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return t2;
			},
			t1);
	});
var _elm_lang$websocket$WebSocket$sendMessagesHelp = F3(
	function (cmds, socketsDict, queuesDict) {
		sendMessagesHelp:
		while (true) {
			var _p5 = cmds;
			if (_p5.ctor === '[]') {
				return _elm_lang$core$Task$succeed(queuesDict);
			} else {
				var _p9 = _p5._1;
				var _p8 = _p5._0._0;
				var _p7 = _p5._0._1;
				var _p6 = A2(_elm_lang$core$Dict$get, _p8, socketsDict);
				if ((_p6.ctor === 'Just') && (_p6._0.ctor === 'Connected')) {
					return A2(
						_elm_lang$websocket$WebSocket_ops['&>'],
						A2(_elm_lang$websocket$WebSocket_LowLevel$send, _p6._0._0, _p7),
						A3(_elm_lang$websocket$WebSocket$sendMessagesHelp, _p9, socketsDict, queuesDict));
				} else {
					var _v9 = _p9,
						_v10 = socketsDict,
						_v11 = A3(
						_elm_lang$core$Dict$update,
						_p8,
						_elm_lang$websocket$WebSocket$add(_p7),
						queuesDict);
					cmds = _v9;
					socketsDict = _v10;
					queuesDict = _v11;
					continue sendMessagesHelp;
				}
			}
		}
	});
var _elm_lang$websocket$WebSocket$subscription = _elm_lang$core$Native_Platform.leaf('WebSocket');
var _elm_lang$websocket$WebSocket$command = _elm_lang$core$Native_Platform.leaf('WebSocket');
var _elm_lang$websocket$WebSocket$State = F3(
	function (a, b, c) {
		return {sockets: a, queues: b, subs: c};
	});
var _elm_lang$websocket$WebSocket$init = _elm_lang$core$Task$succeed(
	A3(_elm_lang$websocket$WebSocket$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$websocket$WebSocket$Send = F2(
	function (a, b) {
		return {ctor: 'Send', _0: a, _1: b};
	});
var _elm_lang$websocket$WebSocket$send = F2(
	function (url, message) {
		return _elm_lang$websocket$WebSocket$command(
			A2(_elm_lang$websocket$WebSocket$Send, url, message));
	});
var _elm_lang$websocket$WebSocket$cmdMap = F2(
	function (_p11, _p10) {
		var _p12 = _p10;
		return A2(_elm_lang$websocket$WebSocket$Send, _p12._0, _p12._1);
	});
var _elm_lang$websocket$WebSocket$KeepAlive = function (a) {
	return {ctor: 'KeepAlive', _0: a};
};
var _elm_lang$websocket$WebSocket$keepAlive = function (url) {
	return _elm_lang$websocket$WebSocket$subscription(
		_elm_lang$websocket$WebSocket$KeepAlive(url));
};
var _elm_lang$websocket$WebSocket$Listen = F2(
	function (a, b) {
		return {ctor: 'Listen', _0: a, _1: b};
	});
var _elm_lang$websocket$WebSocket$listen = F2(
	function (url, tagger) {
		return _elm_lang$websocket$WebSocket$subscription(
			A2(_elm_lang$websocket$WebSocket$Listen, url, tagger));
	});
var _elm_lang$websocket$WebSocket$subMap = F2(
	function (func, sub) {
		var _p13 = sub;
		if (_p13.ctor === 'Listen') {
			return A2(
				_elm_lang$websocket$WebSocket$Listen,
				_p13._0,
				function (_p14) {
					return func(
						_p13._1(_p14));
				});
		} else {
			return _elm_lang$websocket$WebSocket$KeepAlive(_p13._0);
		}
	});
var _elm_lang$websocket$WebSocket$Connected = function (a) {
	return {ctor: 'Connected', _0: a};
};
var _elm_lang$websocket$WebSocket$Opening = F2(
	function (a, b) {
		return {ctor: 'Opening', _0: a, _1: b};
	});
var _elm_lang$websocket$WebSocket$BadOpen = function (a) {
	return {ctor: 'BadOpen', _0: a};
};
var _elm_lang$websocket$WebSocket$GoodOpen = F2(
	function (a, b) {
		return {ctor: 'GoodOpen', _0: a, _1: b};
	});
var _elm_lang$websocket$WebSocket$Die = function (a) {
	return {ctor: 'Die', _0: a};
};
var _elm_lang$websocket$WebSocket$Receive = F2(
	function (a, b) {
		return {ctor: 'Receive', _0: a, _1: b};
	});
var _elm_lang$websocket$WebSocket$open = F2(
	function (name, router) {
		return A2(
			_elm_lang$websocket$WebSocket_LowLevel$open,
			name,
			{
				onMessage: F2(
					function (_p15, msg) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$websocket$WebSocket$Receive, name, msg));
					}),
				onClose: function (details) {
					return A2(
						_elm_lang$core$Platform$sendToSelf,
						router,
						_elm_lang$websocket$WebSocket$Die(name));
				}
			});
	});
var _elm_lang$websocket$WebSocket$attemptOpen = F3(
	function (router, backoff, name) {
		var badOpen = function (_p16) {
			return A2(
				_elm_lang$core$Platform$sendToSelf,
				router,
				_elm_lang$websocket$WebSocket$BadOpen(name));
		};
		var goodOpen = function (ws) {
			return A2(
				_elm_lang$core$Platform$sendToSelf,
				router,
				A2(_elm_lang$websocket$WebSocket$GoodOpen, name, ws));
		};
		var actuallyAttemptOpen = A2(
			_elm_lang$core$Task$onError,
			badOpen,
			A2(
				_elm_lang$core$Task$andThen,
				goodOpen,
				A2(_elm_lang$websocket$WebSocket$open, name, router)));
		return _elm_lang$core$Process$spawn(
			A2(
				_elm_lang$websocket$WebSocket_ops['&>'],
				_elm_lang$websocket$WebSocket$after(backoff),
				actuallyAttemptOpen));
	});
var _elm_lang$websocket$WebSocket$onEffects = F4(
	function (router, cmds, subs, state) {
		var newSubs = A2(_elm_lang$websocket$WebSocket$buildSubDict, subs, _elm_lang$core$Dict$empty);
		var cleanup = function (newQueues) {
			var rightStep = F3(
				function (name, connection, getNewSockets) {
					return A2(
						_elm_lang$websocket$WebSocket_ops['&>'],
						_elm_lang$websocket$WebSocket$closeConnection(connection),
						getNewSockets);
				});
			var bothStep = F4(
				function (name, _p17, connection, getNewSockets) {
					return A2(
						_elm_lang$core$Task$map,
						A2(_elm_lang$core$Dict$insert, name, connection),
						getNewSockets);
				});
			var leftStep = F3(
				function (name, _p18, getNewSockets) {
					return A2(
						_elm_lang$core$Task$andThen,
						function (newSockets) {
							return A2(
								_elm_lang$core$Task$andThen,
								function (pid) {
									return _elm_lang$core$Task$succeed(
										A3(
											_elm_lang$core$Dict$insert,
											name,
											A2(_elm_lang$websocket$WebSocket$Opening, 0, pid),
											newSockets));
								},
								A3(_elm_lang$websocket$WebSocket$attemptOpen, router, 0, name));
						},
						getNewSockets);
				});
			var newEntries = A2(
				_elm_lang$core$Dict$union,
				newQueues,
				A2(
					_elm_lang$core$Dict$map,
					F2(
						function (k, v) {
							return {ctor: '[]'};
						}),
					newSubs));
			var collectNewSockets = A6(
				_elm_lang$core$Dict$merge,
				leftStep,
				bothStep,
				rightStep,
				newEntries,
				state.sockets,
				_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
			return A2(
				_elm_lang$core$Task$andThen,
				function (newSockets) {
					return _elm_lang$core$Task$succeed(
						A3(_elm_lang$websocket$WebSocket$State, newSockets, newQueues, newSubs));
				},
				collectNewSockets);
		};
		var sendMessagesGetNewQueues = A3(_elm_lang$websocket$WebSocket$sendMessagesHelp, cmds, state.sockets, state.queues);
		return A2(_elm_lang$core$Task$andThen, cleanup, sendMessagesGetNewQueues);
	});
var _elm_lang$websocket$WebSocket$onSelfMsg = F3(
	function (router, selfMsg, state) {
		var _p19 = selfMsg;
		switch (_p19.ctor) {
			case 'Receive':
				var sends = A2(
					_elm_lang$core$List$map,
					function (tagger) {
						return A2(
							_elm_lang$core$Platform$sendToApp,
							router,
							tagger(_p19._1));
					},
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						A2(_elm_lang$core$Dict$get, _p19._0, state.subs)));
				return A2(
					_elm_lang$websocket$WebSocket_ops['&>'],
					_elm_lang$core$Task$sequence(sends),
					_elm_lang$core$Task$succeed(state));
			case 'Die':
				var _p21 = _p19._0;
				var _p20 = A2(_elm_lang$core$Dict$get, _p21, state.sockets);
				if (_p20.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(state);
				} else {
					return A2(
						_elm_lang$core$Task$andThen,
						function (pid) {
							return _elm_lang$core$Task$succeed(
								A3(
									_elm_lang$websocket$WebSocket$updateSocket,
									_p21,
									A2(_elm_lang$websocket$WebSocket$Opening, 0, pid),
									state));
						},
						A3(_elm_lang$websocket$WebSocket$attemptOpen, router, 0, _p21));
				}
			case 'GoodOpen':
				var _p24 = _p19._1;
				var _p23 = _p19._0;
				var _p22 = A2(_elm_lang$core$Dict$get, _p23, state.queues);
				if (_p22.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(
						A3(
							_elm_lang$websocket$WebSocket$updateSocket,
							_p23,
							_elm_lang$websocket$WebSocket$Connected(_p24),
							state));
				} else {
					return A3(
						_elm_lang$core$List$foldl,
						F2(
							function (msg, task) {
								return A2(
									_elm_lang$websocket$WebSocket_ops['&>'],
									A2(_elm_lang$websocket$WebSocket_LowLevel$send, _p24, msg),
									task);
							}),
						_elm_lang$core$Task$succeed(
							A2(
								_elm_lang$websocket$WebSocket$removeQueue,
								_p23,
								A3(
									_elm_lang$websocket$WebSocket$updateSocket,
									_p23,
									_elm_lang$websocket$WebSocket$Connected(_p24),
									state))),
						_p22._0);
				}
			default:
				var _p27 = _p19._0;
				var _p25 = A2(_elm_lang$core$Dict$get, _p27, state.sockets);
				if (_p25.ctor === 'Nothing') {
					return _elm_lang$core$Task$succeed(state);
				} else {
					if (_p25._0.ctor === 'Opening') {
						var _p26 = _p25._0._0;
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$websocket$WebSocket$updateSocket,
										_p27,
										A2(_elm_lang$websocket$WebSocket$Opening, _p26 + 1, pid),
										state));
							},
							A3(_elm_lang$websocket$WebSocket$attemptOpen, router, _p26 + 1, _p27));
					} else {
						return _elm_lang$core$Task$succeed(state);
					}
				}
		}
	});
_elm_lang$core$Native_Platform.effectManagers['WebSocket'] = {pkg: 'elm-lang/websocket', init: _elm_lang$websocket$WebSocket$init, onEffects: _elm_lang$websocket$WebSocket$onEffects, onSelfMsg: _elm_lang$websocket$WebSocket$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$websocket$WebSocket$cmdMap, subMap: _elm_lang$websocket$WebSocket$subMap};

var _Giga_dev$newman$Utils_WebSocket_ops = _Giga_dev$newman$Utils_WebSocket_ops || {};
_Giga_dev$newman$Utils_WebSocket_ops['=>'] = F2(
	function (d, msg) {
		return A2(
			_elm_lang$core$Task$perform,
			msg,
			_elm_lang$core$Task$succeed(d));
	});
var _Giga_dev$newman$Utils_WebSocket$Model = function (a) {
	return {serverAddress: a};
};
var _Giga_dev$newman$Utils_WebSocket$initModel = function (location) {
	var protocol = function () {
		var _p0 = location.protocol;
		if (_p0 === 'https:') {
			return 'wss';
		} else {
			return 'ws';
		}
	}();
	return _Giga_dev$newman$Utils_WebSocket$Model(
		A2(
			_elm_lang$core$Basics_ops['++'],
			protocol,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'://',
				A2(
					_elm_lang$core$Basics_ops['++'],
					location.hostname,
					A2(
						_elm_lang$core$Basics_ops['++'],
						':',
						A2(_elm_lang$core$Basics_ops['++'], location.port_, '/events'))))));
};
var _Giga_dev$newman$Utils_WebSocket$WebSocketData = F2(
	function (a, b) {
		return {id: a, content: b};
	});
var _Giga_dev$newman$Utils_WebSocket$decodeWebSocketData = A3(
	_elm_lang$core$Json_Decode$map2,
	_Giga_dev$newman$Utils_WebSocket$WebSocketData,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'content', _elm_lang$core$Json_Decode$value));
var _Giga_dev$newman$Utils_WebSocket$NewMessage = function (a) {
	return {ctor: 'NewMessage', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$websocket$WebSocket$listen, model.serverAddress, _Giga_dev$newman$Utils_WebSocket$NewMessage),
			_1: {
				ctor: '::',
				_0: _elm_lang$websocket$WebSocket$keepAlive(model.serverAddress),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedFailingAgents = function (a) {
	return {ctor: 'ModifiedFailingAgents', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedAgentsCount = function (a) {
	return {ctor: 'ModifiedAgentsCount', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedServerStatus = function (a) {
	return {ctor: 'ModifiedServerStatus', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$DeletedFutureJob = function (a) {
	return {ctor: 'DeletedFutureJob', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedFutureJob = function (a) {
	return {ctor: 'CreatedFutureJob', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedJobConfig = function (a) {
	return {ctor: 'CreatedJobConfig', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedSuite = function (a) {
	return {ctor: 'ModifiedSuite', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedSuite = function (a) {
	return {ctor: 'CreatedSuite', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedBuild = function (a) {
	return {ctor: 'ModifiedBuild', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedBuild = function (a) {
	return {ctor: 'CreatedBuild', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedTest = function (a) {
	return {ctor: 'ModifiedTest', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedTest = function (a) {
	return {ctor: 'CreatedTest', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$DeletedAgent = function (a) {
	return {ctor: 'DeletedAgent', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$DeletedOfflineAgent = function (a) {
	return {ctor: 'DeletedOfflineAgent', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedOfflineAgent = function (a) {
	return {ctor: 'CreatedOfflineAgent', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedAgent = function (a) {
	return {ctor: 'ModifiedAgent', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$ModifiedJob = function (a) {
	return {ctor: 'ModifiedJob', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$CreatedJob = function (a) {
	return {ctor: 'CreatedJob', _0: a};
};
var _Giga_dev$newman$Utils_WebSocket$toEvent = function (msg) {
	var _p1 = msg;
	var json = A2(_elm_lang$core$Json_Decode$decodeString, _Giga_dev$newman$Utils_WebSocket$decodeWebSocketData, _p1._0);
	var _p2 = json;
	if (_p2.ctor === 'Ok') {
		var _p5 = _p2._0;
		var parse = F2(
			function (msg, decoder) {
				return A2(
					_elm_lang$core$Result$map,
					msg,
					A2(_elm_lang$core$Json_Decode$decodeValue, decoder, _p5.content));
			});
		var bodyRes = function () {
			var _p3 = _p5.id;
			switch (_p3) {
				case 'created-job':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedJob, _Giga_dev$newman$Utils_Types$decodeJob);
				case 'modified-job':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedJob, _Giga_dev$newman$Utils_Types$decodeJob);
				case 'modified-agent':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedAgent, _Giga_dev$newman$Utils_Types$decodeAgent);
				case 'deleted-agent':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$DeletedAgent, _Giga_dev$newman$Utils_Types$decodeAgent);
				case 'created-offline-agent':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedOfflineAgent, _Giga_dev$newman$Utils_Types$decodeAgent);
				case 'deleted-offline-agent':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$DeletedOfflineAgent, _elm_lang$core$Json_Decode$string);
				case 'modified-agents-count':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedAgentsCount, _elm_lang$core$Json_Decode$int);
				case 'modified-failing-agents':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedFailingAgents, _elm_lang$core$Json_Decode$int);
				case 'created-test':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedTest, _Giga_dev$newman$Utils_Types$decodeTestView);
				case 'modified-test':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedTest, _Giga_dev$newman$Utils_Types$decodeTestView);
				case 'created-build':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedBuild, _Giga_dev$newman$Utils_Types$decodeBuild);
				case 'modified-build':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedBuild, _Giga_dev$newman$Utils_Types$decodeBuild);
				case 'created-suite':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedSuite, _Giga_dev$newman$Utils_Types$decodeSuite);
				case 'modified-suite':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedSuite, _Giga_dev$newman$Utils_Types$decodeSuite);
				case 'created-job-config':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedJobConfig, _Giga_dev$newman$Utils_Types$decodeJobConfig);
				case 'created-future-job':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$CreatedFutureJob, _Giga_dev$newman$Utils_Types$decodeFutureJob);
				case 'deleted-future-job':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$DeletedFutureJob, _Giga_dev$newman$Utils_Types$decodeFutureJob);
				case 'modified-server-status':
					return A2(parse, _Giga_dev$newman$Utils_WebSocket$ModifiedServerStatus, _Giga_dev$newman$Utils_Types$decodeStatus);
				default:
					return _elm_lang$core$Result$Err(
						A2(_elm_lang$core$Basics_ops['++'], 'Unhandled event id: ', _p3));
			}
		}();
		var _p4 = bodyRes;
		if (_p4.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p4._0);
		} else {
			return _elm_lang$core$Result$Err(_p4._0);
		}
	} else {
		return _elm_lang$core$Result$Err(_p2._0);
	}
};

var _rundis$elm_bootstrap$Bootstrap_Grid_Row$betweenXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Between);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$betweenLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Between);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$betweenMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Between);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$betweenSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Between);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$betweenXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Between);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$aroundXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Around);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$aroundLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Around);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$aroundMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Around);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$aroundSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Around);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$aroundXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Around);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$rightXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Right);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$rightLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Right);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$rightMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Right);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$rightSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Right);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$rightXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Right);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$centerXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Center);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$centerLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Center);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$centerMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Center);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$centerSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Center);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$centerXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Center);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$leftXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Left);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$leftLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Left);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$leftMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Left);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$leftSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Left);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$leftXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowHAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Left);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$bottomXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$bottomLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$bottomMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$bottomSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$bottomXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$middleXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$middleLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$middleMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$middleSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$middleXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$topXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$topLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$topMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$topSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$topXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Row$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$RowAttrs(attrs);
};

var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXl0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushLg0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushMd0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushSm0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pushXs0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$push, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXl0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullLg0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullMd0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullSm0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$pullXs0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$pull, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Move0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXl0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetLg0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetMd0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetSm0 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset0);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$offsetXs1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$offset, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Offset1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xlAuto = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAuto);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lgAuto = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAuto);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$lg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$mdAuto = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAuto);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$md = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$smAuto = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAuto);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xsAuto = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAuto);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs12 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col12);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs11 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col11);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs10 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col10);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs9 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col9);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs8 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col8);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs7 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col7);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs6 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col6);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs5 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col5);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs4 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col4);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs3 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col3);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs2 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col2);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs1 = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col1);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$xs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$width, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Col);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$bottomXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$bottomLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$bottomMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$bottomSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$bottomXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Bottom);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$middleXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$middleLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$middleMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$middleSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$middleXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Middle);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$topXl = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XL, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$topLg = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$topMd = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$MD, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$topSm = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$topXs = A2(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colVAlign, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$XS, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$Top);
var _rundis$elm_bootstrap$Bootstrap_Grid_Col$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Grid_Internal$ColAttrs(attrs);
};

var _rundis$elm_bootstrap$Bootstrap_Form$renderCol = function (_p0) {
	var _p1 = _p0;
	return A2(
		_p1._0.elemFn,
		_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colAttributes(_p1._0.options),
		_p1._0.children);
};
var _rundis$elm_bootstrap$Bootstrap_Form$rowValidation = function (validation) {
	return _rundis$elm_bootstrap$Bootstrap_Grid_Row$attrs(
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationWrapperAttribute(validation),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Form$rowDanger = _rundis$elm_bootstrap$Bootstrap_Form$rowValidation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Danger);
var _rundis$elm_bootstrap$Bootstrap_Form$rowWarning = _rundis$elm_bootstrap$Bootstrap_Form$rowValidation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Warning);
var _rundis$elm_bootstrap$Bootstrap_Form$rowSuccess = _rundis$elm_bootstrap$Bootstrap_Form$rowValidation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Success);
var _rundis$elm_bootstrap$Bootstrap_Form$row = F2(
	function (options, cols) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form-group'),
				_1: _rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowAttributes(options)
			},
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Form$renderCol, cols));
	});
var _rundis$elm_bootstrap$Bootstrap_Form$applyModifier = F2(
	function (modifier, options) {
		var _p2 = modifier;
		if (_p2.ctor === 'Validation') {
			return _elm_lang$core$Native_Utils.update(
				options,
				{
					validation: _elm_lang$core$Maybe$Just(_p2._0)
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				options,
				{
					attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p2._0)
				});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Form$defaultOptions = {
	validation: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Form$toAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Form$applyModifier, _rundis$elm_bootstrap$Bootstrap_Form$defaultOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('form-group'),
			_1: {ctor: '[]'}
		},
		function () {
			var _p3 = options.validation;
			if (_p3.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_FormInternal$validationWrapperAttribute(_p3._0),
					_1: {ctor: '[]'}
				};
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{ctor: '[]'},
					options.attributes);
			}
		}());
};
var _rundis$elm_bootstrap$Bootstrap_Form$validationText = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form-control-feedback'),
				_1: attributes
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Form$helpInline = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$small,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('text-muted'),
				_1: attributes
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Form$help = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$small,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form-text text-muted'),
				_1: attributes
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Form$label = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form-control-label'),
				_1: attributes
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Form$group = F2(
	function (options, children) {
		return A2(
			_elm_lang$html$Html$div,
			_rundis$elm_bootstrap$Bootstrap_Form$toAttributes(options),
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Form$form = F2(
	function (attributes, children) {
		return A2(_elm_lang$html$Html$form, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Form$formInline = function (attributes) {
	return _rundis$elm_bootstrap$Bootstrap_Form$form(
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('form-inline'),
			_1: attributes
		});
};
var _rundis$elm_bootstrap$Bootstrap_Form$Options = F2(
	function (a, b) {
		return {validation: a, attributes: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Form$Col = function (a) {
	return {ctor: 'Col', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form$col = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Form$Col(
			{elemFn: _elm_lang$html$Html$div, options: options, children: children});
	});
var _rundis$elm_bootstrap$Bootstrap_Form$colLabel = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Form$Col(
			{
				elemFn: _elm_lang$html$Html$label,
				options: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$attrs(
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('col-form-label'),
							_1: {ctor: '[]'}
						}),
					_1: options
				},
				children: children
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Form$colLabelSm = function (options) {
	return _rundis$elm_bootstrap$Bootstrap_Form$colLabel(
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$attrs(
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('col-form-label-sm'),
					_1: {ctor: '[]'}
				}),
			_1: options
		});
};
var _rundis$elm_bootstrap$Bootstrap_Form$colLabelLg = function (options) {
	return _rundis$elm_bootstrap$Bootstrap_Form$colLabel(
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$attrs(
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('col-form-label-lg'),
					_1: {ctor: '[]'}
				}),
			_1: options
		});
};
var _rundis$elm_bootstrap$Bootstrap_Form$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form$Validation = function (a) {
	return {ctor: 'Validation', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form$groupSuccess = _rundis$elm_bootstrap$Bootstrap_Form$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Success);
var _rundis$elm_bootstrap$Bootstrap_Form$groupWarning = _rundis$elm_bootstrap$Bootstrap_Form$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Warning);
var _rundis$elm_bootstrap$Bootstrap_Form$groupDanger = _rundis$elm_bootstrap$Bootstrap_Form$Validation(_rundis$elm_bootstrap$Bootstrap_Form_FormInternal$Danger);

var _Giga_dev$newman$Views_NewmanModal$viewError = F3(
	function (txt, toMsg, modalState) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Modal$view,
			modalState,
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$footer,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Button$button,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
									toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Close'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$body,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(txt),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Error occurred!'),
							_1: {ctor: '[]'}
						},
						_rundis$elm_bootstrap$Bootstrap_Modal$small(
							_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
	});
var _Giga_dev$newman$Views_NewmanModal$createSuiteForFailedTestsModal = F6(
	function (maybeSuiteName, maybeMessage, toMsg, onInput, onConfirm, modalState) {
		var _p0 = maybeSuiteName;
		if (_p0.ctor === 'Just') {
			var _p4 = _p0._0;
			var _p1 = function () {
				var _p2 = maybeMessage;
				if (_p2.ctor === 'Just') {
					var _p3 = _p2._0;
					if (_p3.ctor === 'Ok') {
						return {ctor: '_Tuple2', _0: false, _1: _p3._0};
					} else {
						return {ctor: '_Tuple2', _0: true, _1: _p3._0};
					}
				} else {
					return {ctor: '_Tuple2', _0: false, _1: ''};
				}
			}();
			var createButtonDisabled = _p1._0;
			var message = _p1._1;
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$footer,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(message),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Button$button,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$success,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											onConfirm(_p4)),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(createButtonDisabled),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Create'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Button$button,
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(createButtonDisabled),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
													toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Close'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					},
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$body,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('This will create a suite of all failing tests in this job'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Form$group,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Form$label,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$for('suiteName'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Suite Name:'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(onInput),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$id('suiteName'),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$defaultValue(_p4),
															_1: {
																ctor: '::',
																_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$disabled(createButtonDisabled),
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_rundis$elm_bootstrap$Bootstrap_Form$help,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Make sure it starts with \'dev-\' prefix.'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						A3(
							_rundis$elm_bootstrap$Bootstrap_Modal$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Create Suite'),
								_1: {ctor: '[]'}
							},
							_rundis$elm_bootstrap$Bootstrap_Modal$large(
								_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
		} else {
			return A3(_Giga_dev$newman$Views_NewmanModal$viewError, 'Suite name was not passed', toMsg, modalState);
		}
	});
var _Giga_dev$newman$Views_NewmanModal$confirmAgentDrop = F4(
	function (maybeAgent, toMsg, confirmMsg, modalState) {
		var _p5 = maybeAgent;
		if (_p5 === 'agentNotFound') {
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Error: Agent is not defined'),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$large(
						_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))));
		} else {
			var _p6 = _p5;
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$footer,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$button,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										confirmMsg(_p6)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Confirm'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Button$button,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Close'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$body,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_elm_lang$core$Basics_ops['++'], 'Are you sure you want to delete agent ', _p6)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A3(
							_rundis$elm_bootstrap$Bootstrap_Modal$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Confirmation is required'),
								_1: {ctor: '[]'}
							},
							_rundis$elm_bootstrap$Bootstrap_Modal$large(
								_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
		}
	});
var _Giga_dev$newman$Views_NewmanModal$confirmFutureJobDrop = F4(
	function (maybeJob, toMsg, confirmMsg, modalState) {
		var _p7 = maybeJob;
		if (_p7.ctor === 'Just') {
			var _p8 = _p7._0;
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$footer,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$button,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										confirmMsg(_p8)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Confirm'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Button$button,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Close'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$body,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_elm_lang$core$Basics_ops['++'], 'Are you sure you want to delete future job ', _p8)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A3(
							_rundis$elm_bootstrap$Bootstrap_Modal$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Confirmation is required'),
								_1: {ctor: '[]'}
							},
							_rundis$elm_bootstrap$Bootstrap_Modal$large(
								_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
		} else {
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Error: Future Job is not defined'),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$large(
						_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))));
		}
	});
var _Giga_dev$newman$Views_NewmanModal$confirmJobDrop = F4(
	function (maybeJob, toMsg, confirmMsg, modalState) {
		var _p9 = maybeJob;
		if (_p9.ctor === 'Just') {
			var _p10 = _p9._0;
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$footer,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$button,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										confirmMsg(_p10)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Confirm'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Button$button,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Close'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$body,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_elm_lang$core$Basics_ops['++'], 'Are you sure you want to delete job ', _p10)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A3(
							_rundis$elm_bootstrap$Bootstrap_Modal$h3,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Confirmation is required'),
								_1: {ctor: '[]'}
							},
							_rundis$elm_bootstrap$Bootstrap_Modal$large(
								_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
		} else {
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Modal$view,
				modalState,
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Error: Job is not defined'),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$large(
						_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))));
		}
	});

var _Giga_dev$newman$Utils_Common$timestamp = {
	ctor: '::',
	_0: _ryannhg$elm_date_format$DateFormat$yearNumber,
	_1: {
		ctor: '::',
		_0: _ryannhg$elm_date_format$DateFormat$monthFixed,
		_1: {
			ctor: '::',
			_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthFixed,
			_1: {ctor: '[]'}
		}
	}
};
var _Giga_dev$newman$Utils_Common$hourStringFormat = '%H:%M:%S';
var _Giga_dev$newman$Utils_Common$dateTimeDateFormat = {
	ctor: '::',
	_0: _ryannhg$elm_date_format$DateFormat$monthNameFirstThree,
	_1: {
		ctor: '::',
		_0: _ryannhg$elm_date_format$DateFormat$text(' '),
		_1: {
			ctor: '::',
			_0: _ryannhg$elm_date_format$DateFormat$dayOfMonthNumber,
			_1: {
				ctor: '::',
				_0: _ryannhg$elm_date_format$DateFormat$text(', '),
				_1: {
					ctor: '::',
					_0: _ryannhg$elm_date_format$DateFormat$hourMilitaryNumber,
					_1: {
						ctor: '::',
						_0: _ryannhg$elm_date_format$DateFormat$text(':'),
						_1: {
							ctor: '::',
							_0: _ryannhg$elm_date_format$DateFormat$minuteFixed,
							_1: {
								ctor: '::',
								_0: _ryannhg$elm_date_format$DateFormat$text(':'),
								_1: {
									ctor: '::',
									_0: _ryannhg$elm_date_format$DateFormat$secondFixed,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	}
};
var _Giga_dev$newman$Utils_Common$dayTimeStringFormat = '%b %d, %H:%M:%S';

var _Giga_dev$newman$Pages_AgentsAll$filterQuery = F3(
	function (query, filterFailingAgents, agent) {
		var jobIdCheck = function () {
			var _p0 = agent.jobId;
			if (_p0.ctor === 'Just') {
				return A2(_elm_lang$core$String$startsWith, query, _p0._0);
			} else {
				return false;
			}
		}();
		var filteredList = A2(
			_elm_lang$core$List$filter,
			_elm_lang$core$String$startsWith(query),
			agent.capabilities);
		var capabilitiesCheck = _elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(filteredList),
			0) > 0;
		return (((!filterFailingAgents) || (filterFailingAgents && (_elm_lang$core$Native_Utils.cmp(agent.setupRetries, 0) > 0))) && (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, agent.name) || (capabilitiesCheck || (A2(_elm_lang$core$String$startsWith, query, agent.state) || (A2(_elm_lang$core$String$contains, query, agent.host) || (A2(_elm_lang$core$String$startsWith, query, agent.pid) || (A2(_elm_lang$core$String$startsWith, query, agent.groupName) || jobIdCheck)))))))) ? true : false;
	});
var _Giga_dev$newman$Pages_AgentsAll$updateAll = F2(
	function (f, model) {
		var newList = f(model.allAgents);
		var filtered = A2(
			_elm_lang$core$List$filter,
			A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, model.filterFailingAgents),
			newList);
		var newPaginated = model.filterOfflineAgents ? model.agents : A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p1) {
				return filtered;
			},
			model.agents);
		return _elm_lang$core$Native_Utils.update(
			model,
			{agents: newPaginated, allAgents: newList});
	});
var _Giga_dev$newman$Pages_AgentsAll$updateAgentUpdated = F2(
	function (model, agentToUpdate) {
		var f = A2(
			_elm_lang$core$List$any,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, agentToUpdate.id);
			},
			model.allAgents) ? A2(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, agentToUpdate.id);
			},
			agentToUpdate) : function (list) {
			return {ctor: '::', _0: agentToUpdate, _1: list};
		};
		return A2(_Giga_dev$newman$Pages_AgentsAll$updateAll, f, model);
	});
var _Giga_dev$newman$Pages_AgentsAll$updateAgentRemoved = F2(
	function (model, idToRemove) {
		var f = _elm_community$list_extra$List_Extra$filterNot(
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, idToRemove);
			});
		return A2(_Giga_dev$newman$Pages_AgentsAll$updateAll, f, model);
	});
var _Giga_dev$newman$Pages_AgentsAll$onRequestCompletedDropAgent = F4(
	function (offlineOrOnline, agentId, model, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			var _p3 = offlineOrOnline;
			switch (_p3) {
				case 'online':
					return {
						ctor: '_Tuple2',
						_0: A2(_Giga_dev$newman$Pages_AgentsAll$updateAgentRemoved, model, agentId),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'offline':
					var offlineAgentList = A2(
						_elm_community$list_extra$List_Extra$filterNot,
						function (agent) {
							return _elm_lang$core$Native_Utils.eq(agent.name, agentId);
						},
						model.offlineAgents);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								offlineAgents: offlineAgentList,
								agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, offlineAgentList)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_AgentsAll$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {allAgents: a, offlineAgents: b, agents: c, pageSize: d, query: e, filterFailingAgents: f, filterOfflineAgents: g, confirmationState: h, agentToDrop: i, offlineAgentToDrop: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Pages_AgentsAll$GetOfflineAgentsCompleted = function (a) {
	return {ctor: 'GetOfflineAgentsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$getOfflineAgentsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_AgentsAll$GetOfflineAgentsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/agent/offline', _Giga_dev$newman$Utils_Types$decodeAgentList));
var _Giga_dev$newman$Pages_AgentsAll$FilterOfflineAgents = function (a) {
	return {ctor: 'FilterOfflineAgents', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$CleanSetupRetries = {ctor: 'CleanSetupRetries'};
var _Giga_dev$newman$Pages_AgentsAll$FilterFailingAgents = function (a) {
	return {ctor: 'FilterFailingAgents', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$RequestCompletedDropAgent = F3(
	function (a, b, c) {
		return {ctor: 'RequestCompletedDropAgent', _0: a, _1: b, _2: c};
	});
var _Giga_dev$newman$Pages_AgentsAll$dropAgentCmd = function (agentId) {
	return A2(
		_elm_lang$http$Http$send,
		A2(_Giga_dev$newman$Pages_AgentsAll$RequestCompletedDropAgent, 'online', agentId),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/agent/', agentId),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_AgentsAll$dropOfflineAgentCmd = function (agentName) {
	return A2(
		_elm_lang$http$Http$send,
		A2(_Giga_dev$newman$Pages_AgentsAll$RequestCompletedDropAgent, 'offline', agentName),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/offlineAgent/', agentName),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnOfflineAgentDropConfirmed = function (a) {
	return {ctor: 'OnOfflineAgentDropConfirmed', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnClickDropOfflineAgent = function (a) {
	return {ctor: 'OnClickDropOfflineAgent', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnAgentDropConfirmed = function (a) {
	return {ctor: 'OnAgentDropConfirmed', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$OnClickDropAgent = function (a) {
	return {ctor: 'OnClickDropAgent', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$viewAgent = F2(
	function (filterOfflineAgents, agent) {
		var closeButtonMsg = F2(
			function (agentId, agentName) {
				return filterOfflineAgents ? _Giga_dev$newman$Pages_AgentsAll$OnClickDropOfflineAgent(agentName) : _Giga_dev$newman$Pages_AgentsAll$OnClickDropAgent(agentId);
			});
		var lastSeen = A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(agent.lastTouchTime)));
		var suiteString = function () {
			var _p4 = agent.suiteName;
			if (_p4.ctor === 'Just') {
				return _p4._0;
			} else {
				return '';
			}
		}();
		var buildString = function () {
			var _p5 = agent.buildName;
			if (_p5.ctor === 'Just') {
				return _p5._0;
			} else {
				return '';
			}
		}();
		var jobString = function () {
			var _p6 = agent.jobId;
			if (_p6.ctor === 'Just') {
				return _p6._0;
			} else {
				return '';
			}
		}();
		var currentTests = A2(_elm_lang$core$String$join, ',', agent.currentTests);
		var agentCapabilities = A2(_elm_lang$core$String$join, ',', agent.capabilities);
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(agent.name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(agentCapabilities),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									filterOfflineAgents ? '' : agent.state),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(agent.host),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(agent.pid),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(agent.setupRetries)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(jobString),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(buildString),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(suiteString),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(currentTests),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(lastSeen),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(agent.groupName),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Button$button,
																			{
																				ctor: '::',
																				_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
																				_1: {
																					ctor: '::',
																					_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
																					_1: {
																						ctor: '::',
																						_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
																							A2(closeButtonMsg, agent.id, agent.name)),
																						_1: {ctor: '[]'}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('ion-close'),
																						_1: {ctor: '[]'}
																					},
																					{ctor: '[]'}),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _Giga_dev$newman$Pages_AgentsAll$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_AgentsAll$WebSocketEvent);
};
var _Giga_dev$newman$Pages_AgentsAll$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Pages_AgentsAll$Next = {ctor: 'Next'};
var _Giga_dev$newman$Pages_AgentsAll$Last = {ctor: 'Last'};
var _Giga_dev$newman$Pages_AgentsAll$First = {ctor: 'First'};
var _Giga_dev$newman$Pages_AgentsAll$view = function (model) {
	var confirmAgentDropDialog = function () {
		var _p7 = model.agentToDrop;
		if (_p7.ctor === 'Just') {
			return A4(_Giga_dev$newman$Views_NewmanModal$confirmAgentDrop, _p7._0, _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg, _Giga_dev$newman$Pages_AgentsAll$OnAgentDropConfirmed, model.confirmationState);
		} else {
			var _p8 = model.offlineAgentToDrop;
			if (_p8.ctor === 'Just') {
				return A4(_Giga_dev$newman$Views_NewmanModal$confirmAgentDrop, _p8._0, _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg, _Giga_dev$newman$Pages_AgentsAll$OnOfflineAgentDropConfirmed, model.confirmationState);
			} else {
				return A4(_Giga_dev$newman$Views_NewmanModal$confirmAgentDrop, 'agentNotFound', _Giga_dev$newman$Pages_AgentsAll$NewmanModalMsg, _Giga_dev$newman$Pages_AgentsAll$OnOfflineAgentDropConfirmed, model.confirmationState);
			}
		}
	}();
	var offlineAgentsFilterButton = A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$custom,
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$inline,
			_1: {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$onCheck(_Giga_dev$newman$Pages_AgentsAll$FilterOfflineAgents),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$checked(model.filterOfflineAgents),
					_1: {ctor: '[]'}
				}
			}
		},
		'Offline agents only');
	var failingAgentsFilterButton = A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$custom,
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$inline,
			_1: {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$onCheck(_Giga_dev$newman$Pages_AgentsAll$FilterFailingAgents),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$checked(model.filterFailingAgents),
					_1: {ctor: '[]'}
				}
			}
		},
		'Failing agents only');
	var cleanSetupRetriesButton = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Button$button,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_AgentsAll$CleanSetupRetries),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Clear Failing Agents'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
	var pagerButtonView = F2(
		function (index, isActive) {
			var _p9 = isActive;
			if (_p9 === true) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item active'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sr-only'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('(current)'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_Giga_dev$newman$Pages_AgentsAll$GoTo(index)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		});
	var nextButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isLast(model.agents)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$Next),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('›'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.agents)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$Last),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('»'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var prevButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isFirst(model.agents)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$First),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('«'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.agents)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_AgentsAll$Prev),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('‹'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var pagination = A2(
		_elm_lang$html$Html$nav,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination '),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					prevButtons,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_jschomay$elm_paginate$Paginate$pager, pagerButtonView, model.agents),
						nextButtons))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Agents (',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									_jschomay$elm_paginate$Paginate$length(model.agents)),
								')'))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-inline'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('form-group'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_AgentsAll$FilterQuery),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('form-group'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: pagination,
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: cleanSetupRetriesButton,
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: failingAgentsFilterButton,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: offlineAgentsFilterButton,
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$table,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('table table-hover table-striped table-bordered table-condensed'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$thead,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$tr,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Name'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Capabilities'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('State'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Host'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('PID'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$th,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$style(
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: 'width', _1: '6%'},
																								_1: {ctor: '[]'}
																							}),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Setup Retries'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$th,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Job'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$th,
																							{ctor: '[]'},
																							{
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('Build'),
																								_1: {ctor: '[]'}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$th,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Suite'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_elm_lang$html$Html$th,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Current Tests'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$th,
																										{ctor: '[]'},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Last seen'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_elm_lang$html$Html$th,
																											{ctor: '[]'},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Group Name'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$th,
																												{ctor: '[]'},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('Actions'),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$tbody,
													{ctor: '[]'},
													A2(
														_elm_lang$core$List$map,
														_Giga_dev$newman$Pages_AgentsAll$viewAgent(model.filterOfflineAgents),
														_jschomay$elm_paginate$Paginate$page(model.agents))),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: pagination,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: confirmAgentDropDialog,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _Giga_dev$newman$Pages_AgentsAll$GetAgentsCompleted = function (a) {
	return {ctor: 'GetAgentsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_AgentsAll$getAgentsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_AgentsAll$GetAgentsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/agent?all=true', _Giga_dev$newman$Utils_Types$decodeAgents));
var _Giga_dev$newman$Pages_AgentsAll$init = function () {
	var pageSize = 20;
	return {
		ctor: '_Tuple2',
		_0: {
			allAgents: {ctor: '[]'},
			offlineAgents: {ctor: '[]'},
			agents: A2(
				_jschomay$elm_paginate$Paginate$fromList,
				pageSize,
				{ctor: '[]'}),
			pageSize: pageSize,
			query: '',
			filterFailingAgents: false,
			filterOfflineAgents: false,
			confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
			agentToDrop: _elm_lang$core$Maybe$Nothing,
			offlineAgentToDrop: _elm_lang$core$Maybe$Nothing
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: _Giga_dev$newman$Pages_AgentsAll$getAgentsCmd,
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_AgentsAll$getOfflineAgentsCmd,
					_1: {ctor: '[]'}
				}
			})
	};
}();
var _Giga_dev$newman$Pages_AgentsAll$cleanSetupRetriesCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_AgentsAll$GetAgentsCompleted,
	A3(_elm_lang$http$Http$post, '/api/newman/agent/clean-setup-retries?all=true', _elm_lang$http$Http$emptyBody, _Giga_dev$newman$Utils_Types$decodeAgents));
var _Giga_dev$newman$Pages_AgentsAll$update = F2(
	function (msg, model) {
		var _p10 = msg;
		switch (_p10.ctor) {
			case 'GetAgentsCompleted':
				var _p11 = _p10._0;
				if (_p11.ctor === 'Ok') {
					var _p12 = _p11._0;
					var filteredList = model.filterOfflineAgents ? model.offlineAgents : A2(
						_elm_lang$core$List$filter,
						A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, model.filterFailingAgents),
						_p12);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList),
								allAgents: _p12
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetOfflineAgentsCompleted':
				var _p13 = _p10._0;
				if (_p13.ctor === 'Ok') {
					var _p14 = _p13._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, _p14),
								offlineAgents: _p14
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$first(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$last(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$next(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: _jschomay$elm_paginate$Paginate$prev(model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							agents: A2(_jschomay$elm_paginate$Paginate$goTo, _p10._0, model.agents)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p15 = _p10._0;
				var filteredList = model.filterOfflineAgents ? model.offlineAgents : A2(
					_elm_lang$core$List$filter,
					A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, _p15, model.filterFailingAgents),
					model.allAgents);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p15,
							agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'WebSocketEvent':
				var _p16 = _p10._0;
				switch (_p16.ctor) {
					case 'ModifiedAgent':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_AgentsAll$updateAgentUpdated, model, _p16._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'DeletedAgent':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_AgentsAll$updateAgentRemoved, model, _p16._0.id),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'CreatedOfflineAgent':
						var offlineList = {ctor: '::', _0: _p16._0, _1: model.offlineAgents};
						var paginatedList = model.filterOfflineAgents ? A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, offlineList) : model.agents;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{offlineAgents: offlineList, agents: paginatedList}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'DeletedOfflineAgent':
						var offlineList = A2(
							_elm_community$list_extra$List_Extra$filterNot,
							function (agent) {
								return _elm_lang$core$Native_Utils.eq(agent.hostAddress, _p16._0);
							},
							model.offlineAgents);
						var paginatedList = model.filterOfflineAgents ? A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, offlineList) : model.agents;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{offlineAgents: offlineList, agents: paginatedList}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnClickDropAgent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							agentToDrop: _elm_lang$core$Maybe$Just(_p10._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickDropOfflineAgent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							offlineAgentToDrop: _elm_lang$core$Maybe$Just(_p10._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{agentToDrop: _elm_lang$core$Maybe$Nothing, offlineAgentToDrop: _elm_lang$core$Maybe$Nothing, confirmationState: _p10._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnAgentDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Pages_AgentsAll$dropAgentCmd(_p10._0)
				};
			case 'OnOfflineAgentDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Pages_AgentsAll$dropOfflineAgentCmd(_p10._0)
				};
			case 'RequestCompletedDropAgent':
				return A4(_Giga_dev$newman$Pages_AgentsAll$onRequestCompletedDropAgent, _p10._0, _p10._1, model, _p10._2);
			case 'FilterFailingAgents':
				var _p17 = _p10._0;
				var filteredList = ((!_p17) && model.filterOfflineAgents) ? model.offlineAgents : A2(
					_elm_lang$core$List$filter,
					A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, _p17),
					model.allAgents);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							filterFailingAgents: _p17,
							agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList),
							filterOfflineAgents: _p17 ? false : model.filterOfflineAgents
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterOfflineAgents':
				var _p18 = _p10._0;
				var filteredList = _p18 ? model.offlineAgents : A2(
					_elm_lang$core$List$filter,
					A2(_Giga_dev$newman$Pages_AgentsAll$filterQuery, model.query, model.filterFailingAgents),
					model.allAgents);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							filterOfflineAgents: _p18,
							agents: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList),
							filterFailingAgents: _p18 ? false : model.filterFailingAgents
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _Giga_dev$newman$Pages_AgentsAll$cleanSetupRetriesCmd};
		}
	});

var _elm_lang$html$Html_Keyed$node = _elm_lang$virtual_dom$VirtualDom$keyedNode;
var _elm_lang$html$Html_Keyed$ol = _elm_lang$html$Html_Keyed$node('ol');
var _elm_lang$html$Html_Keyed$ul = _elm_lang$html$Html_Keyed$node('ul');

var _rundis$elm_bootstrap$Bootstrap_Table$roleOption = function (role) {
	var _p0 = role;
	switch (_p0.ctor) {
		case 'Active':
			return 'active';
		case 'Success':
			return 'success';
		case 'Warning':
			return 'warning';
		case 'Danger':
			return 'danger';
		default:
			return 'info';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$cellAttribute = function (option) {
	var _p1 = option;
	switch (_p1.ctor) {
		case 'RoledCell':
			return _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'table-',
					_rundis$elm_bootstrap$Bootstrap_Table$roleOption(_p1._0)));
		case 'InversedCell':
			return _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'bg-',
					_rundis$elm_bootstrap$Bootstrap_Table$roleOption(_p1._0)));
		default:
			return _p1._0;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$cellAttributes = function (options) {
	return A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$cellAttribute, options);
};
var _rundis$elm_bootstrap$Bootstrap_Table$rowClass = function (option) {
	var _p2 = option;
	switch (_p2.ctor) {
		case 'RoledRow':
			return _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'table-',
					_rundis$elm_bootstrap$Bootstrap_Table$roleOption(_p2._0)));
		case 'InversedRow':
			return _elm_lang$html$Html_Attributes$class(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'bg-',
					_rundis$elm_bootstrap$Bootstrap_Table$roleOption(_p2._0)));
		default:
			return _p2._0;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$rowAttributes = function (options) {
	return A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$rowClass, options);
};
var _rundis$elm_bootstrap$Bootstrap_Table$theadAttribute = function (option) {
	var _p3 = option;
	switch (_p3.ctor) {
		case 'InversedHead':
			return _elm_lang$html$Html_Attributes$class('thead-inverse');
		case 'DefaultHead':
			return _elm_lang$html$Html_Attributes$class('thead-default');
		default:
			return _p3._0;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$theadAttributes = function (options) {
	return A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$theadAttribute, options);
};
var _rundis$elm_bootstrap$Bootstrap_Table$tableClass = function (option) {
	var _p4 = option;
	switch (_p4.ctor) {
		case 'Inversed':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class('table-inverse'));
		case 'Striped':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class('table-striped'));
		case 'Bordered':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class('table-bordered'));
		case 'Hover':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class('table-hover'));
		case 'Small':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class('table-sm'));
		case 'Responsive':
			return _elm_lang$core$Maybe$Nothing;
		case 'Reflow':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$html$Html_Attributes$class('table-reflow'));
		default:
			return _elm_lang$core$Maybe$Just(_p4._0);
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$tableAttributes = function (options) {
	return {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('table'),
		_1: A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$tableClass, options))
	};
};
var _rundis$elm_bootstrap$Bootstrap_Table$renderCell = function (cell) {
	var _p5 = cell;
	if (_p5.ctor === 'Td') {
		return A2(
			_elm_lang$html$Html$td,
			_rundis$elm_bootstrap$Bootstrap_Table$cellAttributes(_p5._0.options),
			_p5._0.children);
	} else {
		return A2(
			_elm_lang$html$Html$th,
			_rundis$elm_bootstrap$Bootstrap_Table$cellAttributes(_p5._0.options),
			_p5._0.children);
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$renderRow = function (row) {
	var _p6 = row;
	if (_p6.ctor === 'Row') {
		return A2(
			_elm_lang$html$Html$tr,
			_rundis$elm_bootstrap$Bootstrap_Table$rowAttributes(_p6._0.options),
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$renderCell, _p6._0.cells));
	} else {
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'tr',
			_rundis$elm_bootstrap$Bootstrap_Table$rowAttributes(_p6._0.options),
			A2(
				_elm_lang$core$List$map,
				function (_p7) {
					var _p8 = _p7;
					return {
						ctor: '_Tuple2',
						_0: _p8._0,
						_1: _rundis$elm_bootstrap$Bootstrap_Table$renderCell(_p8._1)
					};
				},
				_p6._0.cells));
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$renderTHead = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$html$Html$thead,
		_rundis$elm_bootstrap$Bootstrap_Table$theadAttributes(_p10._0.options),
		A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$renderRow, _p10._0.rows));
};
var _rundis$elm_bootstrap$Bootstrap_Table$wrapResponsiveWhen = F2(
	function (isResponsive, table) {
		return isResponsive ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('table-responsive'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: table,
				_1: {ctor: '[]'}
			}) : table;
	});
var _rundis$elm_bootstrap$Bootstrap_Table$RowConfig = F2(
	function (a, b) {
		return {options: a, cells: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Table$CellConfig = F2(
	function (a, b) {
		return {options: a, children: b};
	});
var _rundis$elm_bootstrap$Bootstrap_Table$TableAttr = function (a) {
	return {ctor: 'TableAttr', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$attr = function (attr) {
	return _rundis$elm_bootstrap$Bootstrap_Table$TableAttr(attr);
};
var _rundis$elm_bootstrap$Bootstrap_Table$Reflow = {ctor: 'Reflow'};
var _rundis$elm_bootstrap$Bootstrap_Table$reflow = _rundis$elm_bootstrap$Bootstrap_Table$Reflow;
var _rundis$elm_bootstrap$Bootstrap_Table$Responsive = {ctor: 'Responsive'};
var _rundis$elm_bootstrap$Bootstrap_Table$responsive = _rundis$elm_bootstrap$Bootstrap_Table$Responsive;
var _rundis$elm_bootstrap$Bootstrap_Table$Small = {ctor: 'Small'};
var _rundis$elm_bootstrap$Bootstrap_Table$small = _rundis$elm_bootstrap$Bootstrap_Table$Small;
var _rundis$elm_bootstrap$Bootstrap_Table$Hover = {ctor: 'Hover'};
var _rundis$elm_bootstrap$Bootstrap_Table$hover = _rundis$elm_bootstrap$Bootstrap_Table$Hover;
var _rundis$elm_bootstrap$Bootstrap_Table$Bordered = {ctor: 'Bordered'};
var _rundis$elm_bootstrap$Bootstrap_Table$bordered = _rundis$elm_bootstrap$Bootstrap_Table$Bordered;
var _rundis$elm_bootstrap$Bootstrap_Table$Striped = {ctor: 'Striped'};
var _rundis$elm_bootstrap$Bootstrap_Table$striped = _rundis$elm_bootstrap$Bootstrap_Table$Striped;
var _rundis$elm_bootstrap$Bootstrap_Table$Inversed = {ctor: 'Inversed'};
var _rundis$elm_bootstrap$Bootstrap_Table$inversed = _rundis$elm_bootstrap$Bootstrap_Table$Inversed;
var _rundis$elm_bootstrap$Bootstrap_Table$HeadAttr = function (a) {
	return {ctor: 'HeadAttr', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$headAttr = function (attr) {
	return _rundis$elm_bootstrap$Bootstrap_Table$HeadAttr(attr);
};
var _rundis$elm_bootstrap$Bootstrap_Table$DefaultHead = {ctor: 'DefaultHead'};
var _rundis$elm_bootstrap$Bootstrap_Table$defaultHead = _rundis$elm_bootstrap$Bootstrap_Table$DefaultHead;
var _rundis$elm_bootstrap$Bootstrap_Table$InversedHead = {ctor: 'InversedHead'};
var _rundis$elm_bootstrap$Bootstrap_Table$inversedHead = _rundis$elm_bootstrap$Bootstrap_Table$InversedHead;
var _rundis$elm_bootstrap$Bootstrap_Table$RowAttr = function (a) {
	return {ctor: 'RowAttr', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$rowAttr = function (attr) {
	return _rundis$elm_bootstrap$Bootstrap_Table$RowAttr(attr);
};
var _rundis$elm_bootstrap$Bootstrap_Table$InversedRow = function (a) {
	return {ctor: 'InversedRow', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$RoledRow = function (a) {
	return {ctor: 'RoledRow', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$CellAttr = function (a) {
	return {ctor: 'CellAttr', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$cellAttr = function (attr) {
	return _rundis$elm_bootstrap$Bootstrap_Table$CellAttr(attr);
};
var _rundis$elm_bootstrap$Bootstrap_Table$InversedCell = function (a) {
	return {ctor: 'InversedCell', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$RoledCell = function (a) {
	return {ctor: 'RoledCell', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$Info = {ctor: 'Info'};
var _rundis$elm_bootstrap$Bootstrap_Table$rowInfo = _rundis$elm_bootstrap$Bootstrap_Table$RoledRow(_rundis$elm_bootstrap$Bootstrap_Table$Info);
var _rundis$elm_bootstrap$Bootstrap_Table$cellInfo = _rundis$elm_bootstrap$Bootstrap_Table$RoledCell(_rundis$elm_bootstrap$Bootstrap_Table$Info);
var _rundis$elm_bootstrap$Bootstrap_Table$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Table$rowDanger = _rundis$elm_bootstrap$Bootstrap_Table$RoledRow(_rundis$elm_bootstrap$Bootstrap_Table$Danger);
var _rundis$elm_bootstrap$Bootstrap_Table$cellDanger = _rundis$elm_bootstrap$Bootstrap_Table$RoledCell(_rundis$elm_bootstrap$Bootstrap_Table$Danger);
var _rundis$elm_bootstrap$Bootstrap_Table$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Table$rowWarning = _rundis$elm_bootstrap$Bootstrap_Table$RoledRow(_rundis$elm_bootstrap$Bootstrap_Table$Warning);
var _rundis$elm_bootstrap$Bootstrap_Table$cellWarning = _rundis$elm_bootstrap$Bootstrap_Table$RoledCell(_rundis$elm_bootstrap$Bootstrap_Table$Warning);
var _rundis$elm_bootstrap$Bootstrap_Table$Success = {ctor: 'Success'};
var _rundis$elm_bootstrap$Bootstrap_Table$rowSuccess = _rundis$elm_bootstrap$Bootstrap_Table$RoledRow(_rundis$elm_bootstrap$Bootstrap_Table$Success);
var _rundis$elm_bootstrap$Bootstrap_Table$cellSuccess = _rundis$elm_bootstrap$Bootstrap_Table$RoledCell(_rundis$elm_bootstrap$Bootstrap_Table$Success);
var _rundis$elm_bootstrap$Bootstrap_Table$Active = {ctor: 'Active'};
var _rundis$elm_bootstrap$Bootstrap_Table$rowActive = _rundis$elm_bootstrap$Bootstrap_Table$RoledRow(_rundis$elm_bootstrap$Bootstrap_Table$Active);
var _rundis$elm_bootstrap$Bootstrap_Table$cellActive = _rundis$elm_bootstrap$Bootstrap_Table$RoledCell(_rundis$elm_bootstrap$Bootstrap_Table$Active);
var _rundis$elm_bootstrap$Bootstrap_Table$KeyedRow = function (a) {
	return {ctor: 'KeyedRow', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$keyedTr = F2(
	function (options, keyedCells) {
		return _rundis$elm_bootstrap$Bootstrap_Table$KeyedRow(
			{options: options, cells: keyedCells});
	});
var _rundis$elm_bootstrap$Bootstrap_Table$Row = function (a) {
	return {ctor: 'Row', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$tr = F2(
	function (options, cells) {
		return _rundis$elm_bootstrap$Bootstrap_Table$Row(
			{options: options, cells: cells});
	});
var _rundis$elm_bootstrap$Bootstrap_Table$Th = function (a) {
	return {ctor: 'Th', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$addScopeIfTh = function (cell) {
	var _p11 = cell;
	if (_p11.ctor === 'Th') {
		var _p12 = _p11._0;
		return _rundis$elm_bootstrap$Bootstrap_Table$Th(
			_elm_lang$core$Native_Utils.update(
				_p12,
				{
					options: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Table$cellAttr(
							_elm_lang$html$Html_Attributes$scope('row')),
						_1: _p12.options
					}
				}));
	} else {
		return cell;
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$maybeAddScopeToFirstCell = function (row) {
	var _p13 = row;
	if (_p13.ctor === 'Row') {
		var _p14 = _p13._0.cells;
		if (_p14.ctor === '[]') {
			return row;
		} else {
			return _rundis$elm_bootstrap$Bootstrap_Table$Row(
				{
					options: _p13._0.options,
					cells: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Table$addScopeIfTh(_p14._0),
						_1: _p14._1
					}
				});
		}
	} else {
		var _p15 = _p13._0.cells;
		if (_p15.ctor === '[]') {
			return row;
		} else {
			return _rundis$elm_bootstrap$Bootstrap_Table$KeyedRow(
				{
					options: _p13._0.options,
					cells: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _p15._0._0,
							_1: _rundis$elm_bootstrap$Bootstrap_Table$addScopeIfTh(_p15._0._1)
						},
						_1: _p15._1
					}
				});
		}
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$renderTBody = function (body) {
	var _p16 = body;
	if (_p16.ctor === 'TBody') {
		return A2(
			_elm_lang$html$Html$tbody,
			_p16._0.attributes,
			A2(
				_elm_lang$core$List$map,
				function (row) {
					return _rundis$elm_bootstrap$Bootstrap_Table$renderRow(
						_rundis$elm_bootstrap$Bootstrap_Table$maybeAddScopeToFirstCell(row));
				},
				_p16._0.rows));
	} else {
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'tbody',
			_p16._0.attributes,
			A2(
				_elm_lang$core$List$map,
				function (_p17) {
					var _p18 = _p17;
					return {
						ctor: '_Tuple2',
						_0: _p18._0,
						_1: _rundis$elm_bootstrap$Bootstrap_Table$renderRow(
							_rundis$elm_bootstrap$Bootstrap_Table$maybeAddScopeToFirstCell(_p18._1))
					};
				},
				_p16._0.rows));
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$th = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Table$Th(
			{options: options, children: children});
	});
var _rundis$elm_bootstrap$Bootstrap_Table$Td = function (a) {
	return {ctor: 'Td', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$mapInversedCell = function (cell) {
	var inverseOptions = function (options) {
		return A2(
			_elm_lang$core$List$map,
			function (opt) {
				var _p19 = opt;
				if (_p19.ctor === 'RoledCell') {
					return _rundis$elm_bootstrap$Bootstrap_Table$InversedCell(_p19._0);
				} else {
					return opt;
				}
			},
			options);
	};
	var _p20 = cell;
	if (_p20.ctor === 'Th') {
		var _p21 = _p20._0;
		return _rundis$elm_bootstrap$Bootstrap_Table$Th(
			_elm_lang$core$Native_Utils.update(
				_p21,
				{
					options: inverseOptions(_p21.options)
				}));
	} else {
		var _p22 = _p20._0;
		return _rundis$elm_bootstrap$Bootstrap_Table$Td(
			_elm_lang$core$Native_Utils.update(
				_p22,
				{
					options: inverseOptions(_p22.options)
				}));
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$mapInversedRow = function (row) {
	var inversedOptions = function (options) {
		return A2(
			_elm_lang$core$List$map,
			function (opt) {
				var _p23 = opt;
				if (_p23.ctor === 'RoledRow') {
					return _rundis$elm_bootstrap$Bootstrap_Table$InversedRow(_p23._0);
				} else {
					return opt;
				}
			},
			options);
	};
	var _p24 = row;
	if (_p24.ctor === 'Row') {
		return _rundis$elm_bootstrap$Bootstrap_Table$Row(
			{
				options: inversedOptions(_p24._0.options),
				cells: A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$mapInversedCell, _p24._0.cells)
			});
	} else {
		return _rundis$elm_bootstrap$Bootstrap_Table$KeyedRow(
			{
				options: inversedOptions(_p24._0.options),
				cells: A2(
					_elm_lang$core$List$map,
					function (_p25) {
						var _p26 = _p25;
						return {
							ctor: '_Tuple2',
							_0: _p26._0,
							_1: _rundis$elm_bootstrap$Bootstrap_Table$mapInversedCell(_p26._1)
						};
					},
					_p24._0.cells)
			});
	}
};
var _rundis$elm_bootstrap$Bootstrap_Table$td = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Table$Td(
			{options: options, children: children});
	});
var _rundis$elm_bootstrap$Bootstrap_Table$THead = function (a) {
	return {ctor: 'THead', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$maybeMapInversedTHead = F2(
	function (isTableInversed, _p27) {
		var _p28 = _p27;
		var _p29 = _p28._0;
		var isHeadInversed = A2(
			_elm_lang$core$List$any,
			function (opt) {
				return _elm_lang$core$Native_Utils.eq(opt, _rundis$elm_bootstrap$Bootstrap_Table$InversedHead);
			},
			_p29.options);
		return _rundis$elm_bootstrap$Bootstrap_Table$THead(
			(isTableInversed || isHeadInversed) ? _elm_lang$core$Native_Utils.update(
				_p29,
				{
					rows: A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$mapInversedRow, _p29.rows)
				}) : _p29);
	});
var _rundis$elm_bootstrap$Bootstrap_Table$thead = F2(
	function (options, rows) {
		return _rundis$elm_bootstrap$Bootstrap_Table$THead(
			{options: options, rows: rows});
	});
var _rundis$elm_bootstrap$Bootstrap_Table$simpleThead = function (cells) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Table$thead,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Table$tr,
				{ctor: '[]'},
				cells),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Table$KeyedTBody = function (a) {
	return {ctor: 'KeyedTBody', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$keyedTBody = F2(
	function (attributes, rows) {
		return _rundis$elm_bootstrap$Bootstrap_Table$KeyedTBody(
			{attributes: attributes, rows: rows});
	});
var _rundis$elm_bootstrap$Bootstrap_Table$TBody = function (a) {
	return {ctor: 'TBody', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Table$maybeMapInversedTBody = F2(
	function (isTableInversed, tbody) {
		var _p30 = {ctor: '_Tuple2', _0: isTableInversed, _1: tbody};
		if (_p30._0 === false) {
			return tbody;
		} else {
			if (_p30._1.ctor === 'TBody') {
				var _p31 = _p30._1._0;
				return _rundis$elm_bootstrap$Bootstrap_Table$TBody(
					_elm_lang$core$Native_Utils.update(
						_p31,
						{
							rows: A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Table$mapInversedRow, _p31.rows)
						}));
			} else {
				var _p34 = _p30._1._0;
				return _rundis$elm_bootstrap$Bootstrap_Table$KeyedTBody(
					_elm_lang$core$Native_Utils.update(
						_p34,
						{
							rows: A2(
								_elm_lang$core$List$map,
								function (_p32) {
									var _p33 = _p32;
									return {
										ctor: '_Tuple2',
										_0: _p33._0,
										_1: _rundis$elm_bootstrap$Bootstrap_Table$mapInversedRow(_p33._1)
									};
								},
								_p34.rows)
						}));
			}
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Table$table = function (_p35) {
	var _p36 = _p35;
	var _p37 = _p36.options;
	var isInversed = A2(
		_elm_lang$core$List$any,
		function (opt) {
			return _elm_lang$core$Native_Utils.eq(opt, _rundis$elm_bootstrap$Bootstrap_Table$Inversed);
		},
		_p37);
	var isResponsive = A2(
		_elm_lang$core$List$any,
		function (opt) {
			return _elm_lang$core$Native_Utils.eq(opt, _rundis$elm_bootstrap$Bootstrap_Table$Responsive);
		},
		_p37);
	var classOptions = A2(
		_elm_lang$core$List$filter,
		function (opt) {
			return !_elm_lang$core$Native_Utils.eq(opt, _rundis$elm_bootstrap$Bootstrap_Table$Responsive);
		},
		_p37);
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Table$wrapResponsiveWhen,
		isResponsive,
		A2(
			_elm_lang$html$Html$table,
			_rundis$elm_bootstrap$Bootstrap_Table$tableAttributes(classOptions),
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Table$renderTHead(
					A2(_rundis$elm_bootstrap$Bootstrap_Table$maybeMapInversedTHead, isInversed, _p36.thead)),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Table$renderTBody(
						A2(_rundis$elm_bootstrap$Bootstrap_Table$maybeMapInversedTBody, isInversed, _p36.tbody)),
					_1: {ctor: '[]'}
				}
			}));
};
var _rundis$elm_bootstrap$Bootstrap_Table$simpleTable = function (_p38) {
	var _p39 = _p38;
	return _rundis$elm_bootstrap$Bootstrap_Table$table(
		{
			options: {ctor: '[]'},
			thead: _p39._0,
			tbody: _p39._1
		});
};
var _rundis$elm_bootstrap$Bootstrap_Table$tbody = F2(
	function (attributes, rows) {
		return _rundis$elm_bootstrap$Bootstrap_Table$TBody(
			{attributes: attributes, rows: rows});
	});

var _rundis$elm_bootstrap$Bootstrap_Grid$renderCol = function (column) {
	var _p0 = column;
	switch (_p0.ctor) {
		case 'Column':
			return A2(
				_elm_lang$html$Html$div,
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colAttributes(_p0._0.options),
				_p0._0.children);
		case 'ColBreak':
			return _p0._0;
		default:
			return A3(
				_elm_lang$html$Html_Keyed$node,
				'div',
				_rundis$elm_bootstrap$Bootstrap_Grid_Internal$colAttributes(_p0._0.options),
				_p0._0.children);
	}
};
var _rundis$elm_bootstrap$Bootstrap_Grid$keyedRow = F2(
	function (options, keyedCols) {
		return A3(
			_elm_lang$html$Html_Keyed$node,
			'div',
			_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowAttributes(options),
			A2(
				_elm_lang$core$List$map,
				function (_p1) {
					var _p2 = _p1;
					return {
						ctor: '_Tuple2',
						_0: _p2._0,
						_1: _rundis$elm_bootstrap$Bootstrap_Grid$renderCol(_p2._1)
					};
				},
				keyedCols));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid$row = F2(
	function (options, cols) {
		return A2(
			_elm_lang$html$Html$div,
			_rundis$elm_bootstrap$Bootstrap_Grid_Internal$rowAttributes(options),
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Grid$renderCol, cols));
	});
var _rundis$elm_bootstrap$Bootstrap_Grid$simpleRow = function (cols) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$row,
		{ctor: '[]'},
		cols);
};
var _rundis$elm_bootstrap$Bootstrap_Grid$containerFluid = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
					_1: {ctor: '[]'}
				},
				attributes),
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Grid$container = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container'),
					_1: {ctor: '[]'}
				},
				attributes),
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Grid$KeyedColumn = function (a) {
	return {ctor: 'KeyedColumn', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid$keyedCol = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Grid$KeyedColumn(
			{options: options, children: children});
	});
var _rundis$elm_bootstrap$Bootstrap_Grid$ColBreak = function (a) {
	return {ctor: 'ColBreak', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid$colBreak = function (attributes) {
	return _rundis$elm_bootstrap$Bootstrap_Grid$ColBreak(
		A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('w-100'),
					_1: {ctor: '[]'}
				},
				attributes),
			{ctor: '[]'}));
};
var _rundis$elm_bootstrap$Bootstrap_Grid$Column = function (a) {
	return {ctor: 'Column', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Grid$col = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Grid$Column(
			{options: options, children: children});
	});

var _Giga_dev$newman$Pages_OnDemandAgents$Model = F4(
	function (a, b, c, d) {
		return {modalState: a, elasticGroups: b, selectedElasticGroup: c, newCapacity: d};
	});
var _Giga_dev$newman$Pages_OnDemandAgents$AgentGroup2 = F6(
	function (a, b, c, d, e, f) {
		return {name: a, id: b, min: c, max: d, target: e, actual: f};
	});
var _Giga_dev$newman$Pages_OnDemandAgents$ElasticGroup = F6(
	function (a, b, c, d, e, f) {
		return {id: a, name: b, tags: c, capacity: d, connectedAgents: e, runningVMs: f};
	});
var _Giga_dev$newman$Pages_OnDemandAgents$ElasticGroupCapacity = F3(
	function (a, b, c) {
		return {minimum: a, maximum: b, target: c};
	});
var _Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroupCapacity = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'target',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'maximum',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'minimum',
			_elm_lang$core$Json_Decode$int,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Pages_OnDemandAgents$ElasticGroupCapacity))));
var _Giga_dev$newman$Pages_OnDemandAgents$ElasticGroupTags = F3(
	function (a, b, c) {
		return {name: a, description: b, owner: c};
	});
var _Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroupTags = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'owner',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'description',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'name',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Pages_OnDemandAgents$ElasticGroupTags))));
var _Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroup = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'runningVMs',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'connectedAgents',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'capacity',
			_Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroupCapacity,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'tags',
				_Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroupTags,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'name',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'id',
						_elm_lang$core$Json_Decode$string,
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Pages_OnDemandAgents$ElasticGroup)))))));
var _Giga_dev$newman$Pages_OnDemandAgents$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_OnDemandAgents$WebSocketEvent);
};
var _Giga_dev$newman$Pages_OnDemandAgents$ShowError = function (a) {
	return {ctor: 'ShowError', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$Reload = {ctor: 'Reload'};
var _Giga_dev$newman$Pages_OnDemandAgents$UpdateElasticGroupCompleted = function (a) {
	return {ctor: 'UpdateElasticGroupCompleted', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$updateElasticGroupCmd = F2(
	function (elasticGroup, newCapacity) {
		return A2(
			_elm_lang$http$Http$send,
			_Giga_dev$newman$Pages_OnDemandAgents$UpdateElasticGroupCompleted,
			A3(
				_elm_lang$http$Http$post,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/api/spotinst/elasticgroup?elasticGroupId=',
					A2(
						_elm_lang$core$Basics_ops['++'],
						elasticGroup.id,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'&capacity=',
							_elm_lang$core$Basics$toString(newCapacity)))),
				_elm_lang$http$Http$emptyBody,
				_Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroup));
	});
var _Giga_dev$newman$Pages_OnDemandAgents$GetElasticGroupsCompleted = function (a) {
	return {ctor: 'GetElasticGroupsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$getElasticGroupsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_OnDemandAgents$GetElasticGroupsCompleted,
	A2(
		_elm_lang$http$Http$get,
		'/api/spotinst/elasticgroup',
		_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Pages_OnDemandAgents$decodeElasticGroup)));
var _Giga_dev$newman$Pages_OnDemandAgents$init = {
	ctor: '_Tuple2',
	_0: {
		modalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		elasticGroups: {ctor: '[]'},
		selectedElasticGroup: _elm_lang$core$Maybe$Nothing,
		newCapacity: -1
	},
	_1: _Giga_dev$newman$Pages_OnDemandAgents$getElasticGroupsCmd
};
var _Giga_dev$newman$Pages_OnDemandAgents$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ShowModal':
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							newCapacity: _p1.capacity.target,
							selectedElasticGroup: _elm_lang$core$Maybe$Just(_p1),
							modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CloseModal':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{modalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState, selectedElasticGroup: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AnimateModal':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{modalState: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewCapacity':
				var _p2 = _elm_lang$core$String$toInt(_p0._0);
				if (_p2.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{newCapacity: _p2._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ConfirmUpdate':
				var _p4 = _p0._1;
				var _p3 = _p0._0;
				var updateElement = F3(
					function (elasticGroups, agentGroupToUpdate, newCapacity) {
						var f = function (elasticGroup) {
							if (_elm_lang$core$Native_Utils.eq(elasticGroup.id, agentGroupToUpdate.id)) {
								var elasticGroupCapacity = elasticGroup.capacity;
								var newElasticGroupCapacity = _elm_lang$core$Native_Utils.update(
									elasticGroupCapacity,
									{target: newCapacity});
								return _elm_lang$core$Native_Utils.update(
									elasticGroup,
									{capacity: newElasticGroupCapacity});
							} else {
								return elasticGroup;
							}
						};
						return A2(_elm_lang$core$List$map, f, elasticGroups);
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							elasticGroups: A3(updateElement, model.elasticGroups, _p3, _p4),
							modalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState
						}),
					_1: A2(_Giga_dev$newman$Pages_OnDemandAgents$updateElasticGroupCmd, _p3, _p4)
				};
			case 'GetElasticGroupsCompleted':
				var _p5 = _p0._0;
				if (_p5.ctor === 'Ok') {
					var _p6 = _p5._0;
					var l = A2(_elm_lang$core$Debug$log, 'A', _p6);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{elasticGroups: _p6}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdateElasticGroupCompleted':
				var _p7 = _p0._0;
				if (_p7.ctor === 'Ok') {
					var l = A2(_elm_lang$core$Debug$log, 'UpdateElasticGroupCompleted', 'group has been updated');
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var l = A2(
						_elm_lang$core$Debug$log,
						'UpdateElasticGroupCompleted',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'group update has failed',
							_elm_lang$core$Basics$toString(_p7._0)));
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'Reload':
				return {ctor: '_Tuple2', _0: model, _1: _Giga_dev$newman$Pages_OnDemandAgents$getElasticGroupsCmd};
			case 'ShowError':
				var e = A2(_elm_lang$core$Debug$log, 'ERROR', _p0._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p8 = _p0._0;
				if (_p8.ctor === 'ModifiedAgentsCount') {
					return {ctor: '_Tuple2', _0: model, _1: _Giga_dev$newman$Pages_OnDemandAgents$getElasticGroupsCmd};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_OnDemandAgents$ConfirmUpdate = F2(
	function (a, b) {
		return {ctor: 'ConfirmUpdate', _0: a, _1: b};
	});
var _Giga_dev$newman$Pages_OnDemandAgents$NewCapacity = function (a) {
	return {ctor: 'NewCapacity', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$AnimateModal = function (a) {
	return {ctor: 'AnimateModal', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$ShowModal = function (a) {
	return {ctor: 'ShowModal', _0: a};
};
var _Giga_dev$newman$Pages_OnDemandAgents$CloseModal = {ctor: 'CloseModal'};
var _Giga_dev$newman$Pages_OnDemandAgents$viewModal = function (model) {
	var _p9 = model.selectedElasticGroup;
	if (_p9.ctor === 'Nothing') {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Modal$view,
			model.modalState,
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$h3,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Error: No selected agent group'),
					_1: {ctor: '[]'}
				},
				_rundis$elm_bootstrap$Bootstrap_Modal$large(
					_rundis$elm_bootstrap$Bootstrap_Modal$config(_Giga_dev$newman$Pages_OnDemandAgents$AnimateModal))));
	} else {
		var _p10 = _p9._0;
		var twoColsRow = F2(
			function (left, right) {
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Grid$row,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Grid$col,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm2,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(left),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Grid$col,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm8,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(right),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			});
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Modal$view,
			model.modalState,
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$footer,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Button$button,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
									A2(_Giga_dev$newman$Pages_OnDemandAgents$ConfirmUpdate, _p10, model.newCapacity)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Confirm'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$button,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_OnDemandAgents$CloseModal),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Close'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$body,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Grid$containerFluid,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(twoColsRow, 'Id', _p10.id),
								_1: {
									ctor: '::',
									_0: A2(twoColsRow, 'Name', _p10.tags.name),
									_1: {
										ctor: '::',
										_0: A2(twoColsRow, 'Description', _p10.tags.description),
										_1: {
											ctor: '::',
											_0: A2(
												twoColsRow,
												'Capacity',
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Minimum: ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(_p10.capacity.minimum),
														A2(
															_elm_lang$core$Basics_ops['++'],
															', Maximum: ',
															_elm_lang$core$Basics$toString(_p10.capacity.maximum))))),
											_1: {
												ctor: '::',
												_0: A2(
													_rundis$elm_bootstrap$Bootstrap_Grid$row,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_rundis$elm_bootstrap$Bootstrap_Grid$col,
															{
																ctor: '::',
																_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm2,
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('New target'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Grid$col,
																{
																	ctor: '::',
																	_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm8,
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$input,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onInput(_Giga_dev$newman$Pages_OnDemandAgents$NewCapacity),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$type_('number'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$max(
																						_elm_lang$core$Basics$toString(_p10.capacity.maximum)),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$min(
																							_elm_lang$core$Basics$toString(_p10.capacity.minimum)),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$value(
																								_elm_lang$core$Basics$toString(model.newCapacity)),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$h3,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(_elm_lang$core$Basics_ops['++'], 'Update capacity for group - ', _p10.tags.name)),
							_1: {ctor: '[]'}
						},
						_rundis$elm_bootstrap$Bootstrap_Modal$large(
							_rundis$elm_bootstrap$Bootstrap_Modal$config(_Giga_dev$newman$Pages_OnDemandAgents$AnimateModal))))));
	}
};
var _Giga_dev$newman$Pages_OnDemandAgents$view = function (model) {
	var onDemandText = A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(
			_elm_lang$core$List$sum(
				A2(
					_elm_lang$core$List$map,
					function (group) {
						return group.connectedAgents;
					},
					model.elasticGroups))),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' / ',
			_elm_lang$core$Basics$toString(
				_elm_lang$core$List$sum(
					A2(
						_elm_lang$core$List$map,
						function (group) {
							return group.capacity.target;
						},
						model.elasticGroups)))));
	var rowOpt = function (elasticGroup) {
		return _elm_lang$core$Native_Utils.eq(elasticGroup.capacity.target, elasticGroup.connectedAgents) ? _rundis$elm_bootstrap$Bootstrap_Table$rowSuccess : _rundis$elm_bootstrap$Bootstrap_Table$rowDanger;
	};
	var createRow = function (elasticGroup) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Table$tr,
			{
				ctor: '::',
				_0: rowOpt(elasticGroup),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Table$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								elasticGroup.tags.name,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' (',
									A2(_elm_lang$core$Basics_ops['++'], elasticGroup.id, ')')))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Table$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(elasticGroup.capacity.target)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Table$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(elasticGroup.runningVMs)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Table$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(elasticGroup.connectedAgents)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Table$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Button$button,
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$roleLink,
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('ion-android-options'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
															_Giga_dev$newman$Pages_OnDemandAgents$ShowModal(elasticGroup)),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'On Demand: ',
							A2(_elm_lang$core$Basics_ops['++'], onDemandText, ' '))),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$button,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('ion-refresh'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_OnDemandAgents$Reload),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Table$table(
					{
						options: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Table$responsive,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Table$hover,
								_1: {ctor: '[]'}
							}
						},
						thead: _rundis$elm_bootstrap$Bootstrap_Table$simpleThead(
							{
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Table$th,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Group name'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Table$th,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Target Capacity'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Table$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Running VMs'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Table$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Connected Agents'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_rundis$elm_bootstrap$Bootstrap_Table$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Actions'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						tbody: A2(
							_rundis$elm_bootstrap$Bootstrap_Table$tbody,
							{ctor: '[]'},
							A2(_elm_lang$core$List$map, createRow, model.elasticGroups))
					}),
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_OnDemandAgents$viewModal(model),
					_1: {ctor: '[]'}
				}
			}
		});
};

var _Giga_dev$newman$Pages_Agents$Model = F3(
	function (a, b, c) {
		return {tabState: a, agentsAllModel: b, onDemandAgentsModel: c};
	});
var _Giga_dev$newman$Pages_Agents$OnDemandAgentsMsg = function (a) {
	return {ctor: 'OnDemandAgentsMsg', _0: a};
};
var _Giga_dev$newman$Pages_Agents$AgentsAllMsg = function (a) {
	return {ctor: 'AgentsAllMsg', _0: a};
};
var _Giga_dev$newman$Pages_Agents$init = function () {
	var _p0 = _Giga_dev$newman$Pages_OnDemandAgents$init;
	var onDemandAgentsModel = _p0._0;
	var onDemandAgentsCmd = _p0._1;
	var _p1 = _Giga_dev$newman$Pages_AgentsAll$init;
	var agentsAllModel = _p1._0;
	var agentsAllCmd = _p1._1;
	return {
		ctor: '_Tuple2',
		_0: {tabState: _rundis$elm_bootstrap$Bootstrap_Tab$initialState, agentsAllModel: agentsAllModel, onDemandAgentsModel: onDemandAgentsModel},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Agents$AgentsAllMsg, agentsAllCmd),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Agents$OnDemandAgentsMsg, onDemandAgentsCmd),
					_1: {ctor: '[]'}
				}
			})
	};
}();
var _Giga_dev$newman$Pages_Agents$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'TabMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{tabState: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AgentsAllMsg':
				var _p3 = A2(_Giga_dev$newman$Pages_AgentsAll$update, _p2._0, model.agentsAllModel);
				var newModel = _p3._0;
				var newCmd = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{agentsAllModel: newModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Agents$AgentsAllMsg, newCmd)
				};
			default:
				var _p4 = A2(_Giga_dev$newman$Pages_OnDemandAgents$update, _p2._0, model.onDemandAgentsModel);
				var newModel = _p4._0;
				var newCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{onDemandAgentsModel: newModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Agents$OnDemandAgentsMsg, newCmd)
				};
		}
	});
var _Giga_dev$newman$Pages_Agents$handleEvent = function (event) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Platform_Cmd$map,
				_Giga_dev$newman$Pages_Agents$AgentsAllMsg,
				_Giga_dev$newman$Pages_AgentsAll$handleEvent(event)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Pages_Agents$OnDemandAgentsMsg,
					_Giga_dev$newman$Pages_OnDemandAgents$handleEvent(event)),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Agents$TabMsg = function (a) {
	return {ctor: 'TabMsg', _0: a};
};
var _Giga_dev$newman$Pages_Agents$view = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Tab$view,
		model.tabState,
		A2(
			_rundis$elm_bootstrap$Bootstrap_Tab$items,
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Tab$item(
					{
						id: 'tabItem1',
						link: A2(
							_rundis$elm_bootstrap$Bootstrap_Tab$link,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('All Agents'),
								_1: {ctor: '[]'}
							}),
						pane: A2(
							_rundis$elm_bootstrap$Bootstrap_Tab$pane,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$map,
									_Giga_dev$newman$Pages_Agents$AgentsAllMsg,
									_Giga_dev$newman$Pages_AgentsAll$view(model.agentsAllModel)),
								_1: {ctor: '[]'}
							})
					}),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Tab$item(
						{
							id: 'tabItem2',
							link: A2(
								_rundis$elm_bootstrap$Bootstrap_Tab$link,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('On Demand Agents'),
									_1: {ctor: '[]'}
								}),
							pane: A2(
								_rundis$elm_bootstrap$Bootstrap_Tab$pane,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_Giga_dev$newman$Pages_Agents$OnDemandAgentsMsg,
										_Giga_dev$newman$Pages_OnDemandAgents$view(model.onDemandAgentsModel)),
									_1: {ctor: '[]'}
								})
						}),
					_1: {ctor: '[]'}
				}
			},
			_rundis$elm_bootstrap$Bootstrap_Tab$justified(
				_rundis$elm_bootstrap$Bootstrap_Tab$withAnimation(
					_rundis$elm_bootstrap$Bootstrap_Tab$config(_Giga_dev$newman$Pages_Agents$TabMsg)))));
};
var _Giga_dev$newman$Pages_Agents$subscriptions = function (model) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Tab$subscriptions, model.tabState, _Giga_dev$newman$Pages_Agents$TabMsg);
};

var _evancz$url_parser$UrlParser$toKeyValuePair = function (segment) {
	var _p0 = A2(_elm_lang$core$String$split, '=', segment);
	if (((_p0.ctor === '::') && (_p0._1.ctor === '::')) && (_p0._1._1.ctor === '[]')) {
		return A3(
			_elm_lang$core$Maybe$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$http$Http$decodeUri(_p0._0),
			_elm_lang$http$Http$decodeUri(_p0._1._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _evancz$url_parser$UrlParser$parseParams = function (queryString) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$filterMap,
			_evancz$url_parser$UrlParser$toKeyValuePair,
			A2(
				_elm_lang$core$String$split,
				'&',
				A2(_elm_lang$core$String$dropLeft, 1, queryString))));
};
var _evancz$url_parser$UrlParser$splitUrl = function (url) {
	var _p1 = A2(_elm_lang$core$String$split, '/', url);
	if ((_p1.ctor === '::') && (_p1._0 === '')) {
		return _p1._1;
	} else {
		return _p1;
	}
};
var _evancz$url_parser$UrlParser$parseHelp = function (states) {
	parseHelp:
	while (true) {
		var _p2 = states;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p4 = _p2._0;
			var _p3 = _p4.unvisited;
			if (_p3.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p4.value);
			} else {
				if ((_p3._0 === '') && (_p3._1.ctor === '[]')) {
					return _elm_lang$core$Maybe$Just(_p4.value);
				} else {
					var _v4 = _p2._1;
					states = _v4;
					continue parseHelp;
				}
			}
		}
	}
};
var _evancz$url_parser$UrlParser$parse = F3(
	function (_p5, url, params) {
		var _p6 = _p5;
		return _evancz$url_parser$UrlParser$parseHelp(
			_p6._0(
				{
					visited: {ctor: '[]'},
					unvisited: _evancz$url_parser$UrlParser$splitUrl(url),
					params: params,
					value: _elm_lang$core$Basics$identity
				}));
	});
var _evancz$url_parser$UrlParser$parseHash = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			A2(_elm_lang$core$String$dropLeft, 1, location.hash),
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$parsePath = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			location.pathname,
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$intParamHelp = function (maybeValue) {
	var _p7 = maybeValue;
	if (_p7.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(_p7._0));
	}
};
var _evancz$url_parser$UrlParser$mapHelp = F2(
	function (func, _p8) {
		var _p9 = _p8;
		return {
			visited: _p9.visited,
			unvisited: _p9.unvisited,
			params: _p9.params,
			value: func(_p9.value)
		};
	});
var _evancz$url_parser$UrlParser$State = F4(
	function (a, b, c, d) {
		return {visited: a, unvisited: b, params: c, value: d};
	});
var _evancz$url_parser$UrlParser$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _evancz$url_parser$UrlParser$s = function (str) {
	return _evancz$url_parser$UrlParser$Parser(
		function (_p10) {
			var _p11 = _p10;
			var _p12 = _p11.unvisited;
			if (_p12.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p13 = _p12._0;
				return _elm_lang$core$Native_Utils.eq(_p13, str) ? {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						{ctor: '::', _0: _p13, _1: _p11.visited},
						_p12._1,
						_p11.params,
						_p11.value),
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
			}
		});
};
var _evancz$url_parser$UrlParser$custom = F2(
	function (tipe, stringToSomething) {
		return _evancz$url_parser$UrlParser$Parser(
			function (_p14) {
				var _p15 = _p14;
				var _p16 = _p15.unvisited;
				if (_p16.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p18 = _p16._0;
					var _p17 = stringToSomething(_p18);
					if (_p17.ctor === 'Ok') {
						return {
							ctor: '::',
							_0: A4(
								_evancz$url_parser$UrlParser$State,
								{ctor: '::', _0: _p18, _1: _p15.visited},
								_p16._1,
								_p15.params,
								_p15.value(_p17._0)),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}
			});
	});
var _evancz$url_parser$UrlParser$string = A2(_evancz$url_parser$UrlParser$custom, 'STRING', _elm_lang$core$Result$Ok);
var _evancz$url_parser$UrlParser$int = A2(_evancz$url_parser$UrlParser$custom, 'NUMBER', _elm_lang$core$String$toInt);
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['</>'] = F2(
	function (_p20, _p19) {
		var _p21 = _p20;
		var _p22 = _p19;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p22._0,
					_p21._0(state));
			});
	});
var _evancz$url_parser$UrlParser$map = F2(
	function (subValue, _p23) {
		var _p24 = _p23;
		return _evancz$url_parser$UrlParser$Parser(
			function (_p25) {
				var _p26 = _p25;
				return A2(
					_elm_lang$core$List$map,
					_evancz$url_parser$UrlParser$mapHelp(_p26.value),
					_p24._0(
						{visited: _p26.visited, unvisited: _p26.unvisited, params: _p26.params, value: subValue}));
			});
	});
var _evancz$url_parser$UrlParser$oneOf = function (parsers) {
	return _evancz$url_parser$UrlParser$Parser(
		function (state) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p27) {
					var _p28 = _p27;
					return _p28._0(state);
				},
				parsers);
		});
};
var _evancz$url_parser$UrlParser$top = _evancz$url_parser$UrlParser$Parser(
	function (state) {
		return {
			ctor: '::',
			_0: state,
			_1: {ctor: '[]'}
		};
	});
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['<?>'] = F2(
	function (_p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p32._0,
					_p31._0(state));
			});
	});
var _evancz$url_parser$UrlParser$QueryParser = function (a) {
	return {ctor: 'QueryParser', _0: a};
};
var _evancz$url_parser$UrlParser$customParam = F2(
	function (key, func) {
		return _evancz$url_parser$UrlParser$QueryParser(
			function (_p33) {
				var _p34 = _p33;
				var _p35 = _p34.params;
				return {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						_p34.visited,
						_p34.unvisited,
						_p35,
						_p34.value(
							func(
								A2(_elm_lang$core$Dict$get, key, _p35)))),
					_1: {ctor: '[]'}
				};
			});
	});
var _evancz$url_parser$UrlParser$stringParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _elm_lang$core$Basics$identity);
};
var _evancz$url_parser$UrlParser$intParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _evancz$url_parser$UrlParser$intParamHelp);
};

var _rundis$elm_bootstrap$Bootstrap_Badge$roleOption = function (role) {
	var _p0 = role;
	switch (_p0.ctor) {
		case 'Default':
			return 'badge-default';
		case 'Primary':
			return 'badge-primary';
		case 'Success':
			return 'badge-success';
		case 'Info':
			return 'badge-info';
		case 'Warning':
			return 'badge-warning';
		default:
			return 'badge-danger';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeClass = function (option) {
	return _elm_lang$html$Html_Attributes$class(
		function () {
			var _p1 = option;
			if (_p1.ctor === 'Pill') {
				return 'badge-pill';
			} else {
				return _rundis$elm_bootstrap$Bootstrap_Badge$roleOption(_p1._0);
			}
		}());
};
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeAttributes = function (options) {
	return {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('badge'),
		_1: A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Badge$badgeClass, options)
	};
};
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal = F3(
	function (options, attributes, children) {
		return A2(
			_elm_lang$html$Html$span,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rundis$elm_bootstrap$Bootstrap_Badge$badgeAttributes(options),
				attributes),
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Info = {ctor: 'Info'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Success = {ctor: 'Success'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Primary = {ctor: 'Primary'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Default = {ctor: 'Default'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Pill = {ctor: 'Pill'};
var _rundis$elm_bootstrap$Bootstrap_Badge$Roled = function (a) {
	return {ctor: 'Roled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Badge$badge = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Default),
		_1: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Primary),
		_1: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Success),
		_1: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Info),
		_1: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Warning),
		_1: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Danger),
		_1: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$pill = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Default),
		_1: {
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Badge$Pill,
			_1: {ctor: '[]'}
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$pillPrimary = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Primary),
		_1: {
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Badge$Pill,
			_1: {ctor: '[]'}
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$pillSuccess = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Success),
		_1: {
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Badge$Pill,
			_1: {ctor: '[]'}
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$pillInfo = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Info),
		_1: {
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Badge$Pill,
			_1: {ctor: '[]'}
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$pillWarning = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Warning),
		_1: {
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Badge$Pill,
			_1: {ctor: '[]'}
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Badge$pillDanger = _rundis$elm_bootstrap$Bootstrap_Badge$badgeInternal(
	{
		ctor: '::',
		_0: _rundis$elm_bootstrap$Bootstrap_Badge$Roled(_rundis$elm_bootstrap$Bootstrap_Badge$Danger),
		_1: {
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Badge$Pill,
			_1: {ctor: '[]'}
		}
	});

var _rundis$elm_bootstrap$Bootstrap_Progress$roleClass = function (role) {
	return _elm_lang$html$Html_Attributes$class(
		function () {
			var _p0 = role;
			switch (_p0.ctor) {
				case 'Success':
					return 'bg-success';
				case 'Info':
					return 'bg-info';
				case 'Warning':
					return 'bg-warning';
				default:
					return 'bg-danger';
			}
		}());
};
var _rundis$elm_bootstrap$Bootstrap_Progress$toAttributes = function (_p1) {
	var _p2 = _p1;
	var _p5 = _p2._0;
	return _elm_lang$core$List$concat(
		{
			ctor: '::',
			_0: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'progressbar'),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html_Attributes$attribute,
						'aria-value-now',
						_elm_lang$core$Basics$toString(_p5.value)),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-valuemin', '0'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-valuemax', '100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'width',
											_1: A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p5.value),
												'%')
										},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$classList(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'progress-bar', _1: true},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'progress-bar-striped', _1: _p5.striped || _p5.animated},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'progress-bar-animated', _1: _p5.animated},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: function () {
					var _p3 = _p5.height;
					if (_p3.ctor === 'Just') {
						return {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'height',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(_p3._0),
											'px')
									},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}(),
				_1: {
					ctor: '::',
					_0: function () {
						var _p4 = _p5.role;
						if (_p4.ctor === 'Just') {
							return {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Progress$roleClass(_p4._0),
								_1: {ctor: '[]'}
							};
						} else {
							return {ctor: '[]'};
						}
					}(),
					_1: {
						ctor: '::',
						_0: _p5.attributes,
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Progress$WrapperAttrs = function (a) {
	return {ctor: 'WrapperAttrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$wrapperAttrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Progress$WrapperAttrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Progress$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Progress$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Progress$Animated = function (a) {
	return {ctor: 'Animated', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$animated = _rundis$elm_bootstrap$Bootstrap_Progress$Animated(true);
var _rundis$elm_bootstrap$Bootstrap_Progress$Striped = function (a) {
	return {ctor: 'Striped', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$striped = _rundis$elm_bootstrap$Bootstrap_Progress$Striped(true);
var _rundis$elm_bootstrap$Bootstrap_Progress$Roled = function (a) {
	return {ctor: 'Roled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$Label = function (a) {
	return {ctor: 'Label', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$label = function (text) {
	return _rundis$elm_bootstrap$Bootstrap_Progress$Label(
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(text),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Progress$customLabel = function (children) {
	return _rundis$elm_bootstrap$Bootstrap_Progress$Label(children);
};
var _rundis$elm_bootstrap$Bootstrap_Progress$Height = function (a) {
	return {ctor: 'Height', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$height = function (height) {
	return _rundis$elm_bootstrap$Bootstrap_Progress$Height(
		_elm_lang$core$Maybe$Just(height));
};
var _rundis$elm_bootstrap$Bootstrap_Progress$Value = function (a) {
	return {ctor: 'Value', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$value = function (val) {
	return _rundis$elm_bootstrap$Bootstrap_Progress$Value(val);
};
var _rundis$elm_bootstrap$Bootstrap_Progress$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Progress$danger = _rundis$elm_bootstrap$Bootstrap_Progress$Roled(
	_elm_lang$core$Maybe$Just(_rundis$elm_bootstrap$Bootstrap_Progress$Danger));
var _rundis$elm_bootstrap$Bootstrap_Progress$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Progress$warning = _rundis$elm_bootstrap$Bootstrap_Progress$Roled(
	_elm_lang$core$Maybe$Just(_rundis$elm_bootstrap$Bootstrap_Progress$Warning));
var _rundis$elm_bootstrap$Bootstrap_Progress$Info = {ctor: 'Info'};
var _rundis$elm_bootstrap$Bootstrap_Progress$info = _rundis$elm_bootstrap$Bootstrap_Progress$Roled(
	_elm_lang$core$Maybe$Just(_rundis$elm_bootstrap$Bootstrap_Progress$Info));
var _rundis$elm_bootstrap$Bootstrap_Progress$Success = {ctor: 'Success'};
var _rundis$elm_bootstrap$Bootstrap_Progress$success = _rundis$elm_bootstrap$Bootstrap_Progress$Roled(
	_elm_lang$core$Maybe$Just(_rundis$elm_bootstrap$Bootstrap_Progress$Success));
var _rundis$elm_bootstrap$Bootstrap_Progress$Options = function (a) {
	return {ctor: 'Options', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Progress$applyOption = F2(
	function (modifier, _p6) {
		var _p7 = _p6;
		var _p9 = _p7._0;
		return _rundis$elm_bootstrap$Bootstrap_Progress$Options(
			function () {
				var _p8 = modifier;
				switch (_p8.ctor) {
					case 'Value':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{value: _p8._0});
					case 'Height':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{height: _p8._0});
					case 'Label':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{label: _p8._0});
					case 'Roled':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{role: _p8._0});
					case 'Striped':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{striped: _p8._0});
					case 'Animated':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{animated: _p8._0});
					case 'Attrs':
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{attributes: _p8._0});
					default:
						return _elm_lang$core$Native_Utils.update(
							_p9,
							{wrapperAttributes: _p8._0});
				}
			}());
	});
var _rundis$elm_bootstrap$Bootstrap_Progress$defaultOptions = _rundis$elm_bootstrap$Bootstrap_Progress$Options(
	{
		value: 0,
		height: _elm_lang$core$Maybe$Nothing,
		label: {ctor: '[]'},
		role: _elm_lang$core$Maybe$Nothing,
		striped: false,
		animated: false,
		attributes: {ctor: '[]'},
		wrapperAttributes: {ctor: '[]'}
	});
var _rundis$elm_bootstrap$Bootstrap_Progress$renderBar = function (modifiers) {
	var _p10 = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Progress$applyOption, _rundis$elm_bootstrap$Bootstrap_Progress$defaultOptions, modifiers);
	var options = _p10;
	var opts = _p10._0;
	return A2(
		_elm_lang$html$Html$div,
		_rundis$elm_bootstrap$Bootstrap_Progress$toAttributes(options),
		opts.label);
};
var _rundis$elm_bootstrap$Bootstrap_Progress$progress = function (modifiers) {
	var _p11 = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Progress$applyOption, _rundis$elm_bootstrap$Bootstrap_Progress$defaultOptions, modifiers);
	var options = _p11._0;
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('progress'),
			_1: options.wrapperAttributes
		},
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Progress$renderBar(modifiers),
			_1: {ctor: '[]'}
		});
};
var _rundis$elm_bootstrap$Bootstrap_Progress$progressMulti = function (bars) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('progress'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Progress$renderBar, bars));
};

var _elm_lang$mouse$Mouse_ops = _elm_lang$mouse$Mouse_ops || {};
_elm_lang$mouse$Mouse_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _elm_lang$mouse$Mouse$onSelfMsg = F3(
	function (router, _p1, state) {
		var _p2 = _p1;
		var _p3 = A2(_elm_lang$core$Dict$get, _p2.category, state);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p2.position));
			};
			return A2(
				_elm_lang$mouse$Mouse_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p3._0.taggers)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$mouse$Mouse$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$mouse$Mouse$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p4 = maybeValues;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _elm_lang$mouse$Mouse$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p5 = subs;
			if (_p5.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p5._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p5._0._0,
					_elm_lang$mouse$Mouse$categorizeHelpHelp(_p5._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$mouse$Mouse$categorize = function (subs) {
	return A2(_elm_lang$mouse$Mouse$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$mouse$Mouse$subscription = _elm_lang$core$Native_Platform.leaf('Mouse');
var _elm_lang$mouse$Mouse$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _elm_lang$mouse$Mouse$position = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$mouse$Mouse$Position,
	A2(_elm_lang$core$Json_Decode$field, 'pageX', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'pageY', _elm_lang$core$Json_Decode$int));
var _elm_lang$mouse$Mouse$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$mouse$Mouse$Msg = F2(
	function (a, b) {
		return {category: a, position: b};
	});
var _elm_lang$mouse$Mouse$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				var tracker = A3(
					_elm_lang$dom$Dom_LowLevel$onDocument,
					category,
					_elm_lang$mouse$Mouse$position,
					function (_p6) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$mouse$Mouse$Msg, category, _p6));
					});
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$mouse$Mouse$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(tracker));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p7, taggers, task) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								category,
								A2(_elm_lang$mouse$Mouse$Watcher, taggers, _p8.pid),
								state));
					},
					task);
			});
		var leftStep = F3(
			function (category, _p9, task) {
				var _p10 = _p9;
				return A2(
					_elm_lang$mouse$Mouse_ops['&>'],
					_elm_lang$core$Process$kill(_p10.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$mouse$Mouse$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$mouse$Mouse$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$mouse$Mouse$clicks = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'click', tagger));
};
var _elm_lang$mouse$Mouse$moves = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousemove', tagger));
};
var _elm_lang$mouse$Mouse$downs = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousedown', tagger));
};
var _elm_lang$mouse$Mouse$ups = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mouseup', tagger));
};
var _elm_lang$mouse$Mouse$subMap = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$mouse$Mouse$MySub,
			_p12._0,
			function (_p13) {
				return func(
					_p12._1(_p13));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Mouse'] = {pkg: 'elm-lang/mouse', init: _elm_lang$mouse$Mouse$init, onEffects: _elm_lang$mouse$Mouse$onEffects, onSelfMsg: _elm_lang$mouse$Mouse$onSelfMsg, tag: 'sub', subMap: _elm_lang$mouse$Mouse$subMap};

var _rundis$elm_bootstrap$Bootstrap_Dropdown$applyModifier = F2(
	function (option, options) {
		var _p0 = option;
		switch (_p0.ctor) {
			case 'AlignMenuRight':
				return _elm_lang$core$Native_Utils.update(
					options,
					{hasMenuRight: true});
			case 'Dropup':
				return _elm_lang$core$Native_Utils.update(
					options,
					{isDropUp: true});
			case 'Attrs':
				return _elm_lang$core$Native_Utils.update(
					options,
					{attributes: _p0._0});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{menuAttrs: _p0._0});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$defaultOptions = {
	hasMenuRight: false,
	isDropUp: false,
	attributes: {ctor: '[]'},
	menuAttrs: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$toConfig = function (options) {
	return A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Dropdown$applyModifier, _rundis$elm_bootstrap$Bootstrap_Dropdown$defaultOptions, options);
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$SplitToggleConfig = F3(
	function (a, b, c) {
		return {options: a, togglerOptions: b, children: c};
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$Options = F4(
	function (a, b, c, d) {
		return {isDropUp: a, hasMenuRight: b, attributes: c, menuAttrs: d};
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$Closed = {ctor: 'Closed'};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$initialState = _rundis$elm_bootstrap$Bootstrap_Dropdown$State(_rundis$elm_bootstrap$Bootstrap_Dropdown$Closed);
var _rundis$elm_bootstrap$Bootstrap_Dropdown$dropdown = F2(
	function (_p2, _p1) {
		var _p3 = _p2;
		var _p4 = _p1;
		var config = _rundis$elm_bootstrap$Bootstrap_Dropdown$toConfig(_p4.options);
		var _p5 = _p4.toggleButton;
		var buttonFn = _p5._0;
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'btn-group', _1: true},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'show',
									_1: !_elm_lang$core$Native_Utils.eq(_p3._0, _rundis$elm_bootstrap$Bootstrap_Dropdown$Closed)
								},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'dropup', _1: config.isDropUp},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				config.attributes),
			{
				ctor: '::',
				_0: A2(buttonFn, _p4.toggleMsg, _p3),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'dropdown-menu', _1: true},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'dropdown-menu-right', _1: config.hasMenuRight},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							config.menuAttrs),
						A2(
							_elm_lang$core$List$map,
							function (_p6) {
								var _p7 = _p6;
								return _p7._0;
							},
							_p4.items)),
					_1: {ctor: '[]'}
				}
			});
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$splitDropdown = F2(
	function (_p9, _p8) {
		var _p10 = _p9;
		var _p11 = _p8;
		var config = _rundis$elm_bootstrap$Bootstrap_Dropdown$toConfig(_p11.options);
		var _p12 = _p11.toggleButton;
		var buttonsFn = _p12._0;
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'btn-group', _1: true},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'show',
									_1: !_elm_lang$core$Native_Utils.eq(_p10._0, _rundis$elm_bootstrap$Bootstrap_Dropdown$Closed)
								},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'dropup', _1: config.isDropUp},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				config.attributes),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(buttonsFn, _p11.toggleMsg, _p10),
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$classList(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'dropdown-menu', _1: true},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'dropdown-menu-right', _1: config.hasMenuRight},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							config.menuAttrs),
						A2(
							_elm_lang$core$List$map,
							function (_p13) {
								var _p14 = _p13;
								return _p14._0;
							},
							_p11.items)),
					_1: {ctor: '[]'}
				}));
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$ListenClicks = {ctor: 'ListenClicks'};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$subscriptions = F2(
	function (_p15, toMsg) {
		var _p16 = _p15;
		var _p17 = _p16._0;
		switch (_p17.ctor) {
			case 'Open':
				return _elm_lang$animation_frame$AnimationFrame$times(
					function (_p18) {
						return toMsg(
							_rundis$elm_bootstrap$Bootstrap_Dropdown$State(_rundis$elm_bootstrap$Bootstrap_Dropdown$ListenClicks));
					});
			case 'ListenClicks':
				return _elm_lang$mouse$Mouse$clicks(
					function (_p19) {
						return toMsg(
							_rundis$elm_bootstrap$Bootstrap_Dropdown$State(_rundis$elm_bootstrap$Bootstrap_Dropdown$Closed));
					});
			default:
				return _elm_lang$core$Platform_Sub$none;
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$Open = {ctor: 'Open'};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$toggleOpen = F2(
	function (toMsg, _p20) {
		var _p21 = _p20;
		return toMsg(
			_rundis$elm_bootstrap$Bootstrap_Dropdown$State(
				function () {
					var _p22 = _p21._0;
					switch (_p22.ctor) {
						case 'Open':
							return _rundis$elm_bootstrap$Bootstrap_Dropdown$Closed;
						case 'ListenClicks':
							return _rundis$elm_bootstrap$Bootstrap_Dropdown$Closed;
						default:
							return _rundis$elm_bootstrap$Bootstrap_Dropdown$Open;
					}
				}()));
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$togglePrivate = F4(
	function (buttonOptions, children, toggleMsg, state) {
		return A2(
			_elm_lang$html$Html$button,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(buttonOptions),
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('dropdown-toggle'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('button'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								A2(_rundis$elm_bootstrap$Bootstrap_Dropdown$toggleOpen, toggleMsg, state)),
							_1: {ctor: '[]'}
						}
					}
				}),
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$splitToggleButtonPrivate = F3(
	function (_p23, toggleMsg, state) {
		var _p24 = _p23;
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				_rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(_p24.options),
				_p24.children),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rundis$elm_bootstrap$Bootstrap_Internal_Button$buttonAttributes(_p24.togglerOptions),
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-toggle'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('dropdown-toggle-split'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('button'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											A2(_rundis$elm_bootstrap$Bootstrap_Dropdown$toggleOpen, toggleMsg, state)),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		};
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Dropdown$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$MenuAttrs = function (a) {
	return {ctor: 'MenuAttrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$menuAttrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Dropdown$MenuAttrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$AlignMenuRight = {ctor: 'AlignMenuRight'};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$alignMenuRight = _rundis$elm_bootstrap$Bootstrap_Dropdown$AlignMenuRight;
var _rundis$elm_bootstrap$Bootstrap_Dropdown$Dropup = {ctor: 'Dropup'};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$dropUp = _rundis$elm_bootstrap$Bootstrap_Dropdown$Dropup;
var _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownItem = function (a) {
	return {ctor: 'DropdownItem', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$anchorItem = F2(
	function (attributes, children) {
		return _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownItem(
			A2(
				_elm_lang$html$Html$a,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('dropdown-item'),
						_1: {ctor: '[]'}
					},
					attributes),
				children));
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem = F2(
	function (attributes, children) {
		return _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownItem(
			A2(
				_elm_lang$html$Html$button,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('button'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('dropdown-item'),
							_1: {ctor: '[]'}
						}
					},
					attributes),
				children));
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$divider = _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownItem(
	A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('dropdown-divider'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'}));
var _rundis$elm_bootstrap$Bootstrap_Dropdown$header = function (children) {
	return _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownItem(
		A2(
			_elm_lang$html$Html$h6,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('dropdown-header'),
				_1: {ctor: '[]'}
			},
			children));
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownToggle = function (a) {
	return {ctor: 'DropdownToggle', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$toggle = F2(
	function (buttonOptions, children) {
		return _rundis$elm_bootstrap$Bootstrap_Dropdown$DropdownToggle(
			A2(_rundis$elm_bootstrap$Bootstrap_Dropdown$togglePrivate, buttonOptions, children));
	});
var _rundis$elm_bootstrap$Bootstrap_Dropdown$SplitDropdownToggle = function (a) {
	return {ctor: 'SplitDropdownToggle', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Dropdown$splitToggle = function (config) {
	return _rundis$elm_bootstrap$Bootstrap_Dropdown$SplitDropdownToggle(
		_rundis$elm_bootstrap$Bootstrap_Dropdown$splitToggleButtonPrivate(config));
};

var _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeYears = function (years) {
	return (_elm_lang$core$Native_Utils.cmp(years, 2) < 0) ? 'in a year' : A2(
		_elm_lang$core$Basics_ops['++'],
		'in ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(years),
			' years'));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeMonths = function (months) {
	return (_elm_lang$core$Native_Utils.cmp(months, 2) < 0) ? 'in a month' : A2(
		_elm_lang$core$Basics_ops['++'],
		'in ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(months),
			' months'));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeDays = function (days) {
	return (_elm_lang$core$Native_Utils.cmp(days, 2) < 0) ? 'tomorrow' : A2(
		_elm_lang$core$Basics_ops['++'],
		'in ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(days),
			' days'));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeHours = function (hours) {
	return (_elm_lang$core$Native_Utils.cmp(hours, 2) < 0) ? 'in an hour' : A2(
		_elm_lang$core$Basics_ops['++'],
		'in ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(hours),
			' hours'));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeMinutes = function (minutes) {
	return (_elm_lang$core$Native_Utils.cmp(minutes, 2) < 0) ? 'in a minute' : A2(
		_elm_lang$core$Basics_ops['++'],
		'in ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(minutes),
			' minutes'));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeSeconds = function (seconds) {
	return (_elm_lang$core$Native_Utils.cmp(seconds, 30) < 0) ? 'in a few seconds' : A2(
		_elm_lang$core$Basics_ops['++'],
		'in ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(seconds),
			' seconds'));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeYearsAgo = function (years) {
	return (_elm_lang$core$Native_Utils.cmp(years, 2) < 0) ? 'last year' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(years),
		' years ago');
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeMonthsAgo = function (months) {
	return (_elm_lang$core$Native_Utils.cmp(months, 2) < 0) ? 'last month' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(months),
		' months ago');
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeDaysAgo = function (days) {
	return (_elm_lang$core$Native_Utils.cmp(days, 2) < 0) ? 'yesterday' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(days),
		' days ago');
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeHoursAgo = function (hours) {
	return (_elm_lang$core$Native_Utils.cmp(hours, 2) < 0) ? 'an hour ago' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(hours),
		' hours ago');
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeMinutesAgo = function (minutes) {
	return (_elm_lang$core$Native_Utils.cmp(minutes, 2) < 0) ? 'a minute ago' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(minutes),
		' minutes ago');
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeSecondsAgo = function (seconds) {
	return (_elm_lang$core$Native_Utils.cmp(seconds, 30) < 0) ? 'just now' : A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(seconds),
		' seconds ago');
};
var _ryannhg$elm_date_format$DateFormat_Relative$relativeTimeWithFunctions = F2(
	function (time, functions) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Time$inMinutes(time),
			1) < 0) ? functions.seconds(
			_elm_lang$core$Basics$floor(
				_elm_lang$core$Time$inSeconds(time))) : ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Time$inHours(time),
			1) < 0) ? functions.minutes(
			_elm_lang$core$Basics$floor(
				_elm_lang$core$Time$inMinutes(time))) : ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Time$inHours(time),
			24) < 0) ? functions.hours(
			_elm_lang$core$Basics$floor(
				_elm_lang$core$Time$inHours(time) / 1)) : ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Time$inHours(time),
			24 * 30) < 0) ? functions.days(
			_elm_lang$core$Basics$floor(
				_elm_lang$core$Time$inHours(time) / 24)) : ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Time$inHours(time),
			24 * 365) < 0) ? functions.months(
			_elm_lang$core$Basics$floor(
				(_elm_lang$core$Time$inHours(time) / 24) / 12)) : functions.years(
			_elm_lang$core$Basics$floor(
				(_elm_lang$core$Time$inHours(time) / 24) / 365))))));
	});
var _ryannhg$elm_date_format$DateFormat_Relative$toSeconds = function (date) {
	return _elm_lang$core$Time$inSeconds(
		_elm_lang$core$Date$toTime(date));
};
var _ryannhg$elm_date_format$DateFormat_Relative$defaultRelativeOptions = {someSecondsAgo: _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeSecondsAgo, someMinutesAgo: _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeMinutesAgo, someHoursAgo: _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeHoursAgo, someDaysAgo: _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeDaysAgo, someMonthsAgo: _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeMonthsAgo, someYearsAgo: _ryannhg$elm_date_format$DateFormat_Relative$defaultSomeYearsAgo, inSomeSeconds: _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeSeconds, inSomeMinutes: _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeMinutes, inSomeHours: _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeHours, inSomeDays: _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeDays, inSomeMonths: _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeMonths, inSomeYears: _ryannhg$elm_date_format$DateFormat_Relative$defaultInSomeYears};
var _ryannhg$elm_date_format$DateFormat_Relative$RelativeTimeOptions = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {someSecondsAgo: a, someMinutesAgo: b, someHoursAgo: c, someDaysAgo: d, someMonthsAgo: e, someYearsAgo: f, inSomeSeconds: g, inSomeMinutes: h, inSomeHours: i, inSomeDays: j, inSomeMonths: k, inSomeYears: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _ryannhg$elm_date_format$DateFormat_Relative$RelativeTimeFunctions = F6(
	function (a, b, c, d, e, f) {
		return {seconds: a, minutes: b, hours: c, days: d, months: e, years: f};
	});
var _ryannhg$elm_date_format$DateFormat_Relative$relativeTimeWithOptions = F3(
	function (options, start, end) {
		var differenceInSeconds = _ryannhg$elm_date_format$DateFormat_Relative$toSeconds(end) - _ryannhg$elm_date_format$DateFormat_Relative$toSeconds(start);
		var time = _elm_lang$core$Time$second * _elm_lang$core$Basics$abs(differenceInSeconds);
		return A2(
			_ryannhg$elm_date_format$DateFormat_Relative$relativeTimeWithFunctions,
			time,
			(_elm_lang$core$Native_Utils.cmp(differenceInSeconds, 0) < 0) ? A6(_ryannhg$elm_date_format$DateFormat_Relative$RelativeTimeFunctions, options.someSecondsAgo, options.someMinutesAgo, options.someHoursAgo, options.someDaysAgo, options.someMonthsAgo, options.someYearsAgo) : A6(_ryannhg$elm_date_format$DateFormat_Relative$RelativeTimeFunctions, options.inSomeSeconds, options.inSomeMinutes, options.inSomeHours, options.inSomeDays, options.inSomeMonths, options.inSomeYears));
	});
var _ryannhg$elm_date_format$DateFormat_Relative$relativeTime = _ryannhg$elm_date_format$DateFormat_Relative$relativeTimeWithOptions(_ryannhg$elm_date_format$DateFormat_Relative$defaultRelativeOptions);

var _Giga_dev$newman$Views_JobsTable$filterQuery = F2(
	function (query, job) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, job.id) || (A2(_elm_lang$core$String$startsWith, query, job.buildName) || (A2(_elm_lang$core$String$contains, query, job.suiteName) || (A2(_elm_lang$core$String$contains, query, job.submittedBy) || A2(_elm_lang$core$String$contains, query, job.jobConfigName)))))) ? true : false;
	});
var _Giga_dev$newman$Views_JobsTable$updateAllJobs = F2(
	function (f, model) {
		var newList = f(model.allJobs);
		var filtered = A2(
			_elm_lang$core$List$filter,
			_Giga_dev$newman$Views_JobsTable$filterQuery(model.query),
			newList);
		var newPaginated = A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p0) {
				return filtered;
			},
			model.jobs);
		return _elm_lang$core$Native_Utils.update(
			model,
			{jobs: newPaginated, allJobs: newList});
	});
var _Giga_dev$newman$Views_JobsTable$updateJobAdded = F2(
	function (model, addedJob) {
		return A2(
			_Giga_dev$newman$Views_JobsTable$updateAllJobs,
			function (list) {
				return {ctor: '::', _0: addedJob, _1: list};
			},
			model);
	});
var _Giga_dev$newman$Views_JobsTable$updateJobUpdated = F2(
	function (model, jobToUpdate) {
		var f = A2(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, jobToUpdate.id);
			},
			jobToUpdate);
		return A2(_Giga_dev$newman$Views_JobsTable$updateAllJobs, f, model);
	});
var _Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJob = F2(
	function (model, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobUpdated, model, _p1._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJobs = F2(
	function (model, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A3(
					_elm_lang$core$List$foldr,
					_elm_lang$core$Basics$flip(_Giga_dev$newman$Views_JobsTable$updateJobUpdated),
					model,
					_p2._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Views_JobsTable$updateJobRemoved = F2(
	function (model, jobIdToRemove) {
		var f = _elm_community$list_extra$List_Extra$filterNot(
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, jobIdToRemove);
			});
		return A2(_Giga_dev$newman$Views_JobsTable$updateAllJobs, f, model);
	});
var _Giga_dev$newman$Views_JobsTable$onRequestCompletedDropJob = F3(
	function (jobId, model, result) {
		var _p3 = result;
		if (_p3.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobRemoved, model, jobId),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Views_JobsTable$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {allJobs: a, jobs: b, pageSize: c, confirmationState: d, jobToDrop: e, query: f, actionState: g};
	});
var _Giga_dev$newman$Views_JobsTable$init = function (jobs) {
	var pageSize = 15;
	return A7(
		_Giga_dev$newman$Views_JobsTable$Model,
		jobs,
		A2(_jschomay$elm_paginate$Paginate$fromList, pageSize, jobs),
		pageSize,
		_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		_elm_lang$core$Maybe$Nothing,
		'',
		_rundis$elm_bootstrap$Bootstrap_Dropdown$initialState);
};
var _Giga_dev$newman$Views_JobsTable$ActionStateMsg = function (a) {
	return {ctor: 'ActionStateMsg', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$subscriptions = function (model) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Dropdown$subscriptions, model.actionState, _Giga_dev$newman$Views_JobsTable$ActionStateMsg);
};
var _Giga_dev$newman$Views_JobsTable$ResumeAll = {ctor: 'ResumeAll'};
var _Giga_dev$newman$Views_JobsTable$PauseAll = {ctor: 'PauseAll'};
var _Giga_dev$newman$Views_JobsTable$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Views_JobsTable$WebSocketEvent);
};
var _Giga_dev$newman$Views_JobsTable$RequestCompletedDropJob = F2(
	function (a, b) {
		return {ctor: 'RequestCompletedDropJob', _0: a, _1: b};
	});
var _Giga_dev$newman$Views_JobsTable$dropJobCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedDropJob(jobId),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/job/', jobId),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Views_JobsTable$OnJobDropConfirmed = function (a) {
	return {ctor: 'OnJobDropConfirmed', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$OnClickJobDrop = function (a) {
	return {ctor: 'OnClickJobDrop', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs = function (a) {
	return {ctor: 'RequestCompletedToggleJobs', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$toggleJobsPauseCmd = function (jobIds) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs,
		A3(
			_elm_lang$http$Http$post,
			'/api/newman/jobs/pause/',
			_elm_lang$http$Http$jsonBody(
				_Giga_dev$newman$Utils_Types$encodeListOfStrings(jobIds)),
			_Giga_dev$newman$Utils_Types$decodeJobList));
};
var _Giga_dev$newman$Views_JobsTable$toggleJobsResumeCmd = function (jobIds) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs,
		A3(
			_elm_lang$http$Http$post,
			'/api/newman/jobs/resume/',
			_elm_lang$http$Http$jsonBody(
				_Giga_dev$newman$Utils_Types$encodeListOfStrings(jobIds)),
			_Giga_dev$newman$Utils_Types$decodeJobList));
};
var _Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJob = function (a) {
	return {ctor: 'RequestCompletedToggleJob', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$toggleJobCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJob,
		A3(
			_elm_lang$http$Http$post,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job/',
				A2(_elm_lang$core$Basics_ops['++'], jobId, '/toggle')),
			_elm_lang$http$Http$emptyBody,
			_Giga_dev$newman$Utils_Types$decodeJob));
};
var _Giga_dev$newman$Views_JobsTable$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$first(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$prev(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$next(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: _jschomay$elm_paginate$Paginate$last(model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobs: A2(_jschomay$elm_paginate$Paginate$goTo, _p4._0, model.jobs)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p5 = _p4._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p5,
							jobs: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								model.pageSize,
								A2(
									_elm_lang$core$List$filter,
									_Giga_dev$newman$Views_JobsTable$filterQuery(_p5),
									model.allJobs))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickToggleJob':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Views_JobsTable$toggleJobCmd(_p4._0)
				};
			case 'RequestCompletedToggleJob':
				return A2(_Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJob, model, _p4._0);
			case 'RequestCompletedToggleJobs':
				return A2(_Giga_dev$newman$Views_JobsTable$onRequestCompletedToggleJobs, model, _p4._0);
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{jobToDrop: _elm_lang$core$Maybe$Nothing, confirmationState: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickJobDrop':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							jobToDrop: _elm_lang$core$Maybe$Just(_p4._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnJobDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Views_JobsTable$dropJobCmd(_p4._0)
				};
			case 'RequestCompletedDropJob':
				return A3(_Giga_dev$newman$Views_JobsTable$onRequestCompletedDropJob, _p4._0, model, _p4._1);
			case 'WebSocketEvent':
				var _p6 = _p4._0;
				switch (_p6.ctor) {
					case 'CreatedJob':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobAdded, model, _p6._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'ModifiedJob':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Views_JobsTable$updateJobUpdated, model, _p6._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'PauseAll':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Views_JobsTable$toggleJobsPauseCmd(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.id;
							},
							A2(
								_elm_lang$core$List$filter,
								function (job) {
									return _elm_lang$core$Native_Utils.eq(job.state, _Giga_dev$newman$Utils_Types$RUNNING) || _elm_lang$core$Native_Utils.eq(job.state, _Giga_dev$newman$Utils_Types$READY);
								},
								_jschomay$elm_paginate$Paginate$allItems(model.jobs))))
				};
			case 'ResumeAll':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Views_JobsTable$toggleJobsResumeCmd(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.id;
							},
							A2(
								_elm_lang$core$List$filter,
								function (job) {
									return _elm_lang$core$Native_Utils.eq(job.state, _Giga_dev$newman$Utils_Types$PAUSED);
								},
								_jschomay$elm_paginate$Paginate$allItems(model.jobs))))
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{actionState: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Views_JobsTable$OnClickToggleJob = function (a) {
	return {ctor: 'OnClickToggleJob', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$viewJob = F2(
	function (currTime, job) {
		var emptyAgentGroups = function (maybeAgentGroups) {
			var _p7 = maybeAgentGroups;
			if (_p7.ctor === '[]') {
				return 'N/A';
			} else {
				return A2(_elm_lang$core$String$join, ',', maybeAgentGroups);
			}
		};
		var playPauseButton = function () {
			var _p8 = job.state;
			if (_p8.ctor === 'PAUSED') {
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$success,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
									_Giga_dev$newman$Views_JobsTable$OnClickToggleJob(job.id)),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ion-play'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					});
			} else {
				var _p9 = _p8;
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$warning,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(
									(!_elm_lang$core$Native_Utils.eq(_p9, _Giga_dev$newman$Utils_Types$RUNNING)) && (!_elm_lang$core$Native_Utils.eq(_p9, _Giga_dev$newman$Utils_Types$READY))),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										_Giga_dev$newman$Views_JobsTable$OnClickToggleJob(job.id)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('ion-pause'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					});
			}
		}();
		var durationText = function () {
			var diffTime = function () {
				var _p10 = {ctor: '_Tuple3', _0: job.startTime, _1: job.endTime, _2: currTime};
				_v7_2:
				do {
					if (_p10._0.ctor === 'Just') {
						if (_p10._1.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(
								A2(
									_rluiten$elm_date_extra$Date_Extra_Duration$diff,
									_elm_lang$core$Date$fromTime(
										_elm_lang$core$Basics$toFloat(_p10._1._0)),
									_elm_lang$core$Date$fromTime(
										_elm_lang$core$Basics$toFloat(_p10._0._0))));
						} else {
							if (_p10._2.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(
									A2(
										_rluiten$elm_date_extra$Date_Extra_Duration$diff,
										_elm_lang$core$Date$fromTime(_p10._2._0),
										_elm_lang$core$Date$fromTime(
											_elm_lang$core$Basics$toFloat(_p10._0._0))));
							} else {
								break _v7_2;
							}
						}
					} else {
						break _v7_2;
					}
				} while(false);
				return _elm_lang$core$Maybe$Nothing;
			}();
			var _p11 = diffTime;
			if (_p11.ctor === 'Just') {
				var _p12 = _p11._0;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p12.hour),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'h, ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p12.minute),
							'm')));
			} else {
				return '';
			}
		}();
		var submittedTimeHour = A2(
			_ryannhg$elm_date_format$DateFormat_Relative$relativeTime,
			_elm_lang$core$Date$fromTime(
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Basics$toFloat(job.submitTime),
					currTime)),
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(job.submitTime)));
		var submittedTimeHourFull = A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(job.submitTime)));
		var jobState = function () {
			var badge = function () {
				var _p13 = job.state;
				switch (_p13.ctor) {
					case 'BROKEN':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
					case 'DONE':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
					case 'RUNNING':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
					case 'PAUSED':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning;
					default:
						return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
				}
			}();
			return A2(
				badge,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('newman-job-state-label'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_Giga_dev$newman$Utils_Types$jobStateToString(job.state)),
					_1: {ctor: '[]'}
				});
		}();
		var progressPercent = (((job.failedTests + job.passedTests) * 100) / job.totalTests) | 0;
		var progress = _rundis$elm_bootstrap$Bootstrap_Progress$progress(
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Progress$customLabel(
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(progressPercent),
								' %')),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Progress$value(
						_elm_lang$core$Basics$toFloat(progressPercent)),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Progress$info,
						_1: {ctor: '[]'}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'succeed-row',
							_1: _elm_lang$core$Native_Utils.eq(job.passedTests, job.totalTests)
						},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: jobState,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: progress,
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'#job/',
												A2(_elm_lang$core$Basics_ops['++'], job.id, '/ALL'))),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title(job.id),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(job.id),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title(job.suiteName),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(job.suiteName),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title(job.jobConfigName),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(job.jobConfigName),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(durationText),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title(submittedTimeHourFull),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(submittedTimeHour),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href(
																A2(_elm_lang$core$Basics_ops['++'], '#build/', job.buildId)),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$title(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		job.buildName,
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			' (',
																			A2(_elm_lang$core$Basics_ops['++'], job.buildBranch, ')')))),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	job.buildName,
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		' (',
																		A2(_elm_lang$core$Basics_ops['++'], job.buildBranch, ')')))),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(job.submittedBy),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$td,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																_elm_lang$core$Basics$toString(
																	_elm_lang$core$List$length(job.preparingAgents))),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$td,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(
																	emptyAgentGroups(job.agentGroups)),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$td,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$a,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$href(
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								'#job/',
																								A2(_elm_lang$core$Basics_ops['++'], job.id, '/RUNNING'))),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$title('Running Tests'),
																							_1: {ctor: '[]'}
																						}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(job.runningTests)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('/ '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$a,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Attributes$href(
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										'#job/',
																										A2(_elm_lang$core$Basics_ops['++'], job.id, '/SUCCESS'))),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$title('Passed Tests'),
																									_1: {ctor: '[]'}
																								}
																							}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text(
																								_elm_lang$core$Basics$toString(job.passedTests)),
																							_1: {ctor: '[]'}
																						}),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('/ '),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$a,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$href(
																											A2(
																												_elm_lang$core$Basics_ops['++'],
																												'#job/',
																												A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAIL'))),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$title('Failed Tests'),
																											_1: {ctor: '[]'}
																										}
																									}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text(
																										_elm_lang$core$Basics$toString(job.failedTests)),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('/ '),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$style(
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}
																								},
																								{
																									ctor: '::',
																									_0: A2(
																										_elm_lang$html$Html$a,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																											_1: {
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$href(
																													A2(
																														_elm_lang$core$Basics_ops['++'],
																														'#job/',
																														A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAILED3TIMES'))),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
																													_1: {ctor: '[]'}
																												}
																											}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text(
																												_elm_lang$core$Basics$toString(job.failed3TimesTests)),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html$text('/ '),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: A2(
																												_elm_lang$html$Html$a,
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																													_1: {
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$href(
																															A2(
																																_elm_lang$core$Basics_ops['++'],
																																'#job/',
																																A2(_elm_lang$core$Basics_ops['++'], job.id, '/ALL'))),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$title('All Tests'),
																															_1: {ctor: '[]'}
																														}
																													}
																												},
																												{
																													ctor: '::',
																													_0: _elm_lang$html$Html$text(
																														_elm_lang$core$Basics$toString(job.totalTests)),
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$td,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Button$button,
																			{
																				ctor: '::',
																				_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
																				_1: {
																					ctor: '::',
																					_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
																					_1: {
																						ctor: '::',
																						_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
																							_Giga_dev$newman$Views_JobsTable$OnClickJobDrop(job.id)),
																						_1: {
																							ctor: '::',
																							_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(
																								!(A2(
																									_elm_lang$core$List$member,
																									job.state,
																									{
																										ctor: '::',
																										_0: _Giga_dev$newman$Utils_Types$DONE,
																										_1: {
																											ctor: '::',
																											_0: _Giga_dev$newman$Utils_Types$PAUSED,
																											_1: {
																												ctor: '::',
																												_0: _Giga_dev$newman$Utils_Types$BROKEN,
																												_1: {ctor: '[]'}
																											}
																										}
																									}) && ((_elm_lang$core$Native_Utils.cmp(job.runningTests, 0) < 1) && (_elm_lang$core$Native_Utils.cmp(
																									_elm_lang$core$List$length(job.agents),
																									0) < 1)))),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$span,
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$class('ion-close'),
																						_1: {ctor: '[]'}
																					},
																					{ctor: '[]'}),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' '),
																			_1: {
																				ctor: '::',
																				_0: playPauseButton,
																				_1: {ctor: '[]'}
																			}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _Giga_dev$newman$Views_JobsTable$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Views_JobsTable$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Views_JobsTable$Next = {ctor: 'Next'};
var _Giga_dev$newman$Views_JobsTable$Last = {ctor: 'Last'};
var _Giga_dev$newman$Views_JobsTable$First = {ctor: 'First'};
var _Giga_dev$newman$Views_JobsTable$viewTable = F2(
	function (model, currTime) {
		var actionButton = A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Dropdown$dropdown,
					model.actionState,
					{
						options: {ctor: '[]'},
						toggleMsg: _Giga_dev$newman$Views_JobsTable$ActionStateMsg,
						toggleButton: A2(
							_rundis$elm_bootstrap$Bootstrap_Dropdown$toggle,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Actions'),
								_1: {ctor: '[]'}
							}),
						items: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$PauseAll),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Pause All'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Dropdown$buttonItem,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$ResumeAll),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Resume All'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			});
		var widthPct = function (pct) {
			return _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: pct},
					_1: {ctor: '[]'}
				});
		};
		var pagerButtonView = F2(
			function (index, isActive) {
				var _p14 = isActive;
				if (_p14 === true) {
					return A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-item active'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('page-link'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(index)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('sr-only'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('(current)'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-item'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_Giga_dev$newman$Views_JobsTable$GoTo(index)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('page-link'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(index)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				}
			});
		var nextButtons = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.jobs)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$Next),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('›'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'disabled',
										_1: _jschomay$elm_paginate$Paginate$isLast(model.jobs)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$Last),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('»'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
		var prevButtons = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.jobs)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$First),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('«'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'disabled',
										_1: _jschomay$elm_paginate$Paginate$isFirst(model.jobs)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_JobsTable$Prev),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('‹'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
		var pagination = A2(
			_elm_lang$html$Html$nav,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pagination '),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						prevButtons,
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_jschomay$elm_paginate$Paginate$pager, pagerButtonView, model.jobs),
							nextButtons))),
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form-inline'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-group'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Views_JobsTable$FilterQuery),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form-group'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: pagination,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: actionButton,
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$thead,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('job-tests-state'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('State'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('job-tests-progress'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Progess'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: widthPct('8%'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Job Id'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: widthPct('8%'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Suite'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{
																	ctor: '::',
																	_0: widthPct('6%'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Job Conf.'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{
																		ctor: '::',
																		_0: widthPct('6%'),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Duration'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{
																			ctor: '::',
																			_0: widthPct('8%'),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Submitted At'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{
																				ctor: '::',
																				_0: widthPct('11%'),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Build'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{
																					ctor: '::',
																					_0: widthPct('8%'),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Submitted By'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$th,
																					{
																						ctor: '::',
																						_0: widthPct('7%'),
																						_1: {ctor: '[]'}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('# p. agents'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_elm_lang$html$Html$th,
																						{
																							ctor: '::',
																							_0: widthPct('11%'),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Agent Groups'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$th,
																							{
																								ctor: '::',
																								_0: widthPct('17%'),
																								_1: {ctor: '[]'}
																							},
																							{
																								ctor: '::',
																								_0: A2(
																									_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$title('Running Tests'),
																											_1: {ctor: '[]'}
																										}
																									},
																									{
																										ctor: '::',
																										_0: _elm_lang$html$Html$text('Run'),
																										_1: {ctor: '[]'}
																									}),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('/ '),
																									_1: {
																										ctor: '::',
																										_0: A2(
																											_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html_Attributes$title('Passed Tests'),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Pass'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('/ '),
																											_1: {
																												ctor: '::',
																												_0: A2(
																													_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html_Attributes$title('Failed Tests'),
																															_1: {ctor: '[]'}
																														}
																													},
																													{
																														ctor: '::',
																														_0: _elm_lang$html$Html$text('Fail'),
																														_1: {ctor: '[]'}
																													}),
																												_1: {
																													ctor: '::',
																													_0: _elm_lang$html$Html$text('/ '),
																													_1: {
																														ctor: '::',
																														_0: A2(
																															_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																																_1: {
																																	ctor: '::',
																																	_0: _elm_lang$html$Html_Attributes$style(
																																		{
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																																			_1: {ctor: '[]'}
																																		}),
																																	_1: {
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
																																		_1: {ctor: '[]'}
																																	}
																																}
																															},
																															{
																																ctor: '::',
																																_0: _elm_lang$html$Html$text('3xFail'),
																																_1: {ctor: '[]'}
																															}),
																														_1: {
																															ctor: '::',
																															_0: _elm_lang$html$Html$text('/ '),
																															_1: {
																																ctor: '::',
																																_0: A2(
																																	_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html_Attributes$class('job-tests-badge'),
																																		_1: {
																																			ctor: '::',
																																			_0: _elm_lang$html$Html_Attributes$title('All Tests'),
																																			_1: {ctor: '[]'}
																																		}
																																	},
																																	{
																																		ctor: '::',
																																		_0: _elm_lang$html$Html$text('Total'),
																																		_1: {ctor: '[]'}
																																	}),
																																_1: {ctor: '[]'}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_elm_lang$html$Html$th,
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html_Attributes$width(80),
																									_1: {ctor: '[]'}
																								},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Actions'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tbody,
									{ctor: '[]'},
									A2(
										_elm_lang$core$List$map,
										_Giga_dev$newman$Views_JobsTable$viewJob(currTime),
										_jschomay$elm_paginate$Paginate$page(model.jobs))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: pagination,
						_1: {
							ctor: '::',
							_0: A4(_Giga_dev$newman$Views_NewmanModal$confirmJobDrop, model.jobToDrop, _Giga_dev$newman$Views_JobsTable$NewmanModalMsg, _Giga_dev$newman$Views_JobsTable$OnJobDropConfirmed, model.confirmationState),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});

var _Giga_dev$newman$Pages_Build$initModel = function () {
	var maxEntries = 40;
	return {maybeBuild: _elm_lang$core$Maybe$Nothing, maybeJobsTableModel: _elm_lang$core$Maybe$Nothing, currTime: _elm_lang$core$Maybe$Nothing};
}();
var _Giga_dev$newman$Pages_Build$parseBuildId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Build$Model = F3(
	function (a, b, c) {
		return {maybeBuild: a, maybeJobsTableModel: b, currTime: c};
	});
var _Giga_dev$newman$Pages_Build$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Build$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Build$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Build$ReceiveTime = function (a) {
	return {ctor: 'ReceiveTime', _0: a};
};
var _Giga_dev$newman$Pages_Build$requestTime = A2(_elm_lang$core$Task$perform, _Giga_dev$newman$Pages_Build$ReceiveTime, _elm_lang$core$Time$now);
var _Giga_dev$newman$Pages_Build$JobsTableMsg = function (a) {
	return {ctor: 'JobsTableMsg', _0: a};
};
var _Giga_dev$newman$Pages_Build$view = function (model) {
	var _p0 = {ctor: '_Tuple2', _0: model.maybeBuild, _1: model.maybeJobsTableModel};
	if (((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'Just')) && (_p0._1.ctor === 'Just')) {
		var _p6 = _p0._0._0;
		var viewRow = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(100),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p2._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _p2._1,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		};
		var shasRows = function () {
			var toShaRow = function (_p3) {
				var _p4 = _p3;
				var _p5 = _p4._1;
				return viewRow(
					{
						ctor: '_Tuple2',
						_0: _p4._0,
						_1: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(_p5),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p5),
								_1: {ctor: '[]'}
							})
					});
			};
			return A2(
				_elm_lang$core$List$map,
				toShaRow,
				_elm_lang$core$Dict$toList(_p6.shas));
		}();
		var viewResource = function (resource) {
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(resource),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(resource),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		};
		var resourcesRow = A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'vertical-align', _1: 'top'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Resources'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$ul,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, viewResource, _p6.resources)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
		var buildDate = A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(_p6.buildTime)));
		var jobsTableView = A2(
			_elm_lang$html$Html$map,
			_Giga_dev$newman$Pages_Build$JobsTableMsg,
			A2(_Giga_dev$newman$Views_JobsTable$viewTable, _p0._1._0, model.currTime));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('text'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'Details for build ', _p6.name)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{ctor: '[]'},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: viewRow(
									{
										ctor: '_Tuple2',
										_0: 'Build Id',
										_1: _elm_lang$html$Html$text(_p6.id)
									}),
								_1: {
									ctor: '::',
									_0: viewRow(
										{
											ctor: '_Tuple2',
											_0: 'Branch',
											_1: _elm_lang$html$Html$text(_p6.branch)
										}),
									_1: {
										ctor: '::',
										_0: viewRow(
											{
												ctor: '_Tuple2',
												_0: 'Tags',
												_1: _elm_lang$html$Html$text(
													A2(_elm_lang$core$String$join, ',', _p6.tags))
											}),
										_1: {
											ctor: '::',
											_0: viewRow(
												{
													ctor: '_Tuple2',
													_0: 'Build Time',
													_1: _elm_lang$html$Html$text(buildDate)
												}),
											_1: {
												ctor: '::',
												_0: resourcesRow,
												_1: {
													ctor: '::',
													_0: viewRow(
														{
															ctor: '_Tuple2',
															_0: 'Test Metadata',
															_1: _elm_lang$html$Html$text(
																A2(_elm_lang$core$String$join, ',', _p6.testsMetadata))
														}),
													_1: {
														ctor: '::',
														_0: viewRow(
															{
																ctor: '_Tuple2',
																_0: 'Commits:',
																_1: _elm_lang$html$Html$text('')
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							shasRows)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h2,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('text'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Participate in the following jobs:'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: jobsTableView,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _Giga_dev$newman$Pages_Build$GetJobsInfoCompleted = function (a) {
	return {ctor: 'GetJobsInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Build$getJobsInfoCmd = function (buildId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Build$GetJobsInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job?buildId=',
				A2(_elm_lang$core$Basics_ops['++'], buildId, '&all=true')),
			A2(
				_elm_lang$core$Json_Decode$field,
				'values',
				_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeJob))));
};
var _Giga_dev$newman$Pages_Build$update = F2(
	function (msg, model) {
		var d = A2(
			_elm_lang$core$Debug$log,
			'Build.update',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'was called',
				_elm_lang$core$Basics$toString(msg)));
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'GetBuildInfoCompleted':
				var _p8 = _p7._0;
				if (_p8.ctor === 'Ok') {
					var _p9 = _p8._0;
					var d = A2(_elm_lang$core$Debug$log, 'Build.update', 'was called');
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeBuild: _elm_lang$core$Maybe$Just(_p9)
							}),
						_1: _Giga_dev$newman$Pages_Build$getJobsInfoCmd(_p9.id)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetJobsInfoCompleted':
				var _p10 = _p7._0;
				if (_p10.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeJobsTableModel: _elm_lang$core$Maybe$Just(
									_Giga_dev$newman$Views_JobsTable$init(_p10._0))
							}),
						_1: _Giga_dev$newman$Pages_Build$requestTime
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'JobsTableMsg':
				var _p13 = _p7._0;
				var _p11 = function () {
					var _p12 = model.maybeJobsTableModel;
					if (_p12.ctor === 'Just') {
						return A2(_Giga_dev$newman$Views_JobsTable$update, _p13, _p12._0);
					} else {
						return A2(
							_Giga_dev$newman$Views_JobsTable$update,
							_p13,
							_Giga_dev$newman$Views_JobsTable$init(
								{ctor: '[]'}));
					}
				}();
				var updatedJobsTableModel = _p11._0;
				var cmd = _p11._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							maybeJobsTableModel: _elm_lang$core$Maybe$Just(updatedJobsTableModel)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Build$JobsTableMsg, cmd),
							_1: {
								ctor: '::',
								_0: _Giga_dev$newman$Pages_Build$requestTime,
								_1: {ctor: '[]'}
							}
						})
				};
			case 'ReceiveTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currTime: _elm_lang$core$Maybe$Just(_p7._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p14 = _p7._0;
				if (_p14.ctor === 'ModifiedBuild') {
					var _p16 = _p14._0;
					var _p15 = model.maybeBuild;
					if (_p15.ctor === 'Just') {
						return _elm_lang$core$Native_Utils.eq(_p15._0.id, _p16.id) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									maybeBuild: _elm_lang$core$Maybe$Just(_p16)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_Build$GetBuildInfoCompleted = function (a) {
	return {ctor: 'GetBuildInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Build$getBuildInfoCmd = function (buildId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Build$GetBuildInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/build/', buildId),
			_Giga_dev$newman$Utils_Types$decodeBuild));
};
var _Giga_dev$newman$Pages_Build$initCmd = function (buildId) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _Giga_dev$newman$Pages_Build$getBuildInfoCmd(buildId),
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Build$requestTime,
				_1: {ctor: '[]'}
			}
		});
};

var _rundis$elm_bootstrap$Bootstrap_Form_Select$sizeAttribute = function (size) {
	return A2(
		_elm_lang$core$Maybe$map,
		function (s) {
			return _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'form-control-', s));
		},
		_rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption(size));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$applyModifier = F2(
	function (modifier, options) {
		var _p0 = modifier;
		switch (_p0.ctor) {
			case 'Size':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						size: _elm_lang$core$Maybe$Just(_p0._0)
					});
			case 'Id':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						id: _elm_lang$core$Maybe$Just(_p0._0)
					});
			case 'Custom':
				return _elm_lang$core$Native_Utils.update(
					options,
					{custom: true});
			case 'Disabled':
				return _elm_lang$core$Native_Utils.update(
					options,
					{disabled: _p0._0});
			case 'OnChange':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						onChange: _elm_lang$core$Maybe$Just(_p0._0)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p0._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Select$defaultOptions = {
	id: _elm_lang$core$Maybe$Nothing,
	size: _elm_lang$core$Maybe$Nothing,
	custom: false,
	disabled: false,
	onChange: _elm_lang$core$Maybe$Nothing,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$customEventOnChange = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$toAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Form_Select$applyModifier, _rundis$elm_bootstrap$Bootstrap_Form_Select$defaultOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: options.custom ? _elm_lang$html$Html_Attributes$class('custom-select form-control') : _elm_lang$html$Html_Attributes$class('form-control'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$disabled(options.disabled),
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$id, options.id),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Maybe$andThen, _rundis$elm_bootstrap$Bootstrap_Form_Select$sizeAttribute, options.size),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Maybe$map, _rundis$elm_bootstrap$Bootstrap_Form_Select$customEventOnChange, options.onChange),
							_1: {ctor: '[]'}
						}
					}
				}),
			options.attributes));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$view = function (_p1) {
	var _p2 = _p1;
	return A2(
		_elm_lang$html$Html$select,
		_rundis$elm_bootstrap$Bootstrap_Form_Select$toAttributes(_p2._0.options),
		A2(
			_elm_lang$core$List$map,
			function (_p3) {
				var _p4 = _p3;
				return _p4._0;
			},
			_p2._0.items));
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Options = F6(
	function (a, b, c, d, e, f) {
		return {id: a, size: b, disabled: c, custom: d, onChange: e, attributes: f};
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$create = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Select$Select(
			{options: options, items: items});
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Select$select = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Select$view(
			A2(_rundis$elm_bootstrap$Bootstrap_Form_Select$create, options, items));
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Item = function (a) {
	return {ctor: 'Item', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$item = F2(
	function (attributes, children) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Select$Item(
			A2(_elm_lang$html$Html$option, attributes, children));
	});
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Select$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$OnChange = function (a) {
	return {ctor: 'OnChange', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange = function (toMsg) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Select$OnChange(toMsg);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Disabled = function (a) {
	return {ctor: 'Disabled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$disabled = function (disabled) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Select$Disabled(disabled);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Custom = {ctor: 'Custom'};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$custom = function (options) {
	return function (_p5) {
		return _rundis$elm_bootstrap$Bootstrap_Form_Select$view(
			A2(
				_rundis$elm_bootstrap$Bootstrap_Form_Select$create,
				{ctor: '::', _0: _rundis$elm_bootstrap$Bootstrap_Form_Select$Custom, _1: options},
				_p5));
	};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Id = function (a) {
	return {ctor: 'Id', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$id = function (id) {
	return _rundis$elm_bootstrap$Bootstrap_Form_Select$Id(id);
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$Size = function (a) {
	return {ctor: 'Size', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Form_Select$small = _rundis$elm_bootstrap$Bootstrap_Form_Select$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM);
var _rundis$elm_bootstrap$Bootstrap_Form_Select$large = _rundis$elm_bootstrap$Bootstrap_Form_Select$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG);

var _Giga_dev$newman$Views_CompareBuilds$begingOfUrl = function (repo) {
	var _p0 = repo;
	switch (_p0) {
		case 'xap-open':
			return 'https://github.com/xap/xap';
		case 'xap':
			return 'https://github.com/Gigaspaces/xap-premium';
		case 'InsightEdge':
			return 'https://github.com/Insightedge/insightedge';
		default:
			return 'WrongRepo';
	}
};
var _Giga_dev$newman$Views_CompareBuilds$getSha = function (fullShaUrl) {
	var _p1 = _elm_lang$core$List$head(
		_elm_lang$core$List$reverse(
			A2(_elm_lang$core$String$split, '/', fullShaUrl)));
	if (_p1.ctor === 'Just') {
		return _p1._0;
	} else {
		return '';
	}
};
var _Giga_dev$newman$Views_CompareBuilds$createUrls = F2(
	function (oldBuildShas, newBuildShas) {
		var _p2 = _elm_lang$core$Dict$isEmpty(oldBuildShas) || _elm_lang$core$Dict$isEmpty(newBuildShas);
		if (_p2 === true) {
			return _elm_lang$core$Dict$empty;
		} else {
			var step = F2(
				function (newKey, newVal) {
					var _p3 = A2(_elm_lang$core$Dict$get, newKey, oldBuildShas);
					if (_p3.ctor === 'Just') {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_Giga_dev$newman$Views_CompareBuilds$begingOfUrl(newKey),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'/compare/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_Giga_dev$newman$Views_CompareBuilds$getSha(_p3._0),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'...',
										_Giga_dev$newman$Views_CompareBuilds$getSha(newVal)))));
					} else {
						return '';
					}
				});
			return A2(_elm_lang$core$Dict$map, step, newBuildShas);
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$viewDialog = F3(
	function (model, toMsg, confirmMsg) {
		var buildBody = function (_p4) {
			var _p5 = _p4;
			var _p7 = _p5._1;
			var _p6 = _elm_lang$core$Native_Utils.eq(_p7, '');
			if (_p6 === true) {
				return A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{ctor: '[]'});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(_p7),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$target('_blank'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(_p5._0),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		};
		var body = F2(
			function (oldShas, newShas) {
				return {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							buildBody,
							_elm_lang$core$Dict$toList(
								A2(_Giga_dev$newman$Views_CompareBuilds$createUrls, oldShas, newShas)))),
					_1: {ctor: '[]'}
				};
			});
		var errorModel = A2(
			_rundis$elm_bootstrap$Bootstrap_Modal$view,
			model.confirmationState,
			A3(
				_rundis$elm_bootstrap$Bootstrap_Modal$footer,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Button$button,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
									toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Close'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A3(
					_rundis$elm_bootstrap$Bootstrap_Modal$h3,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('ERROR! Can\'t find OldBuild or NewBuild :('),
						_1: {ctor: '[]'}
					},
					_rundis$elm_bootstrap$Bootstrap_Modal$large(
						_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg)))));
		var _p8 = model.oldBuild;
		if (_p8.ctor === 'Just') {
			var _p11 = _p8._0;
			var _p9 = model.newBuild;
			if (_p9.ctor === 'Just') {
				var _p10 = _p9._0;
				return A2(
					_rundis$elm_bootstrap$Bootstrap_Modal$view,
					model.confirmationState,
					A3(
						_rundis$elm_bootstrap$Bootstrap_Modal$footer,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Button$button,
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											toMsg(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Close'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A3(
							_rundis$elm_bootstrap$Bootstrap_Modal$body,
							{ctor: '[]'},
							A2(body, _p11.shas, _p10.shas),
							A3(
								_rundis$elm_bootstrap$Bootstrap_Modal$h5,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Compare builds ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p11.name,
												A2(
													_elm_lang$core$Basics_ops['++'],
													' (',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_p11.branch,
														A2(
															_elm_lang$core$Basics_ops['++'],
															') and ',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_p10.name,
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	' (',
																	A2(_elm_lang$core$Basics_ops['++'], _p10.branch, ')'))))))))),
									_1: {ctor: '[]'}
								},
								_rundis$elm_bootstrap$Bootstrap_Modal$large(
									_rundis$elm_bootstrap$Bootstrap_Modal$config(toMsg))))));
			} else {
				return errorModel;
			}
		} else {
			return errorModel;
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$maybeGetBuild = F2(
	function (builds, buildId) {
		var _p12 = buildId;
		if (_p12 === '1') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return A2(
				_elm_community$list_extra$List_Extra$find,
				function (build) {
					return _elm_lang$core$Native_Utils.eq(build.id, _p12);
				},
				builds);
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$onlyNewerBuilds = F2(
	function (builds, newBuild) {
		return A2(
			_elm_lang$core$List$filter,
			function (build) {
				return _elm_lang$core$Native_Utils.cmp(build.buildTime, newBuild.buildTime) > 0;
			},
			builds);
	});
var _Giga_dev$newman$Views_CompareBuilds$update = F2(
	function (msg, model) {
		var _p13 = msg;
		switch (_p13.ctor) {
			case 'UpdateOldBuild':
				var _p14 = A2(_Giga_dev$newman$Views_CompareBuilds$maybeGetBuild, model.allBuilds, _p13._0);
				if (_p14.ctor === 'Just') {
					var _p15 = _p14._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								oldBuild: _elm_lang$core$Maybe$Just(_p15),
								newerBuilds: A2(_Giga_dev$newman$Views_CompareBuilds$onlyNewerBuilds, model.allBuilds, _p15)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{oldBuild: _elm_lang$core$Maybe$Nothing, newBuild: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'UpdateNewBuild':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							newBuild: A2(_Giga_dev$newman$Views_CompareBuilds$maybeGetBuild, model.allBuilds, _p13._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ClickCompareBuilds':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AcknowledgeDialog':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _p13._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p16 = _p13._0;
				if (_p16.ctor === 'CreatedBuild') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								allBuilds: {ctor: '::', _0: _p16._0, _1: model.allBuilds}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Views_CompareBuilds$Model = F5(
	function (a, b, c, d, e) {
		return {allBuilds: a, oldBuild: b, newBuild: c, newerBuilds: d, confirmationState: e};
	});
var _Giga_dev$newman$Views_CompareBuilds$init = function (builds) {
	return A5(_Giga_dev$newman$Views_CompareBuilds$Model, builds, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, builds, _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState);
};
var _Giga_dev$newman$Views_CompareBuilds$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Views_CompareBuilds$WebSocketEvent);
};
var _Giga_dev$newman$Views_CompareBuilds$ModalMsg = function (a) {
	return {ctor: 'ModalMsg', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$AcknowledgeDialog = {ctor: 'AcknowledgeDialog'};
var _Giga_dev$newman$Views_CompareBuilds$ClickCompareBuilds = {ctor: 'ClickCompareBuilds'};
var _Giga_dev$newman$Views_CompareBuilds$UpdateNewBuild = function (a) {
	return {ctor: 'UpdateNewBuild', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$UpdateOldBuild = function (a) {
	return {ctor: 'UpdateOldBuild', _0: a};
};
var _Giga_dev$newman$Views_CompareBuilds$view = function (model) {
	var chooseNewBuild = function (data) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						data.name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' (',
							A2(_elm_lang$core$Basics_ops['++'], data.branch, ')')))),
				_1: {ctor: '[]'}
			});
	};
	var newBuildSelect = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$disabled(
						_elm_lang$core$Native_Utils.eq(model.oldBuild, _elm_lang$core$Maybe$Nothing)),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Views_CompareBuilds$UpdateNewBuild),
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '400px'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value('1'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select New Build'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, chooseNewBuild, model.newerBuilds))),
			_1: {ctor: '[]'}
		});
	var chooseOldBuild = function (data) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						data.name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' (',
							A2(_elm_lang$core$Basics_ops['++'], data.branch, ')')))),
				_1: {ctor: '[]'}
			});
	};
	var oldBuildSelect = A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Views_CompareBuilds$UpdateOldBuild),
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '400px'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value('1'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select Old Build'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, chooseOldBuild, model.allBuilds))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('form-inline'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: oldBuildSelect,
					_1: {
						ctor: '::',
						_0: newBuildSelect,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Button$button,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$disabled(
												_elm_lang$core$Native_Utils.eq(model.oldBuild, _elm_lang$core$Maybe$Nothing) || _elm_lang$core$Native_Utils.eq(model.newBuild, _elm_lang$core$Maybe$Nothing)),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Views_CompareBuilds$ClickCompareBuilds),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Compare Changes'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: A3(_Giga_dev$newman$Views_CompareBuilds$viewDialog, model, _Giga_dev$newman$Views_CompareBuilds$ModalMsg, _Giga_dev$newman$Views_CompareBuilds$AcknowledgeDialog),
				_1: {ctor: '[]'}
			}
		});
};

var _Giga_dev$newman$Pages_Builds$filterQuery = F2(
	function (query, build) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, build.id) || (A2(_elm_lang$core$String$startsWith, query, build.name) || (A2(_elm_lang$core$String$contains, query, build.branch) || A2(
			_elm_lang$core$List$member,
			true,
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$String$startsWith(query),
				build.tags)))))) ? true : false;
	});
var _Giga_dev$newman$Pages_Builds$viewBuild = function (build) {
	var buildTests = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(build.buildStatus.passedTests)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(build.buildStatus.failedTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(build.buildStatus.failed3TimesTests)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' '),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	};
	var buildTags = A2(_elm_lang$core$String$join, ',', build.tags);
	var buildDate = A2(
		_ryannhg$elm_date_format$DateFormat$format,
		_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(build.buildTime)));
	var buildName = A2(
		_elm_lang$core$Basics_ops['++'],
		build.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(buildName),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buildTags),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(build.id),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(buildDate),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('tests-data'),
									_1: {ctor: '[]'}
								},
								buildTests),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Builds$updateAll = F2(
	function (f, model) {
		var newList = f(model.allBuilds);
		var filtered = A2(
			_elm_lang$core$List$filter,
			_Giga_dev$newman$Pages_Builds$filterQuery(model.query),
			newList);
		var newPaginated = A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p0) {
				return filtered;
			},
			model.builds);
		return _elm_lang$core$Native_Utils.update(
			model,
			{builds: newPaginated, allBuilds: newList});
	});
var _Giga_dev$newman$Pages_Builds$updateBuildAdded = F2(
	function (model, addedBuild) {
		return A2(
			_Giga_dev$newman$Pages_Builds$updateAll,
			function (list) {
				return {ctor: '::', _0: addedBuild, _1: list};
			},
			model);
	});
var _Giga_dev$newman$Pages_Builds$Model = F5(
	function (a, b, c, d, e) {
		return {allBuilds: a, builds: b, pageSize: c, compareBuildsModel: d, query: e};
	});
var _Giga_dev$newman$Pages_Builds$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Builds$CompareBuildsMsg = function (a) {
	return {ctor: 'CompareBuildsMsg', _0: a};
};
var _Giga_dev$newman$Pages_Builds$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'GetBuildsCompleted':
				var _p2 = _p1._0;
				if (_p2.ctor === 'Ok') {
					var _p3 = _p2._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								builds: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, _p3),
								allBuilds: _p3,
								compareBuildsModel: _Giga_dev$newman$Views_CompareBuilds$init(_p3)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							builds: _jschomay$elm_paginate$Paginate$first(model.builds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							builds: _jschomay$elm_paginate$Paginate$last(model.builds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							builds: _jschomay$elm_paginate$Paginate$next(model.builds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							builds: _jschomay$elm_paginate$Paginate$prev(model.builds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							builds: A2(_jschomay$elm_paginate$Paginate$goTo, _p1._0, model.builds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p4 = _p1._0;
				var filteredList = A2(
					_elm_lang$core$List$filter,
					_Giga_dev$newman$Pages_Builds$filterQuery(_p4),
					model.allBuilds);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p4,
							builds: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CompareBuildsMsg':
				var _p5 = A2(_Giga_dev$newman$Views_CompareBuilds$update, _p1._0, model.compareBuildsModel);
				var updatedModel = _p5._0;
				var cmd = _p5._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{compareBuildsModel: updatedModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Builds$CompareBuildsMsg, cmd)
				};
			default:
				var _p6 = _p1._0;
				if (_p6.ctor === 'CreatedBuild') {
					return {
						ctor: '_Tuple2',
						_0: A2(_Giga_dev$newman$Pages_Builds$updateBuildAdded, model, _p6._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_Builds$handleEvent = function (event) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Builds$WebSocketEvent),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Pages_Builds$CompareBuildsMsg,
					_Giga_dev$newman$Views_CompareBuilds$handleEvent(event)),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Builds$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Pages_Builds$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Pages_Builds$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Pages_Builds$Next = {ctor: 'Next'};
var _Giga_dev$newman$Pages_Builds$Last = {ctor: 'Last'};
var _Giga_dev$newman$Pages_Builds$First = {ctor: 'First'};
var _Giga_dev$newman$Pages_Builds$view = function (model) {
	var pagerButtonView = F2(
		function (index, isActive) {
			var _p7 = isActive;
			if (_p7 === true) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item active'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sr-only'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('(current)'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_Giga_dev$newman$Pages_Builds$GoTo(index)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		});
	var nextButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isLast(model.builds)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Builds$Next),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('›'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.builds)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Builds$Last),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('»'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var prevButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isFirst(model.builds)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Builds$First),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('«'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.builds)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Builds$Prev),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('‹'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var pagination = A2(
		_elm_lang$html$Html$nav,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination '),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					prevButtons,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_jschomay$elm_paginate$Paginate$pager, pagerButtonView, model.builds),
						nextButtons))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Builds'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$map,
					_Giga_dev$newman$Pages_Builds$CompareBuildsMsg,
					_Giga_dev$newman$Views_CompareBuilds$view(model.compareBuildsModel)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('form-inline'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('form-group'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
													{
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_Builds$FilterQuery),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
															_1: {
																ctor: '::',
																_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
																_1: {ctor: '[]'}
															}
														}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('form-group'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: pagination,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$table,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover builds-table'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$thead,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$tr,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Build'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Tags'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Id'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Build Date'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: A2(
																						_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Passed'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(' '),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Failed'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(' '),
																								_1: {
																									ctor: '::',
																									_0: A2(
																										_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html_Attributes$style(
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																													_1: {ctor: '[]'}
																												}),
																											_1: {ctor: '[]'}
																										},
																										{
																											ctor: '::',
																											_0: _elm_lang$html$Html$text('Failedx3'),
																											_1: {ctor: '[]'}
																										}),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$tbody,
													{ctor: '[]'},
													A2(
														_elm_lang$core$List$map,
														_Giga_dev$newman$Pages_Builds$viewBuild,
														_jschomay$elm_paginate$Paginate$page(model.builds))),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: pagination,
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Builds$GetBuildsCompleted = function (a) {
	return {ctor: 'GetBuildsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Builds$getBuildsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_Builds$GetBuildsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/build?orderBy=-buildTime', _Giga_dev$newman$Utils_Types$decodeBuilds));
var _Giga_dev$newman$Pages_Builds$init = function () {
	var pageSize = 20;
	return {
		ctor: '_Tuple2',
		_0: {
			allBuilds: {ctor: '[]'},
			builds: A2(
				_jschomay$elm_paginate$Paginate$fromList,
				pageSize,
				{ctor: '[]'}),
			pageSize: pageSize,
			compareBuildsModel: _Giga_dev$newman$Views_CompareBuilds$init(
				{ctor: '[]'}),
			query: ''
		},
		_1: _Giga_dev$newman$Pages_Builds$getBuildsCmd
	};
}();

var _Giga_dev$newman$Pages_Home$viewActiveBuild = F2(
	function (activeJobs, build) {
		var viewJobForActiveBuild = function (job) {
			return A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('↳ Job: '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#job/', job.id)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(job.id),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$colspan(2),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tests-data'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'#job/',
																A2(_elm_lang$core$Basics_ops['++'], job.id, '/RUNNING'))),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString(job.runningTests)),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' '),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'#job/',
																		A2(_elm_lang$core$Basics_ops['++'], job.id, '/SUCCESS'))),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																_elm_lang$core$Basics$toString(job.passedTests)),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text(' '),
												_1: {
													ctor: '::',
													_0: A2(
														_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$href(
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				'#job/',
																				A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAIL'))),
																		_1: {ctor: '[]'}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		_elm_lang$core$Basics$toString(job.failedTests)),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text(' '),
														_1: {
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$href(
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						'#job/',
																						A2(_elm_lang$core$Basics_ops['++'], job.id, '/FAILED3TIMES'))),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
																					_1: {ctor: '[]'}
																				}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				_elm_lang$core$Basics$toString(job.failed3TimesTests)),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$a,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$class('tests-num-link'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$href(
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								'#job/',
																								A2(_elm_lang$core$Basics_ops['++'], job.id, '/ALL'))),
																						_1: {ctor: '[]'}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$Basics$toString(job.totalTests)),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(
													A2(_elm_lang$core$Basics_ops['++'], '#suite/', job.suiteId)),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(job.suiteName),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		};
		var buildStatus = build.buildStatus;
		var testsData = {
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(buildStatus.runningTests)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' '),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(buildStatus.passedTests)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(buildStatus.failedTests)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(' '),
								_1: {
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(buildStatus.failed3TimesTests)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' '),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														_elm_lang$core$Basics$toString((buildStatus.totalTests - buildStatus.passedTests) - buildStatus.failedTests)),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		var jobsData = {
			ctor: '::',
			_0: A2(
				_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(buildStatus.doneJobs)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(' '),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(buildStatus.brokenJobs)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Badge$badge,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(buildStatus.totalJobs)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
		var formatDate = function (time) {
			return A2(
				_ryannhg$elm_date_format$DateFormat$format,
				_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
				_elm_lang$core$Date$fromTime(
					_elm_lang$core$Basics$toFloat(time)));
		};
		var buildDate = formatDate(build.buildTime);
		var buildName = A2(
			_elm_lang$core$Basics_ops['++'],
			build.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(buildName),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(buildDate),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('tests-data'),
										_1: {ctor: '[]'}
									},
									testsData),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										jobsData),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											A2(
												_elm_lang$core$List$intersperse,
												_elm_lang$html$Html$text(' '),
												A2(
													_elm_lang$core$List$map,
													function (_p0) {
														var _p1 = _p0;
														return A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href(
																	A2(_elm_lang$core$Basics_ops['++'], '#suite/', _p1._1)),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(_p1._0),
																_1: {ctor: '[]'}
															});
													},
													A2(_elm_community$list_extra$List_Extra$zip, build.buildStatus.suitesNames, build.buildStatus.suitesIds)))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				viewJobForActiveBuild,
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(_elm_lang$core$Dict$get, build.id, activeJobs))));
	});
var _Giga_dev$newman$Pages_Home$viewPendingBuild = function (build) {
	var buildStatus = build.buildStatus;
	var testsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.passedTests)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.failedTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.failed3TimesTests)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' '),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString((buildStatus.totalTests - buildStatus.passedTests) - buildStatus.failedTests)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	};
	var jobsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.doneJobs)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.brokenJobs)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badge,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.totalJobs)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var buildDate = A2(
		_ryannhg$elm_date_format$DateFormat$format,
		_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(build.buildTime)));
	var buildName = A2(
		_elm_lang$core$Basics_ops['++'],
		build.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(buildName),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buildDate),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tests-data'),
							_1: {ctor: '[]'}
						},
						testsData),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							jobsData),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$intersperse,
									_elm_lang$html$Html$text(' '),
									A2(
										_elm_lang$core$List$map,
										function (_p2) {
											var _p3 = _p2;
											return A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href(
														A2(_elm_lang$core$Basics_ops['++'], '#suite/', _p3._1)),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(_p3._0),
													_1: {ctor: '[]'}
												});
										},
										A2(_elm_community$list_extra$List_Extra$zip, build.buildStatus.suitesNames, build.buildStatus.suitesIds)))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Home$widthPcnt = function (pcnt) {
	return _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'width', _1: pcnt},
			_1: {ctor: '[]'}
		});
};
var _Giga_dev$newman$Pages_Home$viewActiveBuilds = F2(
	function (builds, activeJobs) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Active Builds'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-hover history-table'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$thead,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _Giga_dev$newman$Pages_Home$widthPcnt('18%'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Build'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _Giga_dev$newman$Pages_Home$widthPcnt('8%'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Date'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _Giga_dev$newman$Pages_Home$widthPcnt('18%'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Running'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Passed'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Failed'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' '),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html_Attributes$style(
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																									_1: {ctor: '[]'}
																								}),
																							_1: {ctor: '[]'}
																						},
																						{
																							ctor: '::',
																							_0: _elm_lang$html$Html$text('Failed 3 Times'),
																							_1: {ctor: '[]'}
																						}),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(' '),
																						_1: {
																							ctor: '::',
																							_0: A2(
																								_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: _elm_lang$html$Html$text('Pending'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html$text(' | Tests'),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$align('center'),
																_1: {
																	ctor: '::',
																	_0: _Giga_dev$newman$Pages_Home$widthPcnt('15%'),
																	_1: {ctor: '[]'}
																}
															},
															{
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Done'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Broken'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' '),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Total'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(' | Jobs'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Suites'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tbody,
									{ctor: '[]'},
									_elm_lang$core$List$concat(
										A2(
											_elm_lang$core$List$map,
											_Giga_dev$newman$Pages_Home$viewActiveBuild(activeJobs),
											builds))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _Giga_dev$newman$Pages_Home$viewPendingBuilds = function (builds) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Pending Builds'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-hover history-table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _Giga_dev$newman$Pages_Home$widthPcnt('18%'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Build'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _Giga_dev$newman$Pages_Home$widthPcnt('8%'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Date'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _Giga_dev$newman$Pages_Home$widthPcnt('20%'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Passed'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text(' '),
															_1: {
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Failed'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$style(
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'DarkRed'},
																						_1: {ctor: '[]'}
																					}),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Failed 3 Times'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' '),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_rundis$elm_bootstrap$Bootstrap_Badge$badgePrimary,
																					{ctor: '[]'},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text('Pending'),
																						_1: {ctor: '[]'}
																					}),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(' | Tests'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$align('center'),
															_1: {
																ctor: '::',
																_0: _Giga_dev$newman$Pages_Home$widthPcnt('15%'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Done'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Broken'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Total'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' | Jobs'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _Giga_dev$newman$Pages_Home$widthPcnt('42%'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Suites'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _Giga_dev$newman$Pages_Home$viewPendingBuild, builds)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Home$viewHistoryBuild = function (build) {
	var buildStatus = build.buildStatus;
	var testsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.passedTests)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.failedTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badge,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.totalTests)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var jobsData = {
		ctor: '::',
		_0: A2(
			_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_elm_lang$core$Basics$toString(buildStatus.doneJobs)),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html$text(' '),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(buildStatus.brokenJobs)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Badge$badge,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(buildStatus.totalJobs)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var buildDate = A2(
		_ryannhg$elm_date_format$DateFormat$format,
		_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(build.buildTime)));
	var buildName = A2(
		_elm_lang$core$Basics_ops['++'],
		build.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'(',
			A2(_elm_lang$core$Basics_ops['++'], build.branch, ')')));
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#build/', build.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(buildName),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buildDate),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tests-data'),
							_1: {ctor: '[]'}
						},
						testsData),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							jobsData),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$intersperse,
									_elm_lang$html$Html$text(' '),
									A2(
										_elm_lang$core$List$map,
										function (_p4) {
											var _p5 = _p4;
											return A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href(
														A2(_elm_lang$core$Basics_ops['++'], '#suite/', _p5._1)),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(_p5._0),
													_1: {ctor: '[]'}
												});
										},
										A2(_elm_community$list_extra$List_Extra$zip, build.buildStatus.suitesNames, build.buildStatus.suitesIds)))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Home$viewHistory = function (dashboardBuilds) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('History'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover history-table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Build'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Date'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Passed'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text(' '),
															_1: {
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Failed'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(' '),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Total'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' | Tests'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$align('center'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Done'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Broken'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' '),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Badge$badge,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Total'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' | Jobs'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Suites'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, _Giga_dev$newman$Pages_Home$viewHistoryBuild, dashboardBuilds)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Home$onRequestCompletedDropFutureJob = F3(
	function (jobId, model, result) {
		var _p6 = result;
		if (_p6.ctor === 'Ok') {
			var newList = A2(
				_elm_community$list_extra$List_Extra$filterNot,
				function (item) {
					return _elm_lang$core$Native_Utils.eq(item.id, jobId);
				},
				model.futureJobs);
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{futureJobs: newList}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_Home$addToList = F2(
	function (item, list) {
		var newList = {ctor: '::', _0: item, _1: list};
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(newList),
			5) > 0) ? A2(
			_elm_community$list_extra$List_Extra$removeAt,
			_elm_lang$core$List$length(newList) - 1,
			newList) : newList;
	});
var _Giga_dev$newman$Pages_Home$removeFromList = F2(
	function (id, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (item) {
				return !_elm_lang$core$Native_Utils.eq(item.id, id);
			},
			list);
	});
var _Giga_dev$newman$Pages_Home$handleActiveBuilds = F2(
	function (build, model) {
		if (_elm_lang$core$Native_Utils.eq(build.buildStatus.totalJobs, build.buildStatus.doneJobs)) {
			var newHistoryBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.historyBuilds);
			var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.activeBuilds);
			return _elm_lang$core$Native_Utils.update(
				model,
				{activeBuilds: newActiveBuilds, historyBuilds: newHistoryBuilds});
		} else {
			if (_elm_lang$core$Native_Utils.eq(build.buildStatus.runningJobs, 0) && (_elm_lang$core$Native_Utils.cmp(build.buildStatus.pendingJobs, 0) > 0)) {
				var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.pendingBuilds);
				var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.activeBuilds);
				return _elm_lang$core$Native_Utils.update(
					model,
					{activeBuilds: newActiveBuilds, pendingBuilds: newPendingBuilds});
			} else {
				return model;
			}
		}
	});
var _Giga_dev$newman$Pages_Home$handlePendingBuilds = F2(
	function (build, model) {
		if (_elm_lang$core$Native_Utils.eq(build.buildStatus.totalJobs, build.buildStatus.doneJobs)) {
			var newHistoryBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.historyBuilds);
			var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.pendingBuilds);
			return _elm_lang$core$Native_Utils.update(
				model,
				{pendingBuilds: newPendingBuilds, historyBuilds: newHistoryBuilds});
		} else {
			if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.runningJobs, 0) > 0) {
				var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.activeBuilds);
				var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, model.pendingBuilds);
				return _elm_lang$core$Native_Utils.update(
					model,
					{activeBuilds: newActiveBuilds, pendingBuilds: newPendingBuilds});
			} else {
				return model;
			}
		}
	});
var _Giga_dev$newman$Pages_Home$handleHistoryBuilds = F2(
	function (build, orgModel) {
		if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.doneJobs, build.buildStatus.totalJobs) < 0) {
			var newHistoryBuilds = A2(_Giga_dev$newman$Pages_Home$removeFromList, build.id, orgModel.historyBuilds);
			var model = _elm_lang$core$Native_Utils.update(
				orgModel,
				{historyBuilds: newHistoryBuilds});
			if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.runningJobs, 0) > 0) {
				var newActiveBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.activeBuilds);
				return _elm_lang$core$Native_Utils.update(
					model,
					{activeBuilds: newActiveBuilds});
			} else {
				if (_elm_lang$core$Native_Utils.cmp(build.buildStatus.pendingJobs, 0) > 0) {
					var newPendingBuilds = A2(_Giga_dev$newman$Pages_Home$addToList, build, model.pendingBuilds);
					return _elm_lang$core$Native_Utils.update(
						model,
						{pendingBuilds: newPendingBuilds});
				} else {
					return model;
				}
			}
		} else {
			return orgModel;
		}
	});
var _Giga_dev$newman$Pages_Home$updateList = F3(
	function (id, newItem, list) {
		return A3(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, id);
			},
			newItem,
			list);
	});
var _Giga_dev$newman$Pages_Home$findById = F2(
	function (id, list) {
		return A2(
			_elm_lang$core$List$any,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, id);
			},
			list);
	});
var _Giga_dev$newman$Pages_Home$onEventModifiedBuild = F2(
	function (build, model) {
		return A2(_Giga_dev$newman$Pages_Home$findById, build.id, model.activeBuilds) ? A2(_Giga_dev$newman$Pages_Home$handleActiveBuilds, build, model) : (A2(_Giga_dev$newman$Pages_Home$findById, build.id, model.pendingBuilds) ? A2(_Giga_dev$newman$Pages_Home$handlePendingBuilds, build, model) : (A2(_Giga_dev$newman$Pages_Home$findById, build.id, model.historyBuilds) ? A2(_Giga_dev$newman$Pages_Home$handleHistoryBuilds, build, model) : model));
	});
var _Giga_dev$newman$Pages_Home$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {historyBuilds: a, futureJobs: b, pendingBuilds: c, activeBuilds: d, activeJobs: e, confirmationState: f, futureJobToDrop: g};
	});
var _Giga_dev$newman$Pages_Home$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Home$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Home$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Home$RequestCompletedDropFutureJob = F2(
	function (a, b) {
		return {ctor: 'RequestCompletedDropFutureJob', _0: a, _1: b};
	});
var _Giga_dev$newman$Pages_Home$dropFutureJobCmd = function (futureJobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Home$RequestCompletedDropFutureJob(futureJobId),
		_elm_lang$http$Http$request(
			{
				method: 'DELETE',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/deleteFutureJob/', futureJobId),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_Home$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'GetDashboardDataCompleted':
				var _p8 = _p7._0;
				if (_p8.ctor === 'Ok') {
					var _p9 = _p8._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{historyBuilds: _p9.historyBuilds, futureJobs: _p9.futureJobs, pendingBuilds: _p9.pendingBuilds, activeBuilds: _p9.activeBuilds, activeJobs: _p9.activeJobs}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'AA', _p8._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{futureJobToDrop: _elm_lang$core$Maybe$Nothing, confirmationState: _p7._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickDropFutureJob':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							futureJobToDrop: _elm_lang$core$Maybe$Just(_p7._0),
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnFutureJobDropConfirmed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState}),
					_1: _Giga_dev$newman$Pages_Home$dropFutureJobCmd(_p7._0)
				};
			case 'RequestCompletedDropFutureJob':
				return A3(_Giga_dev$newman$Pages_Home$onRequestCompletedDropFutureJob, _p7._0, model, _p7._1);
			default:
				var _p10 = _p7._0;
				switch (_p10.ctor) {
					case 'CreatedFutureJob':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									futureJobs: {ctor: '::', _0: _p10._0, _1: model.futureJobs}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'DeletedFutureJob':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									futureJobs: A2(_Giga_dev$newman$Pages_Home$removeFromList, _p10._0.id, model.futureJobs)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'ModifiedBuild':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_Home$onEventModifiedBuild, _p10._0, model),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_Home$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_Home$OnFutureJobDropConfirmed = function (a) {
	return {ctor: 'OnFutureJobDropConfirmed', _0: a};
};
var _Giga_dev$newman$Pages_Home$OnClickDropFutureJob = function (a) {
	return {ctor: 'OnClickDropFutureJob', _0: a};
};
var _Giga_dev$newman$Pages_Home$viewFutureJobs = function (futureJobs) {
	var formatTime = function (time) {
		return A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(time)));
	};
	var viewFutureJob = function (futureJob) {
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(_elm_lang$core$Basics_ops['++'], '#build/', futureJob.buildId)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										futureJob.buildName,
										A2(
											_elm_lang$core$Basics_ops['++'],
											' (',
											A2(_elm_lang$core$Basics_ops['++'], futureJob.buildBranch, ')')))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#suite/', futureJob.suiteId)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(futureJob.suiteName),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(futureJob.author),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(_elm_lang$core$String$join, ',', futureJob.agentGroups)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											formatTime(futureJob.submitTime)),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Button$button,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$danger,
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
																_Giga_dev$newman$Pages_Home$OnClickDropFutureJob(futureJob.id)),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$span,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('ion-close'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Future Jobs'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover history-table'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _Giga_dev$newman$Pages_Home$widthPcnt('15%'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Build'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _Giga_dev$newman$Pages_Home$widthPcnt('15%'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Suite Name'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _Giga_dev$newman$Pages_Home$widthPcnt('7%'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Author'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _Giga_dev$newman$Pages_Home$widthPcnt('22%'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Agent Groups'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _Giga_dev$newman$Pages_Home$widthPcnt('10%'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Submit Time'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{
																	ctor: '::',
																	_0: _Giga_dev$newman$Pages_Home$widthPcnt('5%'),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Actions'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(_elm_lang$core$List$map, viewFutureJob, futureJobs)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Home$view = function (model) {
	var submittedFutureJobFormat = function (jobId) {
		return {
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'submitted future job with id ', jobId)),
			_1: {ctor: '[]'}
		};
	};
	var toOption = function (data) {
		return A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(data.name),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(_Giga_dev$newman$Pages_Home$viewActiveBuilds, model.activeBuilds, model.activeJobs),
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Home$viewPendingBuilds(model.pendingBuilds),
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_Home$viewHistory(model.historyBuilds),
					_1: {
						ctor: '::',
						_0: _Giga_dev$newman$Pages_Home$viewFutureJobs(model.futureJobs),
						_1: {
							ctor: '::',
							_0: A4(_Giga_dev$newman$Views_NewmanModal$confirmFutureJobDrop, model.futureJobToDrop, _Giga_dev$newman$Pages_Home$NewmanModalMsg, _Giga_dev$newman$Pages_Home$OnFutureJobDropConfirmed, model.confirmationState),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Home$GetDashboardDataCompleted = function (a) {
	return {ctor: 'GetDashboardDataCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Home$getDashboardDataCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_Home$GetDashboardDataCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/dashboard', _Giga_dev$newman$Utils_Types$decodeDashboardData));
var _Giga_dev$newman$Pages_Home$init = {
	ctor: '_Tuple2',
	_0: {
		historyBuilds: {ctor: '[]'},
		futureJobs: {ctor: '[]'},
		pendingBuilds: {ctor: '[]'},
		activeBuilds: {ctor: '[]'},
		activeJobs: _elm_lang$core$Dict$empty,
		confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		futureJobToDrop: _elm_lang$core$Maybe$Nothing
	},
	_1: _Giga_dev$newman$Pages_Home$getDashboardDataCmd
};

var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$defaultOptions = {
	size: _elm_lang$core$Maybe$Nothing,
	vertical: false,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$applyModifier = F2(
	function (modifier, options) {
		var _p0 = modifier;
		switch (_p0.ctor) {
			case 'Size':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						size: _elm_lang$core$Maybe$Just(_p0._0)
					});
			case 'Vertical':
				return _elm_lang$core$Native_Utils.update(
					options,
					{vertical: true});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p0._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$groupAttributes = function (modifiers) {
	var options = A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_ButtonGroup$applyModifier, _rundis$elm_bootstrap$Bootstrap_ButtonGroup$defaultOptions, modifiers);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'group'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'btn-group', _1: true},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'btn-group-vertical', _1: options.vertical},
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'buttons'),
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p1 = A2(_elm_lang$core$Maybe$andThen, _rundis$elm_bootstrap$Bootstrap_Grid_Internal$screenSizeOption, options.size);
				if (_p1.ctor === 'Just') {
					return {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], 'btn-group-', _p1._0)),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}(),
			options.attributes));
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$renderGroup = function (_p2) {
	var _p3 = _p2;
	return _p3._0;
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$toolbar = F2(
	function (attributes, items) {
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'toolbar'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('btn-toolbar'),
						_1: {ctor: '[]'}
					}
				},
				attributes),
			A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_ButtonGroup$renderGroup, items));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Options = F3(
	function (a, b, c) {
		return {size: a, vertical: b, attributes: c};
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Vertical = {ctor: 'Vertical'};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$vertical = _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Vertical;
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Size = function (a) {
	return {ctor: 'Size', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$small = _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$SM);
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$large = _rundis$elm_bootstrap$Bootstrap_ButtonGroup$Size(_rundis$elm_bootstrap$Bootstrap_Grid_Internal$LG);
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$GroupItem = function (a) {
	return {ctor: 'GroupItem', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$buttonGroupItem = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$GroupItem(
			A2(
				_elm_lang$html$Html$div,
				_rundis$elm_bootstrap$Bootstrap_ButtonGroup$groupAttributes(options),
				A2(
					_elm_lang$core$List$map,
					function (_p4) {
						var _p5 = _p4;
						return _p5._0;
					},
					items)));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$buttonGroup = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$renderGroup(
			A2(_rundis$elm_bootstrap$Bootstrap_ButtonGroup$buttonGroupItem, options, items));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$linkButtonGroupItem = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$GroupItem(
			A2(
				_elm_lang$html$Html$div,
				_rundis$elm_bootstrap$Bootstrap_ButtonGroup$groupAttributes(options),
				A2(
					_elm_lang$core$List$map,
					function (_p6) {
						var _p7 = _p6;
						return _p7._0;
					},
					items)));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$linkButtonGroup = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$renderGroup(
			A2(_rundis$elm_bootstrap$Bootstrap_ButtonGroup$linkButtonGroupItem, options, items));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButtonGroupItem = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$GroupItem(
			A2(
				_elm_lang$html$Html$div,
				_rundis$elm_bootstrap$Bootstrap_ButtonGroup$groupAttributes(options),
				A2(
					_elm_lang$core$List$map,
					function (_p8) {
						var _p9 = _p8;
						return _p9._0;
					},
					items)));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButtonGroup = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$renderGroup(
			A2(_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButtonGroupItem, options, items));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButtonGroupItem = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$GroupItem(
			A2(
				_elm_lang$html$Html$div,
				_rundis$elm_bootstrap$Bootstrap_ButtonGroup$groupAttributes(options),
				A2(
					_elm_lang$core$List$map,
					function (_p10) {
						var _p11 = _p10;
						return _p11._0;
					},
					items)));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButtonGroup = F2(
	function (options, items) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$renderGroup(
			A2(_rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButtonGroupItem, options, items));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$ButtonItem = function (a) {
	return {ctor: 'ButtonItem', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$button = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$ButtonItem(
			A2(_rundis$elm_bootstrap$Bootstrap_Button$button, options, children));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$LinkButtonItem = function (a) {
	return {ctor: 'LinkButtonItem', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$linkButton = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$LinkButtonItem(
			A2(_rundis$elm_bootstrap$Bootstrap_Button$linkButton, options, children));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$RadioButtonItem = function (a) {
	return {ctor: 'RadioButtonItem', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton = F3(
	function (checked, options, children) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$RadioButtonItem(
			A3(_rundis$elm_bootstrap$Bootstrap_Button$radioButton, checked, options, children));
	});
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$CheckboxButtonItem = function (a) {
	return {ctor: 'CheckboxButtonItem', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButton = F3(
	function (checked, options, children) {
		return _rundis$elm_bootstrap$Bootstrap_ButtonGroup$CheckboxButtonItem(
			A3(_rundis$elm_bootstrap$Bootstrap_Button$checkboxButton, checked, options, children));
	});

var _Giga_dev$newman$Views_TestsTable$toTestName = function (_p0) {
	var _p1 = _p0;
	var num = function () {
		var _p2 = _p1.runNumber;
		if (_p2 === 1) {
			return '';
		} else {
			return A2(
				_elm_lang$core$String$append,
				'#',
				_elm_lang$core$Basics$toString(_p2));
		}
	}();
	var testName = A2(
		_elm_lang$core$List$append,
		_p1.$arguments,
		{
			ctor: '::',
			_0: num,
			_1: {ctor: '[]'}
		});
	return A2(_elm_lang$core$String$join, ' ', testName);
};
var _Giga_dev$newman$Views_TestsTable$filterQuery = F2(
	function (query, test) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, test.id) || (A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toLower(query),
			_elm_lang$core$String$toLower(test.name)) || (A2(
			_elm_lang$core$String$contains,
			_elm_lang$core$String$toLower(query),
			_elm_lang$core$String$toLower(
				A2(_elm_lang$core$String$join, ' ', test.$arguments))) || A2(_elm_lang$core$String$contains, query, test.assignedAgent))))) ? true : false;
	});
var _Giga_dev$newman$Views_TestsTable$updateAllTests = F2(
	function (f, model) {
		var newList = f(model.all);
		var filtered = A2(
			_elm_lang$core$List$filter,
			_Giga_dev$newman$Views_TestsTable$filterQuery(model.query),
			newList);
		var newPaginated = A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p3) {
				return filtered;
			},
			model.paginated);
		return _elm_lang$core$Native_Utils.update(
			model,
			{paginated: newPaginated, all: newList});
	});
var _Giga_dev$newman$Views_TestsTable$updateTestAdded = F2(
	function (model, addedTest) {
		return A2(
			_Giga_dev$newman$Views_TestsTable$updateAllTests,
			function (list) {
				return {ctor: '::', _0: addedTest, _1: list};
			},
			model);
	});
var _Giga_dev$newman$Views_TestsTable$updateTestUpdated = F2(
	function (model, testToUpdate) {
		var f = A2(
			_elm_community$list_extra$List_Extra$replaceIf,
			function (item) {
				return _elm_lang$core$Native_Utils.eq(item.id, testToUpdate.id);
			},
			testToUpdate);
		return A2(_Giga_dev$newman$Views_TestsTable$updateAllTests, f, model);
	});
var _Giga_dev$newman$Views_TestsTable$filterByTestStatus = F2(
	function (currentState, test) {
		var _p4 = currentState;
		switch (_p4.ctor) {
			case 'STATUS_RUNNING':
				return _elm_lang$core$Native_Utils.eq(test.status, _Giga_dev$newman$Utils_Types$TEST_RUNNING);
			case 'STATUS_SUCCESS':
				return _elm_lang$core$Native_Utils.eq(test.status, _Giga_dev$newman$Utils_Types$TEST_SUCCESS);
			case 'STATUS_FAIL':
				return _elm_lang$core$Native_Utils.eq(test.status, _Giga_dev$newman$Utils_Types$TEST_FAIL);
			case 'STATUS_FAILED3TIMES':
				return _elm_lang$core$Native_Utils.eq(test.runNumber, 3) && _elm_lang$core$Native_Utils.eq(test.status, _Giga_dev$newman$Utils_Types$TEST_FAIL);
			default:
				return true;
		}
	});
var _Giga_dev$newman$Views_TestsTable$filterTests = F3(
	function (tests, query, filterState) {
		return A2(
			_elm_lang$core$List$filter,
			_Giga_dev$newman$Views_TestsTable$filterByTestStatus(filterState),
			A2(
				_elm_lang$core$List$filter,
				_Giga_dev$newman$Views_TestsTable$filterQuery(query),
				tests));
	});
var _Giga_dev$newman$Views_TestsTable$modifyUrl = F2(
	function (jobId, state) {
		return _elm_lang$navigation$Navigation$modifyUrl(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'#',
				A2(
					_elm_lang$core$String$join,
					'/',
					{
						ctor: '::',
						_0: 'job',
						_1: {
							ctor: '::',
							_0: jobId,
							_1: {
								ctor: '::',
								_0: state,
								_1: {ctor: '[]'}
							}
						}
					})));
	});
var _Giga_dev$newman$Views_TestsTable$update = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$first(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$prev(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$next(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$last(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: A2(_jschomay$elm_paginate$Paginate$goTo, _p5._0, model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p6 = _p5._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p6,
							paginated: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								model.pageSize,
								A3(_Giga_dev$newman$Views_TestsTable$filterTests, model.all, _p6, model.filterState))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'WebSocketEvent':
				var _p7 = _p5._0;
				switch (_p7.ctor) {
					case 'CreatedTest':
						var _p8 = _p7._0;
						return _elm_lang$core$Native_Utils.eq(model.jobId, _p8.jobId) ? {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Views_TestsTable$updateTestAdded, model, _p8),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					case 'ModifiedTest':
						var _p9 = _p7._0;
						return _elm_lang$core$Native_Utils.eq(model.jobId, _p9.jobId) ? {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Views_TestsTable$updateTestUpdated, model, _p9),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p10 = _p5._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							filterState: _p10,
							paginated: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								model.pageSize,
								A3(_Giga_dev$newman$Views_TestsTable$filterTests, model.all, model.query, _p10))
						}),
					_1: A2(
						_Giga_dev$newman$Views_TestsTable$modifyUrl,
						_p5._0,
						_Giga_dev$newman$Utils_Types$radioStateToString(_p10))
				};
		}
	});
var _Giga_dev$newman$Views_TestsTable$viewTest = F2(
	function (currTime, test) {
		var historyStatsClass = _elm_lang$core$Native_Utils.eq(test.status, _Giga_dev$newman$Utils_Types$TEST_SUCCESS) ? 'black-column' : ((_elm_lang$core$Native_Utils.cmp(test.testScore, 3) < 1) ? 'red-column' : ((_elm_lang$core$Native_Utils.cmp(test.testScore, 3) > 0) ? 'blue-column' : ''));
		var historyStats = function () {
			var shorten = function (txt) {
				return A3(_elm_lang$core$String$slice, 0, 18, txt);
			};
			var delimiter = '_';
			var splitted = A2(_elm_lang$core$String$split, delimiter, test.historyStats);
			var _p11 = splitted;
			_v5_2:
			do {
				if (_p11.ctor === '::') {
					if (_p11._1.ctor === '::') {
						if (_p11._1._1.ctor === '[]') {
							return {
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									shorten(_p11._0)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											shorten(_p11._1._0)),
										_1: {ctor: '[]'}
									}
								}
							};
						} else {
							break _v5_2;
						}
					} else {
						return {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								shorten(_p11._0)),
							_1: {ctor: '[]'}
						};
					}
				} else {
					break _v5_2;
				}
			} while(false);
			return {
				ctor: '::',
				_0: _elm_lang$html$Html$text(''),
				_1: {ctor: '[]'}
			};
		}();
		var durationText = function () {
			var diffTime = function () {
				var _p12 = {ctor: '_Tuple3', _0: test.startTime, _1: test.endTime, _2: currTime};
				_v6_2:
				do {
					if (_p12._0.ctor === 'Just') {
						if (_p12._1.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(
								A2(
									_rluiten$elm_date_extra$Date_Extra_Duration$diff,
									_elm_lang$core$Date$fromTime(
										_elm_lang$core$Basics$toFloat(_p12._1._0)),
									_elm_lang$core$Date$fromTime(
										_elm_lang$core$Basics$toFloat(_p12._0._0))));
						} else {
							if (_p12._2.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(
									A2(
										_rluiten$elm_date_extra$Date_Extra_Duration$diff,
										_elm_lang$core$Date$fromTime(_p12._2._0),
										_elm_lang$core$Date$fromTime(
											_elm_lang$core$Basics$toFloat(_p12._0._0))));
							} else {
								break _v6_2;
							}
						}
					} else {
						break _v6_2;
					}
				} while(false);
				return _elm_lang$core$Maybe$Nothing;
			}();
			var _p13 = diffTime;
			if (_p13.ctor === 'Just') {
				var _p15 = _p13._0;
				var _p14 = {ctor: '_Tuple3', _0: _p15.hour, _1: _p15.minute, _2: _p15.second};
				if (_p14._0 === 0) {
					if (_p14._1 === 0) {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p14._2),
							' seconds');
					} else {
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p14._1),
							' minutes');
					}
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p14._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' hours and ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p14._1),
								' minutes')));
				}
			} else {
				return '';
			}
		}();
		var status = function () {
			var _p16 = test.status;
			switch (_p16.ctor) {
				case 'TEST_RUNNING':
					return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
				case 'TEST_PENDING':
					return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
				case 'TEST_SUCCESS':
					return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
				default:
					return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
			}
		}();
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(_elm_lang$core$Basics_ops['++'], '#test/', test.id)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title(
										A2(_elm_lang$core$String$join, '', test.$arguments)),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_Giga_dev$newman$Views_TestsTable$toTestName(test)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								status,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_Giga_dev$newman$Utils_Types$testStatusToString(test.status)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(historyStatsClass),
								_1: {ctor: '[]'}
							},
							historyStats),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href(
												A2(_elm_lang$core$Basics_ops['++'], '#test-history/', test.id)),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('History'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title(test.errorMessage),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(test.errorMessage),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(test.assignedAgent),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(durationText),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _Giga_dev$newman$Views_TestsTable$init = F3(
	function (jobId, list, state) {
		var pageSize = 25;
		return {
			all: list,
			paginated: A2(
				_jschomay$elm_paginate$Paginate$fromList,
				pageSize,
				A3(_Giga_dev$newman$Views_TestsTable$filterTests, list, '', state)),
			pageSize: pageSize,
			query: '',
			jobId: jobId,
			filterState: state
		};
	});
var _Giga_dev$newman$Views_TestsTable$Model = F6(
	function (a, b, c, d, e, f) {
		return {all: a, paginated: b, pageSize: c, query: d, jobId: e, filterState: f};
	});
var _Giga_dev$newman$Views_TestsTable$UpdateFilterState = F2(
	function (a, b) {
		return {ctor: 'UpdateFilterState', _0: a, _1: b};
	});
var _Giga_dev$newman$Views_TestsTable$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Views_TestsTable$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Views_TestsTable$WebSocketEvent);
};
var _Giga_dev$newman$Views_TestsTable$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Views_TestsTable$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Views_TestsTable$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Views_TestsTable$Next = {ctor: 'Next'};
var _Giga_dev$newman$Views_TestsTable$Last = {ctor: 'Last'};
var _Giga_dev$newman$Views_TestsTable$First = {ctor: 'First'};
var _Giga_dev$newman$Views_TestsTable$viewTable = F2(
	function (model, currTime) {
		var customPager = F2(
			function (f, paginated) {
				var maxPagesToShow = 10;
				var totalPages = _jschomay$elm_paginate$Paginate$totalPages(paginated);
				var currentPage = _jschomay$elm_paginate$Paginate$currentPage(paginated);
				var leftBound = A2(_elm_lang$core$Basics$max, ((((currentPage - 1) / maxPagesToShow) | 0) * maxPagesToShow) + 1, 1);
				var rightBound = A2(_elm_lang$core$Basics$min, ((((currentPage - 1) / maxPagesToShow) | 0) * maxPagesToShow) + maxPagesToShow, totalPages);
				return A2(
					_elm_lang$core$List$map,
					function (i) {
						return A2(
							f,
							i,
							_elm_lang$core$Native_Utils.eq(
								i,
								_jschomay$elm_paginate$Paginate$currentPage(paginated)));
					},
					A2(_elm_lang$core$List$range, leftBound, rightBound));
			});
		var pagerButtonView = F2(
			function (index, isActive) {
				var _p17 = isActive;
				if (_p17 === true) {
					return A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-item active'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('page-link'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(index)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('sr-only'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('(current)'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-item'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_Giga_dev$newman$Views_TestsTable$GoTo(index)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('page-link'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(index)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						});
				}
			});
		var nextButtons = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.paginated)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestsTable$Next),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('›'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'disabled',
										_1: _jschomay$elm_paginate$Paginate$isLast(model.paginated)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestsTable$Last),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('»'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
		var prevButtons = {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.paginated)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestsTable$First),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('«'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$classList(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'disabled',
										_1: _jschomay$elm_paginate$Paginate$isFirst(model.paginated)
									},
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestsTable$Prev),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('‹'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		};
		var pagination = A2(
			_elm_lang$html$Html$nav,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('pagination '),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						prevButtons,
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(customPager, pagerButtonView, model.paginated),
							nextButtons))),
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form-inline'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-group'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('btn-group'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Views_TestsTable$FilterQuery),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('filterinput'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$title('Clear filter'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('ion-close-circled searchclear'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(
																_Giga_dev$newman$Views_TestsTable$FilterQuery('')),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form-group'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: pagination,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$table,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$thead,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tr,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '35%'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Name'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$width(65),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Status'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$width(105),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('History Stats'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$width(65),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('History'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$width(210),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Error Message'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$width(210),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Assigned Agent'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$width(100),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Duration'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tbody,
									{ctor: '[]'},
									A2(
										_elm_lang$core$List$map,
										_Giga_dev$newman$Views_TestsTable$viewTest(currTime),
										_jschomay$elm_paginate$Paginate$page(model.paginated))),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: pagination,
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _Giga_dev$newman$Views_TestsTable$RUNNING = {ctor: 'RUNNING'};
var _Giga_dev$newman$Views_TestsTable$FAIL = {ctor: 'FAIL'};
var _Giga_dev$newman$Views_TestsTable$SUCCESS = {ctor: 'SUCCESS'};
var _Giga_dev$newman$Views_TestsTable$PENDING = {ctor: 'PENDING'};
var _Giga_dev$newman$Views_TestsTable$toTestStatus = function (str) {
	var _p18 = str;
	switch (_p18) {
		case 'PENDING':
			return _Giga_dev$newman$Views_TestsTable$PENDING;
		case 'SUCCESS':
			return _Giga_dev$newman$Views_TestsTable$SUCCESS;
		case 'FAIL':
			return _Giga_dev$newman$Views_TestsTable$FAIL;
		case 'RUNNING':
			return _Giga_dev$newman$Views_TestsTable$RUNNING;
		default:
			return _Giga_dev$newman$Views_TestsTable$FAIL;
	}
};

var _Giga_dev$newman$Pages_Job$parseRadioState = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Job$parseJobId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Job$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {maybeJob: a, collapseState: b, testsTable: c, currTime: d, statusState: e, confirmationState: f, newSuiteName: g, newSuiteMessage: h};
	});
var _Giga_dev$newman$Pages_Job$Shown = {ctor: 'Shown'};
var _Giga_dev$newman$Pages_Job$Hidden = {ctor: 'Hidden'};
var _Giga_dev$newman$Pages_Job$initModel = F2(
	function (jobId, state) {
		return {
			maybeJob: _elm_lang$core$Maybe$Nothing,
			collapseState: _Giga_dev$newman$Pages_Job$Hidden,
			testsTable: A3(
				_Giga_dev$newman$Views_TestsTable$init,
				jobId,
				{ctor: '[]'},
				state),
			currTime: _elm_lang$core$Maybe$Nothing,
			statusState: state,
			confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
			newSuiteName: _elm_lang$core$Maybe$Nothing,
			newSuiteMessage: _elm_lang$core$Maybe$Nothing
		};
	});
var _Giga_dev$newman$Pages_Job$OnNewSuiteNameChanged = function (a) {
	return {ctor: 'OnNewSuiteNameChanged', _0: a};
};
var _Giga_dev$newman$Pages_Job$CreateSuiteResponse = function (a) {
	return {ctor: 'CreateSuiteResponse', _0: a};
};
var _Giga_dev$newman$Pages_Job$createSuiteCmd = F2(
	function (suiteName, jobId) {
		return A2(
			_elm_lang$http$Http$send,
			_Giga_dev$newman$Pages_Job$CreateSuiteResponse,
			A3(
				_elm_lang$http$Http$post,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/api/newman/suite/failedTests?jobId=',
					A2(
						_elm_lang$core$Basics_ops['++'],
						jobId,
						A2(_elm_lang$core$Basics_ops['++'], '&suiteName=', suiteName))),
				_elm_lang$http$Http$emptyBody,
				_Giga_dev$newman$Utils_Types$decodeSuite));
	});
var _Giga_dev$newman$Pages_Job$OnNewSuiteCreateButton = {ctor: 'OnNewSuiteCreateButton'};
var _Giga_dev$newman$Pages_Job$OnNewSuiteConfirm = function (a) {
	return {ctor: 'OnNewSuiteConfirm', _0: a};
};
var _Giga_dev$newman$Pages_Job$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_Job$StatusMsg = function (a) {
	return {ctor: 'StatusMsg', _0: a};
};
var _Giga_dev$newman$Pages_Job$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Job$ReceiveTime = function (a) {
	return {ctor: 'ReceiveTime', _0: a};
};
var _Giga_dev$newman$Pages_Job$requestTime = A2(_elm_lang$core$Task$perform, _Giga_dev$newman$Pages_Job$ReceiveTime, _elm_lang$core$Time$now);
var _Giga_dev$newman$Pages_Job$TestsTableMsg = function (a) {
	return {ctor: 'TestsTableMsg', _0: a};
};
var _Giga_dev$newman$Pages_Job$viewBody = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_Giga_dev$newman$Pages_Job$TestsTableMsg,
		A2(_Giga_dev$newman$Views_TestsTable$viewTable, model.testsTable, model.currTime));
};
var _Giga_dev$newman$Pages_Job$handleEvent = function (event) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Job$WebSocketEvent),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Pages_Job$TestsTableMsg,
					_Giga_dev$newman$Views_TestsTable$handleEvent(event)),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Job$GetTestsViewCompleted = function (a) {
	return {ctor: 'GetTestsViewCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Job$getTestsViewCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Job$GetTestsViewCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job-tests-view?jobId=',
				A2(_elm_lang$core$Basics_ops['++'], jobId, '&all=true&orderBy=name')),
			A2(
				_elm_lang$core$Json_Decode$field,
				'values',
				_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeTestView))));
};
var _Giga_dev$newman$Pages_Job$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetJobInfoCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					var _p2 = _p1._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeJob: _elm_lang$core$Maybe$Just(_p2)
							}),
						_1: _Giga_dev$newman$Pages_Job$getTestsViewCmd(_p2.id)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetTestsViewCompleted':
				var _p3 = _p0._0;
				if (_p3.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								testsTable: A3(
									_Giga_dev$newman$Views_TestsTable$init,
									A2(
										_elm_lang$core$Maybe$withDefault,
										'',
										A2(
											_elm_lang$core$Maybe$map,
											function (_) {
												return _.id;
											},
											model.maybeJob)),
									_p3._0,
									model.statusState)
							}),
						_1: _Giga_dev$newman$Pages_Job$requestTime
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'TestsTableMsg':
				var _p4 = A2(_Giga_dev$newman$Views_TestsTable$update, _p0._0, model.testsTable);
				var newSubModel = _p4._0;
				var newCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{testsTable: newSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Job$TestsTableMsg, newCmd)
				};
			case 'ToggleButton':
				var newState = function () {
					var _p5 = model.collapseState;
					if (_p5.ctor === 'Hidden') {
						return _Giga_dev$newman$Pages_Job$Shown;
					} else {
						return _Giga_dev$newman$Pages_Job$Hidden;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{collapseState: newState}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReceiveTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currTime: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'WebSocketEvent':
				var _p6 = _p0._0;
				if (_p6.ctor === 'ModifiedJob') {
					var _p8 = _p6._0;
					var _p7 = model.maybeJob;
					if (_p7.ctor === 'Just') {
						return _elm_lang$core$Native_Utils.eq(_p7._0.id, _p8.id) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									maybeJob: _elm_lang$core$Maybe$Just(_p8)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'StatusMsg':
				var _p10 = _p0._0;
				var _p9 = A2(
					_Giga_dev$newman$Views_TestsTable$update,
					A2(
						_Giga_dev$newman$Views_TestsTable$UpdateFilterState,
						A2(
							_elm_lang$core$Maybe$withDefault,
							'',
							A2(
								_elm_lang$core$Maybe$map,
								function (_) {
									return _.id;
								},
								model.maybeJob)),
						_p10),
					model.testsTable);
				var newSubModel = _p9._0;
				var newCmd = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{statusState: _p10, testsTable: newSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Job$TestsTableMsg, newCmd)
				};
			case 'OnNewSuiteCreateButton':
				var suiteName = function () {
					var _p11 = model.newSuiteName;
					if (_p11.ctor === 'Just') {
						return _p11._0;
					} else {
						var _p12 = {ctor: '_Tuple2', _0: model.currTime, _1: model.maybeJob};
						if ((_p12._0.ctor === 'Just') && (_p12._1.ctor === 'Just')) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'dev-failing-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p12._1._0.suiteName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-',
										A2(
											_ryannhg$elm_date_format$DateFormat$format,
											_Giga_dev$newman$Utils_Common$timestamp,
											_elm_lang$core$Date$fromTime(_p12._0._0)))));
						} else {
							return '...';
						}
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState,
							newSuiteName: _elm_lang$core$Maybe$Just(suiteName)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewmanModalMsg':
				var _p13 = _p0._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{confirmationState: _p13});
				var cleanup = _elm_lang$core$Native_Utils.eq(_p13, _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState);
				return cleanup ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						newModel,
						{newSuiteName: _elm_lang$core$Maybe$Nothing, newSuiteMessage: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
			case 'OnNewSuiteConfirm':
				var _p15 = _p0._0;
				var _p14 = model.maybeJob;
				if (_p14.ctor === 'Just') {
					return A2(_elm_lang$core$String$startsWith, 'dev-', _p15) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Err('Sending request...'))
							}),
						_1: A2(_Giga_dev$newman$Pages_Job$createSuiteCmd, _p15, _p14._0.id)
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Ok('Suite name does not start with \'dev-\''))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{confirmationState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState, newSuiteName: _elm_lang$core$Maybe$Nothing, newSuiteMessage: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'CreateSuiteResponse':
				var _p16 = _p0._0;
				if (_p16.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Ok(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'Suite with id [',
											A2(_elm_lang$core$Basics_ops['++'], _p16._0.id, '] has been created'))))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p18 = _p16._0;
					var errMsg = function () {
						var _p17 = _p18;
						if (_p17.ctor === 'BadStatus') {
							return _p17._0.body;
						} else {
							return _elm_lang$core$Basics$toString(_p18);
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newSuiteMessage: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Result$Ok(errMsg))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							newSuiteName: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Pages_Job$ToggleButton = {ctor: 'ToggleButton'};
var _Giga_dev$newman$Pages_Job$viewHeader = F2(
	function (model, job) {
		var viewRow = function (_p19) {
			var _p20 = _p19;
			return A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(200),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p20._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _p20._1,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		};
		var createSuiteButton = A2(
			_rundis$elm_bootstrap$Bootstrap_Button$button,
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_Job$OnNewSuiteCreateButton),
				_1: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'vertical-align', _1: 'top'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Create suite'),
				_1: {ctor: '[]'}
			});
		var jobSetupButton = function () {
			var tt = function () {
				var _p21 = model.collapseState;
				if (_p21.ctor === 'Hidden') {
					return 'ion-chevron-down';
				} else {
					return 'ion-chevron-up';
				}
			}();
			return A2(
				_rundis$elm_bootstrap$Bootstrap_Button$button,
				{
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Button$success,
					_1: {
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_Job$ToggleButton),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(tt),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		}();
		var jobToT = function (_p22) {
			var _p23 = _p22;
			var _p24 = _p23._1;
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_p24),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p23._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], _p24, '?download=true')),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('[Download]'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var jobSetupLogsData = A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$classList(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'collapse',
							_1: _elm_lang$core$Native_Utils.eq(model.collapseState, _Giga_dev$newman$Pages_Job$Hidden)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'collapse.show',
								_1: _elm_lang$core$Native_Utils.eq(model.collapseState, _Giga_dev$newman$Pages_Job$Shown)
							},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$map,
						jobToT,
						_elm_lang$core$Dict$toList(job.jobSetupLogs))),
				_1: {ctor: '[]'}
			});
		var jobSetupLogs = A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: jobSetupButton,
				_1: {
					ctor: '::',
					_0: jobSetupLogsData,
					_1: {ctor: '[]'}
				}
			});
		var testsStatus = A2(
			_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButtonGroup,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A3(
					_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
					_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_RUNNING),
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$title('Running Tests'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineInfo,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
										_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_RUNNING)),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(job.runningTests)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A3(
						_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
						_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_SUCCESS),
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title('Passed Tests'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineSuccess,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_SUCCESS)),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(job.passedTests)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
							_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_FAIL),
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title('Failed Tests'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineDanger,
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
												_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_FAIL)),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(job.failedTests)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
								_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_FAILED3TIMES),
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$title('Failed 3 Times'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('job-radio-button-failed3X'),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
											_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_FAILED3TIMES)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(job.failed3TimesTests)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A3(
									_rundis$elm_bootstrap$Bootstrap_ButtonGroup$radioButton,
									_elm_lang$core$Native_Utils.eq(model.statusState, _Giga_dev$newman$Utils_Types$STATUS_ALL),
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title('All Tests'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$outlinePrimary,
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
													_Giga_dev$newman$Pages_Job$StatusMsg(_Giga_dev$newman$Utils_Types$STATUS_ALL)),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(job.totalTests)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var stateRow = function () {
			var badge = function () {
				var _p25 = job.state;
				switch (_p25.ctor) {
					case 'BROKEN':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
					case 'DONE':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
					case 'RUNNING':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
					case 'PAUSED':
						return _rundis$elm_bootstrap$Bootstrap_Badge$badgeWarning;
					default:
						return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
				}
			}();
			return viewRow(
				{
					ctor: '_Tuple2',
					_0: 'State',
					_1: A2(
						badge,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_Giga_dev$newman$Utils_Types$jobStateToString(job.state)),
							_1: {ctor: '[]'}
						})
				});
		}();
		var dateFormat = function (maybeDate) {
			var _p26 = maybeDate;
			if (_p26.ctor === 'Just') {
				return A2(
					_ryannhg$elm_date_format$DateFormat$format,
					_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
					_elm_lang$core$Date$fromTime(
						_elm_lang$core$Basics$toFloat(_p26._0)));
			} else {
				return 'N/A';
			}
		};
		var headerRows = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'Suite',
				_1: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(_elm_lang$core$Basics_ops['++'], '#suite/', job.suiteId)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(job.suiteName),
						_1: {ctor: '[]'}
					})
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'Job configuration',
					_1: _elm_lang$html$Html$text(job.jobConfigName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'Submit Time',
						_1: _elm_lang$html$Html$text(
							dateFormat(
								_elm_lang$core$Maybe$Just(job.submitTime)))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'Start Time',
							_1: _elm_lang$html$Html$text(
								dateFormat(job.startTime))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'End Time',
								_1: _elm_lang$html$Html$text(
									dateFormat(job.endTime))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: '# Agents',
									_1: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(
											_elm_lang$core$List$length(job.agents)))
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: '# Prep. Agents',
										_1: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(
												_elm_lang$core$List$length(job.preparingAgents)))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'Agent Groups',
											_1: _elm_lang$html$Html$text(
												A2(_elm_lang$core$String$join, ',', job.agentGroups))
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'Submitted by',
												_1: _elm_lang$html$Html$text(job.submittedBy)
											},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'Status',
													_1: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: testsStatus,
															_1: {
																ctor: '::',
																_0: createSuiteButton,
																_1: {ctor: '[]'}
															}
														})
												},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'Job Setup Logs', _1: jobSetupLogs},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		var progressRow = viewRow(
			{
				ctor: '_Tuple2',
				_0: 'Progress',
				_1: _rundis$elm_bootstrap$Bootstrap_Progress$progress(
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Progress$value(
							_elm_lang$core$Basics$toFloat((((job.failedTests + job.passedTests) * 100) / job.totalTests) | 0)),
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Progress$label(
								_elm_lang$core$Basics$toString((((job.failedTests + job.passedTests) * 100) / job.totalTests) | 0)),
							_1: {ctor: '[]'}
						}
					})
			});
		var buildRow = A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Build'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#build/', job.buildId)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											job.buildName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												' (',
												A2(_elm_lang$core$Basics_ops['++'], job.buildBranch, ')')))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$html$Html$table,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('job-view'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: buildRow,
					_1: {
						ctor: '::',
						_0: stateRow,
						_1: {
							ctor: '::',
							_0: progressRow,
							_1: {ctor: '[]'}
						}
					}
				},
				A2(_elm_lang$core$List$map, viewRow, headerRows)));
	});
var _Giga_dev$newman$Pages_Job$view = function (model) {
	var _p27 = model.maybeJob;
	if (_p27.ctor === 'Just') {
		var _p28 = _p27._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('text'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'Details for job ', _p28.id)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(_Giga_dev$newman$Pages_Job$viewHeader, model, _p28),
					_1: {
						ctor: '::',
						_0: _Giga_dev$newman$Pages_Job$viewBody(model),
						_1: {
							ctor: '::',
							_0: A6(_Giga_dev$newman$Views_NewmanModal$createSuiteForFailedTestsModal, model.newSuiteName, model.newSuiteMessage, _Giga_dev$newman$Pages_Job$NewmanModalMsg, _Giga_dev$newman$Pages_Job$OnNewSuiteNameChanged, _Giga_dev$newman$Pages_Job$OnNewSuiteConfirm, model.confirmationState),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Loading Job...'),
				_1: {ctor: '[]'}
			});
	}
};
var _Giga_dev$newman$Pages_Job$GetJobInfoCompleted = function (a) {
	return {ctor: 'GetJobInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Job$getJobInfoCmd = function (jobId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Job$GetJobInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/job/', jobId),
			_Giga_dev$newman$Utils_Types$decodeJob));
};
var _Giga_dev$newman$Pages_Job$initCmd = function (jobId) {
	return _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _Giga_dev$newman$Pages_Job$getJobInfoCmd(jobId),
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Job$requestTime,
				_1: {ctor: '[]'}
			}
		});
};

var _Giga_dev$newman$Pages_JobConfig$update = F2(
	function (msg, model) {
		var d = A2(
			_elm_lang$core$Debug$log,
			'JobConfig.update',
			A2(
				_elm_lang$core$Basics_ops['++'],
				'was called',
				_elm_lang$core$Basics$toString(msg)));
		var _p0 = msg;
		var _p1 = _p0._0;
		if (_p1.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{
						maybeJobConfig: _elm_lang$core$Maybe$Just(_p1._0)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_JobConfig$viewJobConfig = function (jobConfig) {
	var viewRow = function (_p2) {
		var _p3 = _p2;
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$height(50),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$width(150),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p3._0),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _p3._1,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Job Configuration'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: viewRow(
							{
								ctor: '_Tuple2',
								_0: 'Name',
								_1: _elm_lang$html$Html$text(jobConfig.name)
							}),
						_1: {
							ctor: '::',
							_0: viewRow(
								{
									ctor: '_Tuple2',
									_0: 'Id',
									_1: _elm_lang$html$Html$text(jobConfig.id)
								}),
							_1: {
								ctor: '::',
								_0: viewRow(
									{
										ctor: '_Tuple2',
										_0: 'Java Version',
										_1: _elm_lang$html$Html$text(jobConfig.javaVersion)
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_JobConfig$view = function (model) {
	var _p4 = model.maybeJobConfig;
	if (_p4.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _Giga_dev$newman$Pages_JobConfig$viewJobConfig(_p4._0),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Loading jobConfig...'),
				_1: {ctor: '[]'}
			});
	}
};
var _Giga_dev$newman$Pages_JobConfig$parseJobConfigId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_JobConfig$Model = function (a) {
	return {maybeJobConfig: a};
};
var _Giga_dev$newman$Pages_JobConfig$GetJobConfigInfoCompleted = function (a) {
	return {ctor: 'GetJobConfigInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_JobConfig$getJobConfigInfoCmd = function (jobConfigId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_JobConfig$GetJobConfigInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/job-config-by-id/', jobConfigId),
			_Giga_dev$newman$Utils_Types$decodeJobConfig));
};
var _Giga_dev$newman$Pages_JobConfig$init = function (jobConfigId) {
	return {
		ctor: '_Tuple2',
		_0: _Giga_dev$newman$Pages_JobConfig$Model(_elm_lang$core$Maybe$Nothing),
		_1: _Giga_dev$newman$Pages_JobConfig$getJobConfigInfoCmd(jobConfigId)
	};
};

var _Giga_dev$newman$Pages_JobConfigs$viewJobConfig = function (jobConfig) {
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(
						A2(_elm_lang$core$Basics_ops['++'], '#jobConfig/', jobConfig.id)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(jobConfig.name),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(jobConfig.id),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_JobConfigs$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Job Configurations'),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Button$linkButton,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#newJobConfig'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15px'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('New Job Configuration'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$table,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$thead,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$tr,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Name'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Id'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$tbody,
										{ctor: '[]'},
										A2(_elm_lang$core$List$map, _Giga_dev$newman$Pages_JobConfigs$viewJobConfig, model.allJobConfigs)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_JobConfigs$updateAll = F2(
	function (f, model) {
		var newList = f(model.allJobConfigs);
		return _elm_lang$core$Native_Utils.update(
			model,
			{allJobConfigs: newList});
	});
var _Giga_dev$newman$Pages_JobConfigs$updateJobConfigAdded = F2(
	function (model, addedJobConfig) {
		return A2(
			_Giga_dev$newman$Pages_JobConfigs$updateAll,
			function (list) {
				return {ctor: '::', _0: addedJobConfig, _1: list};
			},
			model);
	});
var _Giga_dev$newman$Pages_JobConfigs$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetJobConfigsCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{allJobConfigs: _p1._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'onGetJobConfigsCompleted', _p1._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'WebSocketEvent':
				var _p2 = _p0._0;
				if (_p2.ctor === 'CreatedJobConfig') {
					return {
						ctor: '_Tuple2',
						_0: A2(_Giga_dev$newman$Pages_JobConfigs$updateJobConfigAdded, model, _p2._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_JobConfigs$Model = function (a) {
	return {allJobConfigs: a};
};
var _Giga_dev$newman$Pages_JobConfigs$OnClickLinkButton = {ctor: 'OnClickLinkButton'};
var _Giga_dev$newman$Pages_JobConfigs$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_JobConfigs$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_JobConfigs$WebSocketEvent);
};
var _Giga_dev$newman$Pages_JobConfigs$GetJobConfigsCompleted = function (a) {
	return {ctor: 'GetJobConfigsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_JobConfigs$getJobConfigsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_JobConfigs$GetJobConfigsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/job-config', _Giga_dev$newman$Utils_Types$decodeJobConfigs));
var _Giga_dev$newman$Pages_JobConfigs$init = {
	ctor: '_Tuple2',
	_0: {
		allJobConfigs: {ctor: '[]'}
	},
	_1: _Giga_dev$newman$Pages_JobConfigs$getJobConfigsCmd
};

var _Giga_dev$newman$Pages_Jobs$onGetJobsCompleted = F2(
	function (model, result) {
		var _p0 = result;
		if (_p0.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{
						jobsTableModel: _Giga_dev$newman$Views_JobsTable$init(_p0._0)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			var a = A2(_elm_lang$core$Debug$log, 'onGetJobsCompleted', _p0._0);
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _Giga_dev$newman$Pages_Jobs$getJobs = function (limit) {
	return A2(
		_elm_lang$http$Http$get,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'/api/newman/jobs-view?limit=',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(limit),
				'&orderBy=-submitTime')),
		A2(
			_elm_lang$core$Json_Decode$field,
			'values',
			_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeJobView)));
};
var _Giga_dev$newman$Pages_Jobs$Model = F3(
	function (a, b, c) {
		return {jobsTableModel: a, maxEntries: b, currTime: c};
	});
var _Giga_dev$newman$Pages_Jobs$ApplyJobsNumberAndRetrieveJobs = {ctor: 'ApplyJobsNumberAndRetrieveJobs'};
var _Giga_dev$newman$Pages_Jobs$UpdateJobsNumber = function (a) {
	return {ctor: 'UpdateJobsNumber', _0: a};
};
var _Giga_dev$newman$Pages_Jobs$JobsTableMsg = function (a) {
	return {ctor: 'JobsTableMsg', _0: a};
};
var _Giga_dev$newman$Pages_Jobs$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('form-inline'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h1,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('jobs-label'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Jobs'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-inline jobs-list-max-job-count'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('jobs-list-max-job-count-label'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Max. Job count:'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('jobs-list-max-job-count-input'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$number(
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(
														_elm_lang$core$Basics$toString(model.maxEntries)),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_Jobs$UpdateJobsNumber),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '2px'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: 'width', _1: '85px'},
																				_1: {ctor: '[]'}
																			}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('jobs-list-max-job-count-button'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_rundis$elm_bootstrap$Bootstrap_Button$button,
													{
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_Jobs$ApplyJobsNumberAndRetrieveJobs),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Apply'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$map,
							_Giga_dev$newman$Pages_Jobs$JobsTableMsg,
							A2(_Giga_dev$newman$Views_JobsTable$viewTable, model.jobsTableModel, model.currTime)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Jobs$subscriptions = function (model) {
	return A2(
		_elm_lang$core$Platform_Sub$map,
		_Giga_dev$newman$Pages_Jobs$JobsTableMsg,
		_Giga_dev$newman$Views_JobsTable$subscriptions(model.jobsTableModel));
};
var _Giga_dev$newman$Pages_Jobs$handleEvent = function (event) {
	return A2(
		_elm_lang$core$Platform_Cmd$map,
		_Giga_dev$newman$Pages_Jobs$JobsTableMsg,
		_Giga_dev$newman$Views_JobsTable$handleEvent(event));
};
var _Giga_dev$newman$Pages_Jobs$ReceiveTime = function (a) {
	return {ctor: 'ReceiveTime', _0: a};
};
var _Giga_dev$newman$Pages_Jobs$requestTime = A2(_elm_lang$core$Task$perform, _Giga_dev$newman$Pages_Jobs$ReceiveTime, _elm_lang$core$Time$now);
var _Giga_dev$newman$Pages_Jobs$GetJobsCompleted = function (a) {
	return {ctor: 'GetJobsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Jobs$getJobsCmd = function (limit) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Jobs$GetJobsCompleted,
		_Giga_dev$newman$Pages_Jobs$getJobs(limit));
};
var _Giga_dev$newman$Pages_Jobs$init = function () {
	var maxEntries = 60;
	return {
		ctor: '_Tuple2',
		_0: {
			jobsTableModel: _Giga_dev$newman$Views_JobsTable$init(
				{ctor: '[]'}),
			maxEntries: maxEntries,
			currTime: _elm_lang$core$Maybe$Nothing
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Jobs$getJobsCmd(maxEntries),
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_Jobs$requestTime,
					_1: {ctor: '[]'}
				}
			})
	};
}();
var _Giga_dev$newman$Pages_Jobs$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'UpdateMaxEntries':
				var maxEntries = A2(
					_elm_lang$core$Maybe$withDefault,
					1,
					_elm_lang$core$Result$toMaybe(
						_elm_lang$core$String$toInt(_p1._0)));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{maxEntries: maxEntries}),
					_1: _Giga_dev$newman$Pages_Jobs$getJobsCmd(maxEntries)
				};
			case 'GetJobsCompleted':
				return A2(_Giga_dev$newman$Pages_Jobs$onGetJobsCompleted, model, _p1._0);
			case 'ReceiveTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currTime: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'JobsTableMsg':
				var _p2 = A2(_Giga_dev$newman$Views_JobsTable$update, _p1._0, model.jobsTableModel);
				var updatedJobsTableModel = _p2._0;
				var cmd = _p2._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{jobsTableModel: updatedJobsTableModel}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_Jobs$JobsTableMsg, cmd),
							_1: {
								ctor: '::',
								_0: _Giga_dev$newman$Pages_Jobs$requestTime,
								_1: {ctor: '[]'}
							}
						})
				};
			case 'UpdateJobsNumber':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							maxEntries: A2(
								_elm_lang$core$Result$withDefault,
								1,
								_elm_lang$core$String$toInt(_p1._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							jobsTableModel: _Giga_dev$newman$Views_JobsTable$init(
								{ctor: '[]'})
						}),
					_1: _Giga_dev$newman$Pages_Jobs$getJobsCmd(model.maxEntries)
				};
		}
	});
var _Giga_dev$newman$Pages_Jobs$UpdateMaxEntries = function (a) {
	return {ctor: 'UpdateMaxEntries', _0: a};
};

var _rundis$elm_bootstrap$Bootstrap_Alert$roleClass = function (role) {
	var _p0 = role;
	switch (_p0.ctor) {
		case 'Success':
			return 'alert-success';
		case 'Info':
			return 'alert-info';
		case 'Warning':
			return 'alert-warning';
		default:
			return 'alert-danger';
	}
};
var _rundis$elm_bootstrap$Bootstrap_Alert$heading = F3(
	function (elemFn, attributes, children) {
		return A2(
			elemFn,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert-header'),
				_1: attributes
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$h6 = F2(
	function (attributes, children) {
		return A3(_rundis$elm_bootstrap$Bootstrap_Alert$heading, _elm_lang$html$Html$h6, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$h5 = F2(
	function (attributes, children) {
		return A3(_rundis$elm_bootstrap$Bootstrap_Alert$heading, _elm_lang$html$Html$h5, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$h4 = F2(
	function (attributes, children) {
		return A3(_rundis$elm_bootstrap$Bootstrap_Alert$heading, _elm_lang$html$Html$h4, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$h3 = F2(
	function (attributes, children) {
		return A3(_rundis$elm_bootstrap$Bootstrap_Alert$heading, _elm_lang$html$Html$h3, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$h2 = F2(
	function (attributes, children) {
		return A3(_rundis$elm_bootstrap$Bootstrap_Alert$heading, _elm_lang$html$Html$h2, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$h1 = F2(
	function (attributes, children) {
		return A3(_rundis$elm_bootstrap$Bootstrap_Alert$heading, _elm_lang$html$Html$h1, attributes, children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$link = F2(
	function (attributes, children) {
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert-link'),
				_1: attributes
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$alertCustom = F2(
	function (role, children) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'alert ',
						_rundis$elm_bootstrap$Bootstrap_Alert$roleClass(role))),
				_1: {ctor: '[]'}
			},
			children);
	});
var _rundis$elm_bootstrap$Bootstrap_Alert$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Alert$danger = function (children) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Alert$alertCustom, _rundis$elm_bootstrap$Bootstrap_Alert$Danger, children);
};
var _rundis$elm_bootstrap$Bootstrap_Alert$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Alert$warning = function (children) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Alert$alertCustom, _rundis$elm_bootstrap$Bootstrap_Alert$Warning, children);
};
var _rundis$elm_bootstrap$Bootstrap_Alert$Info = {ctor: 'Info'};
var _rundis$elm_bootstrap$Bootstrap_Alert$info = function (children) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Alert$alertCustom, _rundis$elm_bootstrap$Bootstrap_Alert$Info, children);
};
var _rundis$elm_bootstrap$Bootstrap_Alert$Success = {ctor: 'Success'};
var _rundis$elm_bootstrap$Bootstrap_Alert$success = function (children) {
	return A2(_rundis$elm_bootstrap$Bootstrap_Alert$alertCustom, _rundis$elm_bootstrap$Bootstrap_Alert$Success, children);
};

var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$roleClass = function (role) {
	return _elm_lang$html$Html_Attributes$class(
		function () {
			var _p0 = role;
			switch (_p0.ctor) {
				case 'Success':
					return 'list-group-item-success';
				case 'Info':
					return 'list-group-item-info';
				case 'Warning':
					return 'list-group-item-warning';
				default:
					return 'list-group-item-danger';
			}
		}());
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$itemAttributes = function (options) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'list-group-item', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'disabled', _1: options.disabled},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'active', _1: options.active},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'list-group-item-action', _1: options.action},
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$disabled(options.disabled),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					A2(
						_elm_lang$core$Maybe$map,
						function (r) {
							return {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$roleClass(r),
								_1: {ctor: '[]'}
							};
						},
						options.role)),
				options.attributes)));
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$preventClick = A2(_elm_lang$html$Html_Attributes$attribute, 'onclick', 'var event = arguments[0] || window.event; event.preventDefault();');
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$applyModifier = F2(
	function (modifier, options) {
		var _p1 = modifier;
		switch (_p1.ctor) {
			case 'Roled':
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						role: _elm_lang$core$Maybe$Just(_p1._0)
					});
			case 'Action':
				return _elm_lang$core$Native_Utils.update(
					options,
					{action: true});
			case 'Disabled':
				return _elm_lang$core$Native_Utils.update(
					options,
					{disabled: true});
			case 'Active':
				return _elm_lang$core$Native_Utils.update(
					options,
					{active: true});
			default:
				return _elm_lang$core$Native_Utils.update(
					options,
					{
						attributes: A2(_elm_lang$core$Basics_ops['++'], options.attributes, _p1._0)
					});
		}
	});
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$defaultOptions = {
	role: _elm_lang$core$Maybe$Nothing,
	active: false,
	disabled: false,
	action: false,
	attributes: {ctor: '[]'}
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderCustomItem = function (_p2) {
	var _p3 = _p2;
	return A2(
		_p3._0.itemFn,
		_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$itemAttributes(
			A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$applyModifier, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$defaultOptions, _p3._0.options)),
		_p3._0.children);
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderItem = function (_p4) {
	var _p5 = _p4;
	return A2(
		_p5._0.itemFn,
		_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$itemAttributes(
			A3(_elm_lang$core$List$foldl, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$applyModifier, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$defaultOptions, _p5._0.options)),
		_p5._0.children);
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$ItemOptions = F5(
	function (a, b, c, d, e) {
		return {role: a, active: b, disabled: c, action: d, attributes: e};
	});
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Attrs = function (a) {
	return {ctor: 'Attrs', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Action = {ctor: 'Action'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Disabled = {ctor: 'Disabled'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Active = {ctor: 'Active'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Roled = function (a) {
	return {ctor: 'Roled', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Danger = {ctor: 'Danger'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Warning = {ctor: 'Warning'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Info = {ctor: 'Info'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Success = {ctor: 'Success'};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Item = function (a) {
	return {ctor: 'Item', _0: a};
};
var _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$CustomItem = function (a) {
	return {ctor: 'CustomItem', _0: a};
};

var _rundis$elm_bootstrap$Bootstrap_ListGroup$attrs = function (attrs) {
	return _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Attrs(attrs);
};
var _rundis$elm_bootstrap$Bootstrap_ListGroup$disabled = _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Disabled;
var _rundis$elm_bootstrap$Bootstrap_ListGroup$active = _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Active;
var _rundis$elm_bootstrap$Bootstrap_ListGroup$danger = _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Danger);
var _rundis$elm_bootstrap$Bootstrap_ListGroup$warning = _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Warning);
var _rundis$elm_bootstrap$Bootstrap_ListGroup$info = _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Info);
var _rundis$elm_bootstrap$Bootstrap_ListGroup$success = _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Roled(_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Success);
var _rundis$elm_bootstrap$Bootstrap_ListGroup$button = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$CustomItem(
			{
				itemFn: _elm_lang$html$Html$button,
				children: children,
				options: {
					ctor: '::',
					_0: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Action,
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						options,
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('button'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						})
				}
			});
	});
var _rundis$elm_bootstrap$Bootstrap_ListGroup$anchor = F2(
	function (options, children) {
		var updOptions = A2(
			_elm_lang$core$List$any,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(_rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Disabled),
			options) ? A2(
			_elm_lang$core$Basics_ops['++'],
			options,
			{
				ctor: '::',
				_0: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Attrs(
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$preventClick,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}) : options;
		return _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$CustomItem(
			{
				itemFn: _elm_lang$html$Html$a,
				children: children,
				options: {ctor: '::', _0: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Action, _1: updOptions}
			});
	});
var _rundis$elm_bootstrap$Bootstrap_ListGroup$keyedCustom = function (items) {
	return A3(
		_elm_lang$html$Html_Keyed$node,
		'div',
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('list-group'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (_p0) {
				var _p1 = _p0;
				return {
					ctor: '_Tuple2',
					_0: _p1._0,
					_1: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderCustomItem(_p1._1)
				};
			},
			items));
};
var _rundis$elm_bootstrap$Bootstrap_ListGroup$custom = function (items) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('list-group'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderCustomItem, items));
};
var _rundis$elm_bootstrap$Bootstrap_ListGroup$li = F2(
	function (options, children) {
		return _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$Item(
			{itemFn: _elm_lang$html$Html$li, children: children, options: options});
	});
var _rundis$elm_bootstrap$Bootstrap_ListGroup$keyedUl = function (keyedItems) {
	return A2(
		_elm_lang$html$Html_Keyed$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('list-group'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (_p2) {
				var _p3 = _p2;
				return {
					ctor: '_Tuple2',
					_0: _p3._0,
					_1: _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderItem(_p3._1)
				};
			},
			keyedItems));
};
var _rundis$elm_bootstrap$Bootstrap_ListGroup$ul = function (items) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('list-group'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _rundis$elm_bootstrap$Bootstrap_Internal_ListGroup$renderItem, items));
};

var _Giga_dev$newman$Pages_ManageNewman$statusToString = function (status) {
	var _p0 = status;
	switch (_p0.ctor) {
		case 'RUNNING':
			return 'RUNNING';
		case 'SUSPENDING':
			return 'SUSPENDING';
		case 'SUSPENDED':
			return 'SUSPENDED';
		case 'SUSPEND_FAILED':
			return 'SUSPEND_FAILED';
		default:
			return 'Received Wrong Status';
	}
};
var _Giga_dev$newman$Pages_ManageNewman$Model = function (a) {
	return {currentStatus: a};
};
var _Giga_dev$newman$Pages_ManageNewman$WrongStatus = {ctor: 'WrongStatus'};
var _Giga_dev$newman$Pages_ManageNewman$SUSPEND_FAILED = {ctor: 'SUSPEND_FAILED'};
var _Giga_dev$newman$Pages_ManageNewman$SUSPENDED = {ctor: 'SUSPENDED'};
var _Giga_dev$newman$Pages_ManageNewman$SUSPENDING = {ctor: 'SUSPENDING'};
var _Giga_dev$newman$Pages_ManageNewman$RUNNING = {ctor: 'RUNNING'};
var _Giga_dev$newman$Pages_ManageNewman$stringToStatus = function (str) {
	var _p1 = str;
	switch (_p1) {
		case 'RUNNING':
			return _Giga_dev$newman$Pages_ManageNewman$RUNNING;
		case 'SUSPENDING':
			return _Giga_dev$newman$Pages_ManageNewman$SUSPENDING;
		case 'SUSPENDED':
			return _Giga_dev$newman$Pages_ManageNewman$SUSPENDED;
		case 'SUSPEND_FAILED':
			return _Giga_dev$newman$Pages_ManageNewman$SUSPEND_FAILED;
		default:
			return _Giga_dev$newman$Pages_ManageNewman$WrongStatus;
	}
};
var _Giga_dev$newman$Pages_ManageNewman$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_ManageNewman$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_ManageNewman$WebSocketEvent);
};
var _Giga_dev$newman$Pages_ManageNewman$SuspendRequestCompleted = function (a) {
	return {ctor: 'SuspendRequestCompleted', _0: a};
};
var _Giga_dev$newman$Pages_ManageNewman$onClickButtonCmd = function (model) {
	var op = function () {
		var _p2 = model.currentStatus;
		if (_p2.ctor === 'RUNNING') {
			return 'suspend';
		} else {
			return 'unsuspend';
		}
	}();
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_ManageNewman$SuspendRequestCompleted,
		_elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], '/api/newman/', op),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectString,
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			}));
};
var _Giga_dev$newman$Pages_ManageNewman$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'GotNewmanStatus':
				var _p4 = _p3._0;
				if (_p4.ctor === 'Err') {
					var _p5 = A2(_elm_lang$core$Debug$log, 'error', _p4._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentStatus: _Giga_dev$newman$Pages_ManageNewman$stringToStatus(_p4._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'WebSocketEvent':
				var _p6 = _p3._0;
				if (_p6.ctor === 'ModifiedServerStatus') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentStatus: _Giga_dev$newman$Pages_ManageNewman$stringToStatus(_p6._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'OnClickSuspendButton':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _Giga_dev$newman$Pages_ManageNewman$onClickButtonCmd(model)
				};
			default:
				var _p7 = _p3._0;
				if (_p7.ctor === 'Err') {
					var _p8 = A2(_elm_lang$core$Debug$log, 'error', _p7._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_ManageNewman$GotNewmanStatus = function (a) {
	return {ctor: 'GotNewmanStatus', _0: a};
};
var _Giga_dev$newman$Pages_ManageNewman$getNewmanStatusCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_ManageNewman$GotNewmanStatus,
	A2(_elm_lang$http$Http$get, '/api/newman/status', _Giga_dev$newman$Utils_Types$decodeStatus));
var _Giga_dev$newman$Pages_ManageNewman$init = {
	ctor: '_Tuple2',
	_0: {currentStatus: _Giga_dev$newman$Pages_ManageNewman$RUNNING},
	_1: _Giga_dev$newman$Pages_ManageNewman$getNewmanStatusCmd
};
var _Giga_dev$newman$Pages_ManageNewman$OnClickSuspendButton = {ctor: 'OnClickSuspendButton'};
var _Giga_dev$newman$Pages_ManageNewman$view = function (model) {
	var buttonColor = _elm_lang$core$Native_Utils.eq(model.currentStatus, _Giga_dev$newman$Pages_ManageNewman$RUNNING) ? _rundis$elm_bootstrap$Bootstrap_Button$danger : _rundis$elm_bootstrap$Bootstrap_Button$success;
	var updateButtonText = _elm_lang$core$Native_Utils.eq(model.currentStatus, _Giga_dev$newman$Pages_ManageNewman$RUNNING) ? 'Suspend' : 'Unsuspend';
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Newman Status - ',
							_Giga_dev$newman$Pages_ManageNewman$statusToString(model.currentStatus))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$primary,
						_1: {
							ctor: '::',
							_0: buttonColor,
							_1: {
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_ManageNewman$OnClickSuspendButton),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '15px'},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(updateButtonText),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};

var _Giga_dev$newman$Pages_NewJobConfig$postJobConfig = F2(
	function (name, javaVersion) {
		return A3(
			_elm_lang$http$Http$post,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'/api/newman/job-config-from-gui?name=',
				A2(
					_elm_lang$core$Basics_ops['++'],
					name,
					A2(_elm_lang$core$Basics_ops['++'], '&javaVersion=', javaVersion))),
			_elm_lang$http$Http$emptyBody,
			_Giga_dev$newman$Utils_Types$decodeJobConfig);
	});
var _Giga_dev$newman$Pages_NewJobConfig$getAllJavaVersions = A2(
	_elm_lang$http$Http$get,
	'/api/newman/java-versions',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _Giga_dev$newman$Pages_NewJobConfig$Model = F6(
	function (a, b, c, d, e, f) {
		return {javaVersions: a, selectedJavaVersion: b, name: c, modalState: d, errorMessage: e, savedJobConfig: f};
	});
var _Giga_dev$newman$Pages_NewJobConfig$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_NewJobConfig$OnClickSave = {ctor: 'OnClickSave'};
var _Giga_dev$newman$Pages_NewJobConfig$SubmitNewJobConfigCompleted = function (a) {
	return {ctor: 'SubmitNewJobConfigCompleted', _0: a};
};
var _Giga_dev$newman$Pages_NewJobConfig$saveJobConfigCmd = F2(
	function (name, javaVersion) {
		var postReq = A2(_Giga_dev$newman$Pages_NewJobConfig$postJobConfig, name, javaVersion);
		return A2(_elm_lang$http$Http$send, _Giga_dev$newman$Pages_NewJobConfig$SubmitNewJobConfigCompleted, postReq);
	});
var _Giga_dev$newman$Pages_NewJobConfig$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetAllJavaVersionsCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					var _p2 = _p1._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								javaVersions: _p2,
								selectedJavaVersion: A2(
									_elm_lang$core$Maybe$withDefault,
									'',
									_elm_lang$core$List$head(_p2))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'GetAllJavaVersionsCompleted', _p1._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdateName':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{name: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateSelectedJavaVersion':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedJavaVersion: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'OnClickSave':
				var _p3 = {ctor: '_Tuple2', _0: model.name, _1: model.selectedJavaVersion};
				_v2_2:
				do {
					if (_p3.ctor === '_Tuple2') {
						if (_p3._0 === '') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{errorMessage: 'Please enter a name', modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							if (_p3._1 === '') {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{errorMessage: 'Please select a Java Version', modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								break _v2_2;
							}
						}
					} else {
						break _v2_2;
					}
				} while(false);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_Giga_dev$newman$Pages_NewJobConfig$saveJobConfigCmd, model.name, model.selectedJavaVersion)
				};
			case 'SubmitNewJobConfigCompleted':
				var _p4 = _p0._0;
				if (_p4.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								savedJobConfig: _elm_lang$core$Maybe$Just(_p4._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{modalState: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Pages_NewJobConfig$UpdateName = function (a) {
	return {ctor: 'UpdateName', _0: a};
};
var _Giga_dev$newman$Pages_NewJobConfig$UpdateSelectedJavaVersion = function (a) {
	return {ctor: 'UpdateSelectedJavaVersion', _0: a};
};
var _Giga_dev$newman$Pages_NewJobConfig$view = function (model) {
	var savedJobConfigString = function () {
		var _p5 = model.savedJobConfig;
		if (_p5.ctor === 'Nothing') {
			return '';
		} else {
			return A2(_elm_lang$core$Basics_ops['++'], 'Finished Saving New Job configuration: ', _p5._0.name);
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-header'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('New Job Configuration'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Name:'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('New Configuration Name'),
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_NewJobConfig$UpdateName),
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: function () {
								var toOption = function (data) {
									return A2(
										_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(data),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$selected(
													_elm_lang$core$Native_Utils.eq(model.selectedJavaVersion, data)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(data),
											_1: {ctor: '[]'}
										});
								};
								return A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Select Java Version:'),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Pages_NewJobConfig$UpdateSelectedJavaVersion),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												},
												A2(_elm_lang$core$List$map, toOption, model.javaVersions)),
											_1: {ctor: '[]'}
										}
									});
							}(),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$br,
									{ctor: '[]'},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Button$button,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$secondary,
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_NewJobConfig$OnClickSave),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '15px'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Save New Job configuration'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$br,
												{ctor: '[]'},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'color', _1: '#2FDC62'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
																		_1: {ctor: '[]'}
																	}
																}
															}),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(savedJobConfigString),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$br,
														{ctor: '[]'},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A3(_Giga_dev$newman$Views_NewmanModal$viewError, model.errorMessage, _Giga_dev$newman$Pages_NewJobConfig$NewmanModalMsg, model.modalState),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_NewJobConfig$GetAllJavaVersionsCompleted = function (a) {
	return {ctor: 'GetAllJavaVersionsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_NewJobConfig$getAllJavaVersionsCmd = A2(_elm_lang$http$Http$send, _Giga_dev$newman$Pages_NewJobConfig$GetAllJavaVersionsCompleted, _Giga_dev$newman$Pages_NewJobConfig$getAllJavaVersions);
var _Giga_dev$newman$Pages_NewJobConfig$init = {
	ctor: '_Tuple2',
	_0: {
		javaVersions: {ctor: '[]'},
		selectedJavaVersion: '',
		name: '',
		modalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		errorMessage: '',
		savedJobConfig: _elm_lang$core$Maybe$Nothing
	},
	_1: _Giga_dev$newman$Pages_NewJobConfig$getAllJavaVersionsCmd
};

var _debois$elm_dom$DOM$className = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'className',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$string);
var _debois$elm_dom$DOM$scrollTop = A2(_elm_lang$core$Json_Decode$field, 'scrollTop', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$scrollLeft = A2(_elm_lang$core$Json_Decode$field, 'scrollLeft', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetTop = A2(_elm_lang$core$Json_Decode$field, 'offsetTop', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetLeft = A2(_elm_lang$core$Json_Decode$field, 'offsetLeft', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetHeight = A2(_elm_lang$core$Json_Decode$field, 'offsetHeight', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$offsetWidth = A2(_elm_lang$core$Json_Decode$field, 'offsetWidth', _elm_lang$core$Json_Decode$float);
var _debois$elm_dom$DOM$childNodes = function (decoder) {
	var loop = F2(
		function (idx, xs) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (_p0) {
					return A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Json_Decode$succeed(xs),
						A2(
							_elm_lang$core$Maybe$map,
							function (x) {
								return A2(
									loop,
									idx + 1,
									{ctor: '::', _0: x, _1: xs});
							},
							_p0));
				},
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_lang$core$Json_Decode$field,
						_elm_lang$core$Basics$toString(idx),
						decoder)));
		});
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$List$reverse,
		A2(
			_elm_lang$core$Json_Decode$field,
			'childNodes',
			A2(
				loop,
				0,
				{ctor: '[]'})));
};
var _debois$elm_dom$DOM$childNode = function (idx) {
	return _elm_lang$core$Json_Decode$at(
		{
			ctor: '::',
			_0: 'childNodes',
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(idx),
				_1: {ctor: '[]'}
			}
		});
};
var _debois$elm_dom$DOM$parentElement = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'parentElement', decoder);
};
var _debois$elm_dom$DOM$previousSibling = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'previousSibling', decoder);
};
var _debois$elm_dom$DOM$nextSibling = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'nextSibling', decoder);
};
var _debois$elm_dom$DOM$offsetParent = F2(
	function (x, decoder) {
		return _elm_lang$core$Json_Decode$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$field,
					'offsetParent',
					_elm_lang$core$Json_Decode$null(x)),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Json_Decode$field, 'offsetParent', decoder),
					_1: {ctor: '[]'}
				}
			});
	});
var _debois$elm_dom$DOM$position = F2(
	function (x, y) {
		return A2(
			_elm_lang$core$Json_Decode$andThen,
			function (_p1) {
				var _p2 = _p1;
				var _p4 = _p2._1;
				var _p3 = _p2._0;
				return A2(
					_debois$elm_dom$DOM$offsetParent,
					{ctor: '_Tuple2', _0: _p3, _1: _p4},
					A2(_debois$elm_dom$DOM$position, _p3, _p4));
			},
			A5(
				_elm_lang$core$Json_Decode$map4,
				F4(
					function (scrollLeft, scrollTop, offsetLeft, offsetTop) {
						return {ctor: '_Tuple2', _0: (x + offsetLeft) - scrollLeft, _1: (y + offsetTop) - scrollTop};
					}),
				_debois$elm_dom$DOM$scrollLeft,
				_debois$elm_dom$DOM$scrollTop,
				_debois$elm_dom$DOM$offsetLeft,
				_debois$elm_dom$DOM$offsetTop));
	});
var _debois$elm_dom$DOM$boundingClientRect = A4(
	_elm_lang$core$Json_Decode$map3,
	F3(
		function (_p5, width, height) {
			var _p6 = _p5;
			return {top: _p6._1, left: _p6._0, width: width, height: height};
		}),
	A2(_debois$elm_dom$DOM$position, 0, 0),
	_debois$elm_dom$DOM$offsetWidth,
	_debois$elm_dom$DOM$offsetHeight);
var _debois$elm_dom$DOM$target = function (decoder) {
	return A2(_elm_lang$core$Json_Decode$field, 'target', decoder);
};
var _debois$elm_dom$DOM$Rectangle = F4(
	function (a, b, c, d) {
		return {top: a, left: b, width: c, height: d};
	});

var _elm_lang$dom$Dom$blur = _elm_lang$dom$Native_Dom.blur;
var _elm_lang$dom$Dom$focus = _elm_lang$dom$Native_Dom.focus;
var _elm_lang$dom$Dom$NotFound = function (a) {
	return {ctor: 'NotFound', _0: a};
};

var _elm_lang$dom$Dom_Size$width = _elm_lang$dom$Native_Dom.width;
var _elm_lang$dom$Dom_Size$height = _elm_lang$dom$Native_Dom.height;
var _elm_lang$dom$Dom_Size$VisibleContentWithBordersAndMargins = {ctor: 'VisibleContentWithBordersAndMargins'};
var _elm_lang$dom$Dom_Size$VisibleContentWithBorders = {ctor: 'VisibleContentWithBorders'};
var _elm_lang$dom$Dom_Size$VisibleContent = {ctor: 'VisibleContent'};
var _elm_lang$dom$Dom_Size$Content = {ctor: 'Content'};

var _elm_lang$dom$Dom_Scroll$toX = _elm_lang$dom$Native_Dom.setScrollLeft;
var _elm_lang$dom$Dom_Scroll$x = _elm_lang$dom$Native_Dom.getScrollLeft;
var _elm_lang$dom$Dom_Scroll$toRight = _elm_lang$dom$Native_Dom.toRight;
var _elm_lang$dom$Dom_Scroll$toLeft = function (id) {
	return A2(_elm_lang$dom$Dom_Scroll$toX, id, 0);
};
var _elm_lang$dom$Dom_Scroll$toY = _elm_lang$dom$Native_Dom.setScrollTop;
var _elm_lang$dom$Dom_Scroll$y = _elm_lang$dom$Native_Dom.getScrollTop;
var _elm_lang$dom$Dom_Scroll$toBottom = _elm_lang$dom$Native_Dom.toBottom;
var _elm_lang$dom$Dom_Scroll$toTop = function (id) {
	return A2(_elm_lang$dom$Dom_Scroll$toY, id, 0);
};

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, normHue, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(normHue, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(normHue, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

var _rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier = function (identifier) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[^a-zA-Z0-9_-]'),
		function (_p0) {
			return '';
		},
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('\\s+'),
			function (_p1) {
				return '-';
			},
			_elm_lang$core$String$trim(
				_elm_lang$core$Basics$toString(identifier))));
};
var _rtfeldman$elm_css_util$Css_Helpers$identifierToString = F2(
	function (name, identifier) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(name),
			_rtfeldman$elm_css_util$Css_Helpers$toCssIdentifier(identifier));
	});

var _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations = function (declarations) {
	dropEmptyDeclarations:
	while (true) {
		var _p0 = declarations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'StyleBlockDeclaration':
					var _p1 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0._2)) {
						var _v1 = _p1;
						declarations = _v1;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p1)
						};
					}
				case 'MediaRule':
					var _p4 = _p0._1;
					if (A2(
						_elm_lang$core$List$all,
						function (_p2) {
							var _p3 = _p2;
							return _elm_lang$core$List$isEmpty(_p3._2);
						},
						_p0._0._1)) {
						var _v3 = _p4;
						declarations = _v3;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p4)
						};
					}
				case 'SupportsRule':
					var _p5 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v4 = _p5;
						declarations = _v4;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p5)
						};
					}
				case 'DocumentRule':
					return {
						ctor: '::',
						_0: _p0._0,
						_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p0._1)
					};
				case 'PageRule':
					var _p6 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v5 = _p6;
						declarations = _v5;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p6)
						};
					}
				case 'FontFace':
					var _p7 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v6 = _p7;
						declarations = _v6;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p7)
						};
					}
				case 'Keyframes':
					var _p8 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._1)) {
						var _v7 = _p8;
						declarations = _v7;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p8)
						};
					}
				case 'Viewport':
					var _p9 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v8 = _p9;
						declarations = _v8;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p9)
						};
					}
				case 'CounterStyle':
					var _p10 = _p0._1;
					if (_elm_lang$core$List$isEmpty(_p0._0._0)) {
						var _v9 = _p10;
						declarations = _v9;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p10)
						};
					}
				default:
					var _p13 = _p0._1;
					if (A2(
						_elm_lang$core$List$all,
						function (_p11) {
							var _p12 = _p11;
							return _elm_lang$core$List$isEmpty(_p12._1);
						},
						_p0._0._0)) {
						var _v11 = _p13;
						declarations = _v11;
						continue dropEmptyDeclarations;
					} else {
						return {
							ctor: '::',
							_0: _p0._0,
							_1: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p13)
						};
					}
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Structure$dropEmpty = function (_p14) {
	var _p15 = _p14;
	return {
		charset: _p15.charset,
		imports: _p15.imports,
		namespaces: _p15.namespaces,
		declarations: _rtfeldman$elm_css$Css_Structure$dropEmptyDeclarations(_p15.declarations)
	};
};
var _rtfeldman$elm_css$Css_Structure$concatMapLast = F2(
	function (update, list) {
		var _p16 = list;
		if (_p16.ctor === '[]') {
			return list;
		} else {
			if (_p16._1.ctor === '[]') {
				return update(_p16._0);
			} else {
				return {
					ctor: '::',
					_0: _p16._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$concatMapLast, update, _p16._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$mapLast = F2(
	function (update, list) {
		var _p17 = list;
		if (_p17.ctor === '[]') {
			return list;
		} else {
			if (_p17._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: update(_p17._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p17._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$mapLast, update, _p17._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$Property = F3(
	function (a, b, c) {
		return {important: a, key: b, value: c};
	});
var _rtfeldman$elm_css$Css_Structure$Stylesheet = F4(
	function (a, b, c, d) {
		return {charset: a, imports: b, namespaces: c, declarations: d};
	});
var _rtfeldman$elm_css$Css_Structure$MediaExpression = F2(
	function (a, b) {
		return {feature: a, value: b};
	});
var _rtfeldman$elm_css$Css_Structure$Compatible = {ctor: 'Compatible'};
var _rtfeldman$elm_css$Css_Structure$FontFeatureValues = function (a) {
	return {ctor: 'FontFeatureValues', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$CounterStyle = function (a) {
	return {ctor: 'CounterStyle', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Viewport = function (a) {
	return {ctor: 'Viewport', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Keyframes = F2(
	function (a, b) {
		return {ctor: 'Keyframes', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$FontFace = function (a) {
	return {ctor: 'FontFace', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$PageRule = F2(
	function (a, b) {
		return {ctor: 'PageRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {ctor: 'DocumentRule', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _rtfeldman$elm_css$Css_Structure$SupportsRule = F2(
	function (a, b) {
		return {ctor: 'SupportsRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$MediaRule = F2(
	function (a, b) {
		return {ctor: 'MediaRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration = function (a) {
	return {ctor: 'StyleBlockDeclaration', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock = F2(
	function (update, declarations) {
		var _p18 = declarations;
		_v15_12:
		do {
			if (_p18.ctor === '[]') {
				return declarations;
			} else {
				if (_p18._1.ctor === '[]') {
					switch (_p18._0.ctor) {
						case 'StyleBlockDeclaration':
							return A2(
								_elm_lang$core$List$map,
								_rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration,
								update(_p18._0._0));
						case 'MediaRule':
							if (_p18._0._1.ctor === '::') {
								if (_p18._0._1._1.ctor === '[]') {
									return {
										ctor: '::',
										_0: A2(
											_rtfeldman$elm_css$Css_Structure$MediaRule,
											_p18._0._0,
											update(_p18._0._1._0)),
										_1: {ctor: '[]'}
									};
								} else {
									var _p19 = A2(
										_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock,
										update,
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Structure$MediaRule, _p18._0._0, _p18._0._1._1),
											_1: {ctor: '[]'}
										});
									if (((_p19.ctor === '::') && (_p19._0.ctor === 'MediaRule')) && (_p19._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p19._0._0,
												{ctor: '::', _0: _p18._0._1._0, _1: _p19._0._1}),
											_1: {ctor: '[]'}
										};
									} else {
										return _p19;
									}
								}
							} else {
								break _v15_12;
							}
						case 'SupportsRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Structure$SupportsRule,
									_p18._0._0,
									A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, update, _p18._0._1)),
								_1: {ctor: '[]'}
							};
						case 'DocumentRule':
							return A2(
								_elm_lang$core$List$map,
								A4(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p18._0._0, _p18._0._1, _p18._0._2, _p18._0._3),
								update(_p18._0._4));
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v15_12;
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: _p18._0,
			_1: A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, update, _p18._1)
		};
	});
var _rtfeldman$elm_css$Css_Structure$StyleBlock = F3(
	function (a, b, c) {
		return {ctor: 'StyleBlock', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$Css_Structure$withPropertyAppended = F2(
	function (property, _p20) {
		var _p21 = _p20;
		return A3(
			_rtfeldman$elm_css$Css_Structure$StyleBlock,
			_p21._0,
			_p21._1,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_p21._2,
				{
					ctor: '::',
					_0: property,
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css_Structure$appendProperty = F2(
	function (property, declarations) {
		var _p22 = declarations;
		if (_p22.ctor === '[]') {
			return declarations;
		} else {
			if (_p22._1.ctor === '[]') {
				switch (_p22._0.ctor) {
					case 'StyleBlockDeclaration':
						return {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
								A2(_rtfeldman$elm_css$Css_Structure$withPropertyAppended, property, _p22._0._0)),
							_1: {ctor: '[]'}
						};
					case 'MediaRule':
						return {
							ctor: '::',
							_0: A2(
								_rtfeldman$elm_css$Css_Structure$MediaRule,
								_p22._0._0,
								A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$withPropertyAppended(property),
									_p22._0._1)),
							_1: {ctor: '[]'}
						};
					default:
						return declarations;
				}
			} else {
				return {
					ctor: '::',
					_0: _p22._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$appendProperty, property, _p22._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendToLastSelector = F2(
	function (f, styleBlock) {
		var _p23 = styleBlock;
		if (_p23._1.ctor === '[]') {
			var _p24 = _p23._0;
			return {
				ctor: '::',
				_0: A3(
					_rtfeldman$elm_css$Css_Structure$StyleBlock,
					_p24,
					{ctor: '[]'},
					_p23._2),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css_Structure$StyleBlock,
						f(_p24),
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			};
		} else {
			var _p26 = _p23._1;
			var _p25 = _p23._0;
			var newFirst = f(_p25);
			var newRest = A2(_elm_lang$core$List$map, f, _p26);
			return {
				ctor: '::',
				_0: A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p25, _p26, _p23._2),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css_Structure$StyleBlock,
						newFirst,
						newRest,
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			};
		}
	});
var _rtfeldman$elm_css$Css_Structure$Speech = {ctor: 'Speech'};
var _rtfeldman$elm_css$Css_Structure$Screen = {ctor: 'Screen'};
var _rtfeldman$elm_css$Css_Structure$Print = {ctor: 'Print'};
var _rtfeldman$elm_css$Css_Structure$CustomQuery = function (a) {
	return {ctor: 'CustomQuery', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$NotQuery = F2(
	function (a, b) {
		return {ctor: 'NotQuery', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$OnlyQuery = F2(
	function (a, b) {
		return {ctor: 'OnlyQuery', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$AllQuery = function (a) {
	return {ctor: 'AllQuery', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Selector = F3(
	function (a, b, c) {
		return {ctor: 'Selector', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$Css_Structure$applyPseudoElement = F2(
	function (pseudo, _p27) {
		var _p28 = _p27;
		return A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			_p28._0,
			_p28._1,
			_elm_lang$core$Maybe$Just(pseudo));
	});
var _rtfeldman$elm_css$Css_Structure$appendPseudoElementToLastSelector = F2(
	function (pseudo, styleBlock) {
		return A2(
			_rtfeldman$elm_css$Css_Structure$appendToLastSelector,
			_rtfeldman$elm_css$Css_Structure$applyPseudoElement(pseudo),
			styleBlock);
	});
var _rtfeldman$elm_css$Css_Structure$CustomSelector = F2(
	function (a, b) {
		return {ctor: 'CustomSelector', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence = function (a) {
	return {ctor: 'UniversalSelectorSequence', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$TypeSelectorSequence = F2(
	function (a, b) {
		return {ctor: 'TypeSelectorSequence', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatable = F2(
	function (selector, sequence) {
		var _p29 = sequence;
		switch (_p29.ctor) {
			case 'TypeSelectorSequence':
				return A2(
					_rtfeldman$elm_css$Css_Structure$TypeSelectorSequence,
					_p29._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._1,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
			case 'UniversalSelectorSequence':
				return _rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._0,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
			default:
				return A2(
					_rtfeldman$elm_css$Css_Structure$CustomSelector,
					_p29._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p29._1,
						{
							ctor: '::',
							_0: selector,
							_1: {ctor: '[]'}
						}));
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator = F2(
	function (selector, list) {
		var _p30 = list;
		if (_p30.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if ((_p30._0.ctor === '_Tuple2') && (_p30._1.ctor === '[]')) {
				return {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _p30._0._0,
						_1: A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, selector, _p30._0._1)
					},
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p30._0,
					_1: A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator, selector, _p30._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableSelector = F2(
	function (repeatableSimpleSelector, selector) {
		var _p31 = selector;
		if (_p31._1.ctor === '[]') {
			return A3(
				_rtfeldman$elm_css$Css_Structure$Selector,
				A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, repeatableSimpleSelector, _p31._0),
				{ctor: '[]'},
				_p31._2);
		} else {
			return A3(
				_rtfeldman$elm_css$Css_Structure$Selector,
				_p31._0,
				A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableWithCombinator, repeatableSimpleSelector, _p31._1),
				_p31._2);
		}
	});
var _rtfeldman$elm_css$Css_Structure$extendLastSelector = F2(
	function (selector, declarations) {
		var _p32 = declarations;
		_v24_15:
		do {
			if (_p32.ctor === '[]') {
				return declarations;
			} else {
				if (_p32._1.ctor === '[]') {
					switch (_p32._0.ctor) {
						case 'StyleBlockDeclaration':
							if (_p32._0._0._1.ctor === '[]') {
								return {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
										A3(
											_rtfeldman$elm_css$Css_Structure$StyleBlock,
											A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._0._0),
											{ctor: '[]'},
											_p32._0._0._2)),
									_1: {ctor: '[]'}
								};
							} else {
								var newRest = A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
									_p32._0._0._1);
								return {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
										A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._0._0, newRest, _p32._0._0._2)),
									_1: {ctor: '[]'}
								};
							}
						case 'MediaRule':
							if (_p32._0._1.ctor === '::') {
								if (_p32._0._1._1.ctor === '[]') {
									if (_p32._0._1._0._1.ctor === '[]') {
										var newStyleBlock = A3(
											_rtfeldman$elm_css$Css_Structure$StyleBlock,
											A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._1._0._0),
											{ctor: '[]'},
											_p32._0._1._0._2);
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p32._0._0,
												{
													ctor: '::',
													_0: newStyleBlock,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										};
									} else {
										var newRest = A2(
											_rtfeldman$elm_css$Css_Structure$mapLast,
											_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
											_p32._0._1._0._1);
										var newStyleBlock = A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._1._0._0, newRest, _p32._0._1._0._2);
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p32._0._0,
												{
													ctor: '::',
													_0: newStyleBlock,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										};
									}
								} else {
									var _p33 = A2(
										_rtfeldman$elm_css$Css_Structure$extendLastSelector,
										selector,
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Structure$MediaRule, _p32._0._0, _p32._0._1._1),
											_1: {ctor: '[]'}
										});
									if (((_p33.ctor === '::') && (_p33._0.ctor === 'MediaRule')) && (_p33._1.ctor === '[]')) {
										return {
											ctor: '::',
											_0: A2(
												_rtfeldman$elm_css$Css_Structure$MediaRule,
												_p33._0._0,
												{ctor: '::', _0: _p32._0._1._0, _1: _p33._0._1}),
											_1: {ctor: '[]'}
										};
									} else {
										return _p33;
									}
								}
							} else {
								break _v24_15;
							}
						case 'SupportsRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Structure$SupportsRule,
									_p32._0._0,
									A2(_rtfeldman$elm_css$Css_Structure$extendLastSelector, selector, _p32._0._1)),
								_1: {ctor: '[]'}
							};
						case 'DocumentRule':
							if (_p32._0._4._1.ctor === '[]') {
								var newStyleBlock = A3(
									_rtfeldman$elm_css$Css_Structure$StyleBlock,
									A2(_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector, selector, _p32._0._4._0),
									{ctor: '[]'},
									_p32._0._4._2);
								return {
									ctor: '::',
									_0: A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p32._0._0, _p32._0._1, _p32._0._2, _p32._0._3, newStyleBlock),
									_1: {ctor: '[]'}
								};
							} else {
								var newRest = A2(
									_rtfeldman$elm_css$Css_Structure$mapLast,
									_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
									_p32._0._4._1);
								var newStyleBlock = A3(_rtfeldman$elm_css$Css_Structure$StyleBlock, _p32._0._4._0, newRest, _p32._0._4._2);
								return {
									ctor: '::',
									_0: A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p32._0._0, _p32._0._1, _p32._0._2, _p32._0._3, newStyleBlock),
									_1: {ctor: '[]'}
								};
							}
						case 'PageRule':
							return declarations;
						case 'FontFace':
							return declarations;
						case 'Keyframes':
							return declarations;
						case 'Viewport':
							return declarations;
						case 'CounterStyle':
							return declarations;
						default:
							return declarations;
					}
				} else {
					break _v24_15;
				}
			}
		} while(false);
		return {
			ctor: '::',
			_0: _p32._0,
			_1: A2(_rtfeldman$elm_css$Css_Structure$extendLastSelector, selector, _p32._1)
		};
	});
var _rtfeldman$elm_css$Css_Structure$appendRepeatableToLastSelector = F2(
	function (selector, styleBlock) {
		return A2(
			_rtfeldman$elm_css$Css_Structure$appendToLastSelector,
			_rtfeldman$elm_css$Css_Structure$appendRepeatableSelector(selector),
			styleBlock);
	});
var _rtfeldman$elm_css$Css_Structure$PseudoClassSelector = function (a) {
	return {ctor: 'PseudoClassSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$IdSelector = function (a) {
	return {ctor: 'IdSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$ClassSelector = function (a) {
	return {ctor: 'ClassSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$TypeSelector = function (a) {
	return {ctor: 'TypeSelector', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$PseudoElement = function (a) {
	return {ctor: 'PseudoElement', _0: a};
};
var _rtfeldman$elm_css$Css_Structure$Descendant = {ctor: 'Descendant'};
var _rtfeldman$elm_css$Css_Structure$Child = {ctor: 'Child'};
var _rtfeldman$elm_css$Css_Structure$GeneralSibling = {ctor: 'GeneralSibling'};
var _rtfeldman$elm_css$Css_Structure$AdjacentSibling = {ctor: 'AdjacentSibling'};

var _rtfeldman$elm_css$Css_Preprocess$propertyToPair = function (property) {
	var value = property.important ? A2(_elm_lang$core$Basics_ops['++'], property.value, ' !important') : property.value;
	return {ctor: '_Tuple2', _0: property.key, _1: value};
};
var _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs = function (styles) {
	toPropertyPairs:
	while (true) {
		var _p0 = styles;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			switch (_p0._0.ctor) {
				case 'AppendProperty':
					return {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css_Preprocess$propertyToPair(_p0._0._0),
						_1: _rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._1)
					};
				case 'ApplyStyles':
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._0._0),
						_rtfeldman$elm_css$Css_Preprocess$toPropertyPairs(_p0._1));
				default:
					var _v1 = _p0._1;
					styles = _v1;
					continue toPropertyPairs;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet = function (_p1) {
	var _p2 = _p1;
	return _p2._0;
};
var _rtfeldman$elm_css$Css_Preprocess$toMediaRule = F2(
	function (mediaQueries, declaration) {
		var _p3 = declaration;
		switch (_p3.ctor) {
			case 'StyleBlockDeclaration':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					mediaQueries,
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					});
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p3._0),
					_p3._1);
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$SupportsRule,
					_p3._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Preprocess$toMediaRule(mediaQueries),
						_p3._1));
			case 'DocumentRule':
				return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p3._0, _p3._1, _p3._2, _p3._3, _p3._4);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$stylesheet = function (snippets) {
	return {
		charset: _elm_lang$core$Maybe$Nothing,
		imports: {ctor: '[]'},
		namespaces: {ctor: '[]'},
		snippets: snippets
	};
};
var _rtfeldman$elm_css$Css_Preprocess$Property = F4(
	function (a, b, c, d) {
		return {key: a, value: b, important: c, warnings: d};
	});
var _rtfeldman$elm_css$Css_Preprocess$Stylesheet = F4(
	function (a, b, c, d) {
		return {charset: a, imports: b, namespaces: c, snippets: d};
	});
var _rtfeldman$elm_css$Css_Preprocess$ApplyStyles = function (a) {
	return {ctor: 'ApplyStyles', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$WithMedia = F2(
	function (a, b) {
		return {ctor: 'WithMedia', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$WithPseudoElement = F2(
	function (a, b) {
		return {ctor: 'WithPseudoElement', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$NestSnippet = F2(
	function (a, b) {
		return {ctor: 'NestSnippet', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$ExtendSelector = F2(
	function (a, b) {
		return {ctor: 'ExtendSelector', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$AppendProperty = function (a) {
	return {ctor: 'AppendProperty', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$mapLastProperty = F2(
	function (update, style) {
		var _p4 = style;
		switch (_p4.ctor) {
			case 'AppendProperty':
				return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
					update(_p4._0));
			case 'ExtendSelector':
				return A2(
					_rtfeldman$elm_css$Css_Preprocess$ExtendSelector,
					_p4._0,
					A2(_rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty, update, _p4._1));
			case 'NestSnippet':
				return style;
			case 'WithPseudoElement':
				return style;
			case 'WithMedia':
				return style;
			default:
				return _rtfeldman$elm_css$Css_Preprocess$ApplyStyles(
					A2(
						_rtfeldman$elm_css$Css_Structure$mapLast,
						_rtfeldman$elm_css$Css_Preprocess$mapLastProperty(update),
						_p4._0));
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty = F2(
	function (update, styles) {
		var _p5 = styles;
		if (_p5.ctor === '[]') {
			return styles;
		} else {
			if (_p5._1.ctor === '[]') {
				return {
					ctor: '::',
					_0: A2(_rtfeldman$elm_css$Css_Preprocess$mapLastProperty, update, _p5._0),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _p5._0,
					_1: A2(_rtfeldman$elm_css$Css_Preprocess$mapAllLastProperty, update, _p5._1)
				};
			}
		}
	});
var _rtfeldman$elm_css$Css_Preprocess$Snippet = function (a) {
	return {ctor: 'Snippet', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$FontFeatureValues = function (a) {
	return {ctor: 'FontFeatureValues', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$CounterStyle = function (a) {
	return {ctor: 'CounterStyle', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$Viewport = function (a) {
	return {ctor: 'Viewport', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$Keyframes = F2(
	function (a, b) {
		return {ctor: 'Keyframes', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$FontFace = function (a) {
	return {ctor: 'FontFace', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$PageRule = F2(
	function (a, b) {
		return {ctor: 'PageRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$DocumentRule = F5(
	function (a, b, c, d, e) {
		return {ctor: 'DocumentRule', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _rtfeldman$elm_css$Css_Preprocess$SupportsRule = F2(
	function (a, b) {
		return {ctor: 'SupportsRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$MediaRule = F2(
	function (a, b) {
		return {ctor: 'MediaRule', _0: a, _1: b};
	});
var _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration = function (a) {
	return {ctor: 'StyleBlockDeclaration', _0: a};
};
var _rtfeldman$elm_css$Css_Preprocess$StyleBlock = F3(
	function (a, b, c) {
		return {ctor: 'StyleBlock', _0: a, _1: b, _2: c};
	});

var _rtfeldman$hex$Hex$toString = function (num) {
	return _elm_lang$core$String$fromList(
		(_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: A2(
				_rtfeldman$hex$Hex$unsafePositiveToDigits,
				{ctor: '[]'},
				_elm_lang$core$Basics$negate(num))
		} : A2(
			_rtfeldman$hex$Hex$unsafePositiveToDigits,
			{ctor: '[]'},
			num));
};
var _rtfeldman$hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(num, 16) < 0) {
				return {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(num),
					_1: digits
				};
			} else {
				var _v0 = {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(
						A2(_elm_lang$core$Basics_ops['%'], num, 16)),
					_1: digits
				},
					_v1 = (num / 16) | 0;
				digits = _v0;
				num = _v1;
				continue unsafePositiveToDigits;
			}
		}
	});
var _rtfeldman$hex$Hex$unsafeToDigit = function (num) {
	var _p0 = num;
	switch (_p0) {
		case 0:
			return _elm_lang$core$Native_Utils.chr('0');
		case 1:
			return _elm_lang$core$Native_Utils.chr('1');
		case 2:
			return _elm_lang$core$Native_Utils.chr('2');
		case 3:
			return _elm_lang$core$Native_Utils.chr('3');
		case 4:
			return _elm_lang$core$Native_Utils.chr('4');
		case 5:
			return _elm_lang$core$Native_Utils.chr('5');
		case 6:
			return _elm_lang$core$Native_Utils.chr('6');
		case 7:
			return _elm_lang$core$Native_Utils.chr('7');
		case 8:
			return _elm_lang$core$Native_Utils.chr('8');
		case 9:
			return _elm_lang$core$Native_Utils.chr('9');
		case 10:
			return _elm_lang$core$Native_Utils.chr('a');
		case 11:
			return _elm_lang$core$Native_Utils.chr('b');
		case 12:
			return _elm_lang$core$Native_Utils.chr('c');
		case 13:
			return _elm_lang$core$Native_Utils.chr('d');
		case 14:
			return _elm_lang$core$Native_Utils.chr('e');
		case 15:
			return _elm_lang$core$Native_Utils.chr('f');
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Hex',
				{
					start: {line: 138, column: 5},
					end: {line: 188, column: 84}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Tried to convert ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$hex$Hex$toString(num),
						' to hexadecimal.')));
	}
};
var _rtfeldman$hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		var _p2 = chars;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Ok(accumulated);
		} else {
			var recurse = function (additional) {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					position - 1,
					_p2._1,
					accumulated + (additional * Math.pow(16, position)));
			};
			var _p3 = _p2._0;
			switch (_p3.valueOf()) {
				case '0':
					return recurse(0);
				case '1':
					return recurse(1);
				case '2':
					return recurse(2);
				case '3':
					return recurse(3);
				case '4':
					return recurse(4);
				case '5':
					return recurse(5);
				case '6':
					return recurse(6);
				case '7':
					return recurse(7);
				case '8':
					return recurse(8);
				case '9':
					return recurse(9);
				case 'a':
					return recurse(10);
				case 'b':
					return recurse(11);
				case 'c':
					return recurse(12);
				case 'd':
					return recurse(13);
				case 'e':
					return recurse(14);
				case 'f':
					return recurse(15);
				default:
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p3),
							' is not a valid hexadecimal character.'));
			}
		}
	});
var _rtfeldman$hex$Hex$fromString = function (str) {
	if (_elm_lang$core$String$isEmpty(str)) {
		return _elm_lang$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var formatError = function (err) {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(str),
					_1: {
						ctor: '::',
						_0: 'is not a valid hexadecimal string because',
						_1: {
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var result = function () {
			if (A2(_elm_lang$core$String$startsWith, '-', str)) {
				var list = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					_elm_lang$core$List$tail(
						_elm_lang$core$String$toList(str)));
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Basics$negate,
					A3(
						_rtfeldman$hex$Hex$fromStringHelp,
						_elm_lang$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					_elm_lang$core$String$length(str) - 1,
					_elm_lang$core$String$toList(str),
					0);
			}
		}();
		return A2(_elm_lang$core$Result$mapError, formatError, result);
	}
};

var _rtfeldman$elm_css$Css$stroke = {value: 'stroke', pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$painted = {value: 'painted', pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$visibleStroke = {value: 'visibleStroke', pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$visibleFill = {value: 'visibleFill', pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$visiblePainted = {value: 'visiblePainted', pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$manipulation = {value: 'manipulation', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$pinchZoom = {value: 'pinch-zoom', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$panDown = {value: 'pan-down', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$panUp = {value: 'pan-up', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$panY = {value: 'pan-y', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$panRight = {value: 'pan-right', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$panLeft = {value: 'pan-left', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$panX = {value: 'pan-x', touchAction: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$stringsToValue = function (list) {
	return _elm_lang$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			_elm_lang$core$String$join,
			', ',
			A2(
				_elm_lang$core$List$map,
				function (s) {
					return s;
				},
				list))
	};
};
var _rtfeldman$elm_css$Css$valuesOrNone = function (list) {
	return _elm_lang$core$List$isEmpty(list) ? {value: 'none'} : {
		value: A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.value;
				},
				list))
	};
};
var _rtfeldman$elm_css$Css$stringToInt = function (str) {
	return A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toInt(str));
};
var _rtfeldman$elm_css$Css$numberToString = function (num) {
	return _elm_lang$core$Basics$toString(num + 0);
};
var _rtfeldman$elm_css$Css$numericalPercentageToString = function (value) {
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'%',
		_rtfeldman$elm_css$Css$numberToString(
			A2(
				F2(
					function (x, y) {
						return x * y;
					}),
				100,
				value)));
};
var _rtfeldman$elm_css$Css$pseudoElement = function (element) {
	return _rtfeldman$elm_css$Css_Preprocess$WithPseudoElement(
		_rtfeldman$elm_css$Css_Structure$PseudoElement(element));
};
var _rtfeldman$elm_css$Css$after = _rtfeldman$elm_css$Css$pseudoElement('after');
var _rtfeldman$elm_css$Css$before = _rtfeldman$elm_css$Css$pseudoElement('before');
var _rtfeldman$elm_css$Css$firstLetter = _rtfeldman$elm_css$Css$pseudoElement('first-letter');
var _rtfeldman$elm_css$Css$firstLine = _rtfeldman$elm_css$Css$pseudoElement('first-line');
var _rtfeldman$elm_css$Css$selection = _rtfeldman$elm_css$Css$pseudoElement('selection');
var _rtfeldman$elm_css$Css$pseudoClass = function ($class) {
	return _rtfeldman$elm_css$Css_Preprocess$ExtendSelector(
		_rtfeldman$elm_css$Css_Structure$PseudoClassSelector($class));
};
var _rtfeldman$elm_css$Css$active = _rtfeldman$elm_css$Css$pseudoClass('active');
var _rtfeldman$elm_css$Css$any = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'any(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$checked = _rtfeldman$elm_css$Css$pseudoClass('checked');
var _rtfeldman$elm_css$Css$disabled = _rtfeldman$elm_css$Css$pseudoClass('disabled');
var _rtfeldman$elm_css$Css$empty = _rtfeldman$elm_css$Css$pseudoClass('empty');
var _rtfeldman$elm_css$Css$enabled = _rtfeldman$elm_css$Css$pseudoClass('enabled');
var _rtfeldman$elm_css$Css$first = _rtfeldman$elm_css$Css$pseudoClass('first');
var _rtfeldman$elm_css$Css$firstChild = _rtfeldman$elm_css$Css$pseudoClass('first-child');
var _rtfeldman$elm_css$Css$firstOfType = _rtfeldman$elm_css$Css$pseudoClass('first-of-type');
var _rtfeldman$elm_css$Css$fullscreen = _rtfeldman$elm_css$Css$pseudoClass('fullscreen');
var _rtfeldman$elm_css$Css$focus = _rtfeldman$elm_css$Css$pseudoClass('focus');
var _rtfeldman$elm_css$Css$hover = _rtfeldman$elm_css$Css$pseudoClass('hover');
var _rtfeldman$elm_css$Css$visited = _rtfeldman$elm_css$Css$pseudoClass('visited');
var _rtfeldman$elm_css$Css$indeterminate = _rtfeldman$elm_css$Css$pseudoClass('indeterminate');
var _rtfeldman$elm_css$Css$invalid = _rtfeldman$elm_css$Css$pseudoClass('invalid');
var _rtfeldman$elm_css$Css$lang = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'lang(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$lastChild = _rtfeldman$elm_css$Css$pseudoClass('last-child');
var _rtfeldman$elm_css$Css$lastOfType = _rtfeldman$elm_css$Css$pseudoClass('last-of-type');
var _rtfeldman$elm_css$Css$link = _rtfeldman$elm_css$Css$pseudoClass('link');
var _rtfeldman$elm_css$Css$nthChild = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-child(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthLastChild = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-last-child(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthLastOfType = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-last-of-type(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$nthOfType = function (str) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'nth-of-type(',
			A2(_elm_lang$core$Basics_ops['++'], str, ')')));
};
var _rtfeldman$elm_css$Css$onlyChild = _rtfeldman$elm_css$Css$pseudoClass('only-child');
var _rtfeldman$elm_css$Css$onlyOfType = _rtfeldman$elm_css$Css$pseudoClass('only-of-type');
var _rtfeldman$elm_css$Css$optional = _rtfeldman$elm_css$Css$pseudoClass('optional');
var _rtfeldman$elm_css$Css$outOfRange = _rtfeldman$elm_css$Css$pseudoClass('out-of-range');
var _rtfeldman$elm_css$Css$readWrite = _rtfeldman$elm_css$Css$pseudoClass('read-write');
var _rtfeldman$elm_css$Css$required = _rtfeldman$elm_css$Css$pseudoClass('required');
var _rtfeldman$elm_css$Css$root = _rtfeldman$elm_css$Css$pseudoClass('root');
var _rtfeldman$elm_css$Css$scope = _rtfeldman$elm_css$Css$pseudoClass('scope');
var _rtfeldman$elm_css$Css$target = _rtfeldman$elm_css$Css$pseudoClass('target');
var _rtfeldman$elm_css$Css$valid = _rtfeldman$elm_css$Css$pseudoClass('valid');
var _rtfeldman$elm_css$Css$directionalityToString = function (directionality) {
	var _p0 = directionality;
	if (_p0.ctor === 'Ltr') {
		return 'ltr';
	} else {
		return 'rtl';
	}
};
var _rtfeldman$elm_css$Css$dir = function (directionality) {
	return _rtfeldman$elm_css$Css$pseudoClass(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'dir(',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$directionalityToString(directionality),
				')')));
};
var _rtfeldman$elm_css$Css$propertyWithWarnings = F3(
	function (warnings, key, value) {
		return _rtfeldman$elm_css$Css_Preprocess$AppendProperty(
			{key: key, value: value, important: false, warnings: warnings});
	});
var _rtfeldman$elm_css$Css$property = _rtfeldman$elm_css$Css$propertyWithWarnings(
	{ctor: '[]'});
var _rtfeldman$elm_css$Css$pointerEventsFill = A2(_rtfeldman$elm_css$Css$property, 'pointer-events', 'fill');
var _rtfeldman$elm_css$Css$pointerEventsAll = A2(_rtfeldman$elm_css$Css$property, 'pointer-events', 'all');
var _rtfeldman$elm_css$Css$batch = _rtfeldman$elm_css$Css_Preprocess$ApplyStyles;
var _rtfeldman$elm_css$Css$animationNames = function (identifiers) {
	var value = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css_util$Css_Helpers$identifierToString(''),
			identifiers));
	return A2(_rtfeldman$elm_css$Css$property, 'animation-name', value);
};
var _rtfeldman$elm_css$Css$animationName = function (identifier) {
	return _rtfeldman$elm_css$Css$animationNames(
		{
			ctor: '::',
			_0: identifier,
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css$preLine = {value: 'pre-line', whiteSpace: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$preWrap = {value: 'pre-wrap', whiteSpace: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$pre = {value: 'pre', whiteSpace: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$grabbing = {value: 'grabbing', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$grab = {value: 'grab', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$zoomOut = {value: 'zoom-out', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$zoomIn = {value: 'zoom-in', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$allScroll = {value: 'all-scroll', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$rowResize = {value: 'row-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$colResize = {value: 'col-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$nwseResize = {value: 'nwse-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$neswResize = {value: 'nesw-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$nsResize = {value: 'ns-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$ewResize = {value: 'ew-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$wResize = {value: 'w-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$swResize = {value: 'sw-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$seResize = {value: 'se-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$sResize = {value: 's-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$nwResize = {value: 'nw-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$neResize = {value: 'ne-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$nResize = {value: 'n-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$eResize = {value: 'e-resize', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$notAllowed = {value: 'not-allowed', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$noDrop = {value: 'no-drop', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$move = {value: 'move', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$copy = {value: 'copy', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$cursorAlias = {value: 'alias', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$verticalText = {value: 'vertical-text', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$text_ = {value: 'text', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$cell = {value: 'cell', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$wait = {value: 'wait', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$progress = {value: 'progress', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$pointer = {value: 'pointer', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$help = {value: 'help', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$contextMenu = {value: 'context-menu', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$crosshair = {value: 'crosshair', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$default = {value: 'default', cursor: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fontWeight = function (_p1) {
	var _p2 = _p1;
	var _p3 = _p2.value;
	var validWeight = function (weight) {
		return (!_elm_lang$core$Native_Utils.eq(
			_p3,
			_elm_lang$core$Basics$toString(weight))) ? true : A2(
			_elm_lang$core$List$member,
			weight,
			A2(
				_elm_lang$core$List$map,
				F2(
					function (x, y) {
						return x * y;
					})(100),
				A2(_elm_lang$core$List$range, 1, 9)));
	};
	var warnings = validWeight(
		_rtfeldman$elm_css$Css$stringToInt(_p3)) ? {ctor: '[]'} : {
		ctor: '::',
		_0: A2(
			_elm_lang$core$Basics_ops['++'],
			'fontWeight ',
			A2(_elm_lang$core$Basics_ops['++'], _p3, ' is invalid. Valid weights are: 100, 200, 300, 400, 500, 600, 700, 800, 900. Please see https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Values')),
		_1: {ctor: '[]'}
	};
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'font-weight', _p3);
};
var _rtfeldman$elm_css$Css$fontFeatureSettingsList = function (featureTagValues) {
	var warnings = _elm_lang$core$List$concat(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.warnings;
			},
			featureTagValues));
	var value = A2(
		_elm_lang$core$String$join,
		', ',
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.value;
			},
			featureTagValues));
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'font-feature-settings', value);
};
var _rtfeldman$elm_css$Css$fontFeatureSettings = function (_p4) {
	var _p5 = _p4;
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, _p5.warnings, 'font-feature-settings', _p5.value);
};
var _rtfeldman$elm_css$Css$qt = function (str) {
	return _elm_lang$core$Basics$toString(str);
};
var _rtfeldman$elm_css$Css$fontFace = function (value) {
	return A2(_elm_lang$core$Basics_ops['++'], 'font-face ', value);
};
var _rtfeldman$elm_css$Css$src_ = function (value) {
	return _elm_lang$core$Basics$toString(value.value);
};
var _rtfeldman$elm_css$Css$color = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'color', c.value);
};
var _rtfeldman$elm_css$Css$backgroundColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'background-color', c.value);
};
var _rtfeldman$elm_css$Css$outlineColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'outline-color', c.value);
};
var _rtfeldman$elm_css$Css$borderColor4 = F4(
	function (c1, c2, c3, c4) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {
						ctor: '::',
						_0: c3.value,
						_1: {
							ctor: '::',
							_0: c4.value,
							_1: {ctor: '[]'}
						}
					}
				}
			});
		var warnings = A2(
			_elm_lang$core$Basics_ops['++'],
			c1.warnings,
			A2(
				_elm_lang$core$Basics_ops['++'],
				c2.warnings,
				A2(_elm_lang$core$Basics_ops['++'], c3.warnings, c4.warnings)));
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor3 = F3(
	function (c1, c2, c3) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {
						ctor: '::',
						_0: c3.value,
						_1: {ctor: '[]'}
					}
				}
			});
		var warnings = A2(
			_elm_lang$core$Basics_ops['++'],
			c1.warnings,
			A2(_elm_lang$core$Basics_ops['++'], c2.warnings, c3.warnings));
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor2 = F2(
	function (c1, c2) {
		var value = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: c1.value,
				_1: {
					ctor: '::',
					_0: c2.value,
					_1: {ctor: '[]'}
				}
			});
		var warnings = A2(_elm_lang$core$Basics_ops['++'], c1.warnings, c2.warnings);
		return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, warnings, 'border-color', value);
	});
var _rtfeldman$elm_css$Css$borderColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBlockEndColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-block-end-color', c.value);
};
var _rtfeldman$elm_css$Css$borderTopColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-top-color', c.value);
};
var _rtfeldman$elm_css$Css$borderRightColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-right-color', c.value);
};
var _rtfeldman$elm_css$Css$borderLeftColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-left-color', c.value);
};
var _rtfeldman$elm_css$Css$borderInlineEndColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-inline-end-color', c.value);
};
var _rtfeldman$elm_css$Css$borderInlineStartColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-inline-start-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBottomColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-bottom-color', c.value);
};
var _rtfeldman$elm_css$Css$borderBlockStartColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'border-block-start-color', c.value);
};
var _rtfeldman$elm_css$Css$featureTag2 = F2(
	function (tag, value) {
		var potentialWarnings = {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: !_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$length(tag),
					4),
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					'Feature tags must be exactly 4 characters long. ',
					A2(_elm_lang$core$Basics_ops['++'], tag, ' is invalid.'))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.cmp(value, 0) < 0,
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Feature values cannot be negative. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(value),
							' is invalid.'))
				},
				_1: {ctor: '[]'}
			}
		};
		var warnings = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$second,
			A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$first, potentialWarnings));
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(tag),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_elm_lang$core$Basics$toString(value))),
			featureTagValue: _rtfeldman$elm_css$Css_Structure$Compatible,
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css$featureTag = function (tag) {
	return A2(_rtfeldman$elm_css$Css$featureTag2, tag, 1);
};
var _rtfeldman$elm_css$Css$featureOff = 0;
var _rtfeldman$elm_css$Css$featureOn = 1;
var _rtfeldman$elm_css$Css$slashedZero = {value: 'slashed-zero', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$ordinal = {value: 'ordinal', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$stackedFractions = {value: 'stacked-fractions', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$diagonalFractions = {value: 'diagonal-fractions', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tabularNums = {value: 'tabular-nums', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$proportionalNums = {value: 'proportional-nums', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$oldstyleNums = {value: 'oldstyle-nums', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$liningNums = {value: 'lining-nums', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantNumeric: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$noContextual = {value: 'no-contextual', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$contextual = {value: 'context', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$noHistoricalLigatures = {value: 'no-historical-ligatures', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$historicalLigatures = {value: 'historical-ligatures', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$noDiscretionaryLigatures = {value: 'no-discretionary-ligatures', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$discretionaryLigatures = {value: 'discretionary-ligatures', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$noCommonLigatures = {value: 'no-common-ligatures', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$commonLigatures = {value: 'common-ligatures', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantLigatures: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$titlingCaps = {value: 'titling-caps', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$unicase = {value: 'unicase', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$allPetiteCaps = {value: 'all-petite-caps', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$petiteCaps = {value: 'petite-caps', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$allSmallCaps = {value: 'all-small-caps', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$smallCaps = {value: 'small-caps', fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible, fontVariantCaps: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$bolder = {value: 'bolder', fontWeight: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lighter = {value: 'lighter', fontWeight: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$bold = {value: 'bold', fontWeight: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$oblique = {value: 'oblique', fontStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$italic = {value: 'italic', fontStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$normal = {
	value: 'normal',
	warnings: {ctor: '[]'},
	fontStyle: _rtfeldman$elm_css$Css_Structure$Compatible,
	fontWeight: _rtfeldman$elm_css$Css_Structure$Compatible,
	featureTagValue: _rtfeldman$elm_css$Css_Structure$Compatible,
	overflowWrap: _rtfeldman$elm_css$Css_Structure$Compatible,
	whiteSpace: _rtfeldman$elm_css$Css_Structure$Compatible
};
var _rtfeldman$elm_css$Css$larger = {value: 'larger', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$smaller = {value: 'smaller', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$xxLarge = {value: 'xx-large', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$xLarge = {value: 'x-large', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$large = {value: 'large', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$medium = {value: 'medium', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$small = {value: 'small', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$xSmall = {value: 'x-small', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$xxSmall = {value: 'xx-small', fontSize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fantasy = {value: 'fantasy', fontFamily: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$cursive = {value: 'cursive', fontFamily: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$monospace = {value: 'monospace', fontFamily: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$sansSerif = {value: 'sans-serif', fontFamily: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$serif = {value: 'serif', fontFamily: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$absolute = {value: 'absolute', position: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$relative = {value: 'relative', position: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$sticky = {value: 'sticky', position: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fixed = {value: 'fixed', position: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundAttachment: _rtfeldman$elm_css$Css_Structure$Compatible, tableLayout: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$static = {value: 'static', position: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fillAvailable = {value: 'fill-available', minMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fitContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'fit-content'});
var _rtfeldman$elm_css$Css$minContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'min-content'});
var _rtfeldman$elm_css$Css$maxContent = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$fillAvailable,
	{value: 'max-content'});
var _rtfeldman$elm_css$Css$displayFlex = A2(_rtfeldman$elm_css$Css$property, 'display', 'flex');
var _rtfeldman$elm_css$Css$textEmphasisColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'text-emphasis-color', c.value);
};
var _rtfeldman$elm_css$Css$textDecorationColor = function (c) {
	return A3(_rtfeldman$elm_css$Css$propertyWithWarnings, c.warnings, 'text-decoration-color', c.value);
};
var _rtfeldman$elm_css$Css$prop6 = F7(
	function (key, argA, argB, argC, argD, argE, argF) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {
									ctor: '::',
									_0: argE.value,
									_1: {
										ctor: '::',
										_0: argF.value,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$boxShadow6 = _rtfeldman$elm_css$Css$prop6('box-shadow');
var _rtfeldman$elm_css$Css$prop5 = F6(
	function (key, argA, argB, argC, argD, argE) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {
									ctor: '::',
									_0: argE.value,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$boxShadow5 = _rtfeldman$elm_css$Css$prop5('box-shadow');
var _rtfeldman$elm_css$Css$prop4 = F5(
	function (key, argA, argB, argC, argD) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {
								ctor: '::',
								_0: argD.value,
								_1: {ctor: '[]'}
							}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow4 = _rtfeldman$elm_css$Css$prop4('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow4 = _rtfeldman$elm_css$Css$prop4('box-shadow');
var _rtfeldman$elm_css$Css$padding4 = _rtfeldman$elm_css$Css$prop4('padding');
var _rtfeldman$elm_css$Css$margin4 = _rtfeldman$elm_css$Css$prop4('margin');
var _rtfeldman$elm_css$Css$borderImageOutset4 = _rtfeldman$elm_css$Css$prop4('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth4 = _rtfeldman$elm_css$Css$prop4('border-image-width');
var _rtfeldman$elm_css$Css$borderWidth4 = _rtfeldman$elm_css$Css$prop4('border-width');
var _rtfeldman$elm_css$Css$borderRadius4 = _rtfeldman$elm_css$Css$prop4('border-radius');
var _rtfeldman$elm_css$Css$prop3 = F4(
	function (key, argA, argB, argC) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {
							ctor: '::',
							_0: argC.value,
							_1: {ctor: '[]'}
						}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow3 = _rtfeldman$elm_css$Css$prop3('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow3 = _rtfeldman$elm_css$Css$prop3('box-shadow');
var _rtfeldman$elm_css$Css$textIndent3 = _rtfeldman$elm_css$Css$prop3('text-indent');
var _rtfeldman$elm_css$Css$padding3 = _rtfeldman$elm_css$Css$prop3('padding');
var _rtfeldman$elm_css$Css$margin3 = _rtfeldman$elm_css$Css$prop3('margin');
var _rtfeldman$elm_css$Css$border3 = _rtfeldman$elm_css$Css$prop3('border');
var _rtfeldman$elm_css$Css$borderTop3 = _rtfeldman$elm_css$Css$prop3('border-top');
var _rtfeldman$elm_css$Css$borderBottom3 = _rtfeldman$elm_css$Css$prop3('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft3 = _rtfeldman$elm_css$Css$prop3('border-left');
var _rtfeldman$elm_css$Css$borderRight3 = _rtfeldman$elm_css$Css$prop3('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart3 = _rtfeldman$elm_css$Css$prop3('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd3 = _rtfeldman$elm_css$Css$prop3('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart3 = _rtfeldman$elm_css$Css$prop3('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd3 = _rtfeldman$elm_css$Css$prop3('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset3 = _rtfeldman$elm_css$Css$prop3('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth3 = _rtfeldman$elm_css$Css$prop3('border-image-width');
var _rtfeldman$elm_css$Css$borderWidth3 = _rtfeldman$elm_css$Css$prop3('border-width');
var _rtfeldman$elm_css$Css$borderRadius3 = _rtfeldman$elm_css$Css$prop3('border-radius');
var _rtfeldman$elm_css$Css$outline3 = _rtfeldman$elm_css$Css$prop3('outline');
var _rtfeldman$elm_css$Css$fontVariant3 = _rtfeldman$elm_css$Css$prop3('font-variant');
var _rtfeldman$elm_css$Css$fontVariantNumeric3 = _rtfeldman$elm_css$Css$prop3('font-variant-numeric');
var _rtfeldman$elm_css$Css$textDecoration3 = _rtfeldman$elm_css$Css$prop3('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations3 = function (_p6) {
	return A2(
		_rtfeldman$elm_css$Css$prop3,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p6));
};
var _rtfeldman$elm_css$Css$prop2 = F3(
	function (key, argA, argB) {
		return A2(
			_rtfeldman$elm_css$Css$property,
			key,
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: argA.value,
					_1: {
						ctor: '::',
						_0: argB.value,
						_1: {ctor: '[]'}
					}
				}));
	});
var _rtfeldman$elm_css$Css$textShadow2 = _rtfeldman$elm_css$Css$prop2('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow2 = _rtfeldman$elm_css$Css$prop2('box-shadow');
var _rtfeldman$elm_css$Css$textIndent2 = _rtfeldman$elm_css$Css$prop2('text-indent');
var _rtfeldman$elm_css$Css$padding2 = _rtfeldman$elm_css$Css$prop2('padding');
var _rtfeldman$elm_css$Css$margin2 = _rtfeldman$elm_css$Css$prop2('margin');
var _rtfeldman$elm_css$Css$border2 = _rtfeldman$elm_css$Css$prop2('border');
var _rtfeldman$elm_css$Css$borderTop2 = _rtfeldman$elm_css$Css$prop2('border-top');
var _rtfeldman$elm_css$Css$borderBottom2 = _rtfeldman$elm_css$Css$prop2('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft2 = _rtfeldman$elm_css$Css$prop2('border-left');
var _rtfeldman$elm_css$Css$borderRight2 = _rtfeldman$elm_css$Css$prop2('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart2 = _rtfeldman$elm_css$Css$prop2('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd2 = _rtfeldman$elm_css$Css$prop2('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart2 = _rtfeldman$elm_css$Css$prop2('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd2 = _rtfeldman$elm_css$Css$prop2('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset2 = _rtfeldman$elm_css$Css$prop2('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth2 = _rtfeldman$elm_css$Css$prop2('border-image-width');
var _rtfeldman$elm_css$Css$borderWidth2 = _rtfeldman$elm_css$Css$prop2('border-width');
var _rtfeldman$elm_css$Css$borderTopWidth2 = _rtfeldman$elm_css$Css$prop2('border-top-width');
var _rtfeldman$elm_css$Css$borderBottomLeftRadius2 = _rtfeldman$elm_css$Css$prop2('border-bottom-left-radius');
var _rtfeldman$elm_css$Css$borderBottomRightRadius2 = _rtfeldman$elm_css$Css$prop2('border-bottom-right-radius');
var _rtfeldman$elm_css$Css$borderTopLeftRadius2 = _rtfeldman$elm_css$Css$prop2('border-top-left-radius');
var _rtfeldman$elm_css$Css$borderTopRightRadius2 = _rtfeldman$elm_css$Css$prop2('border-top-right-radius');
var _rtfeldman$elm_css$Css$borderRadius2 = _rtfeldman$elm_css$Css$prop2('border-radius');
var _rtfeldman$elm_css$Css$borderSpacing2 = _rtfeldman$elm_css$Css$prop2('border-spacing');
var _rtfeldman$elm_css$Css$backgroundRepeat2 = _rtfeldman$elm_css$Css$prop2('background-repeat');
var _rtfeldman$elm_css$Css$backgroundPosition2 = _rtfeldman$elm_css$Css$prop2('background-position');
var _rtfeldman$elm_css$Css$backgroundSize2 = _rtfeldman$elm_css$Css$prop2('background-size');
var _rtfeldman$elm_css$Css$fontVariant2 = _rtfeldman$elm_css$Css$prop2('font-variant');
var _rtfeldman$elm_css$Css$fontVariantNumeric2 = _rtfeldman$elm_css$Css$prop2('font-variant-numeric');
var _rtfeldman$elm_css$Css$textDecoration2 = _rtfeldman$elm_css$Css$prop2('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations2 = function (_p7) {
	return A2(
		_rtfeldman$elm_css$Css$prop2,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p7));
};
var _rtfeldman$elm_css$Css$prop1 = F2(
	function (key, arg) {
		return A2(_rtfeldman$elm_css$Css$property, key, arg.value);
	});
var _rtfeldman$elm_css$Css$textRendering = _rtfeldman$elm_css$Css$prop1('text-rendering');
var _rtfeldman$elm_css$Css$textOrientation = _rtfeldman$elm_css$Css$prop1('text-orientation');
var _rtfeldman$elm_css$Css$textOverflow = _rtfeldman$elm_css$Css$prop1('text-overflow');
var _rtfeldman$elm_css$Css$textShadow = _rtfeldman$elm_css$Css$prop1('text-shadow');
var _rtfeldman$elm_css$Css$boxShadow = _rtfeldman$elm_css$Css$prop1('box-shadow');
var _rtfeldman$elm_css$Css$textIndent = _rtfeldman$elm_css$Css$prop1('text-indent');
var _rtfeldman$elm_css$Css$textTransform = _rtfeldman$elm_css$Css$prop1('text-transform');
var _rtfeldman$elm_css$Css$display = _rtfeldman$elm_css$Css$prop1('display');
var _rtfeldman$elm_css$Css$opacity = _rtfeldman$elm_css$Css$prop1('opacity');
var _rtfeldman$elm_css$Css$width = _rtfeldman$elm_css$Css$prop1('width');
var _rtfeldman$elm_css$Css$maxWidth = _rtfeldman$elm_css$Css$prop1('max-width');
var _rtfeldman$elm_css$Css$minWidth = _rtfeldman$elm_css$Css$prop1('min-width');
var _rtfeldman$elm_css$Css$height = _rtfeldman$elm_css$Css$prop1('height');
var _rtfeldman$elm_css$Css$minHeight = _rtfeldman$elm_css$Css$prop1('min-height');
var _rtfeldman$elm_css$Css$maxHeight = _rtfeldman$elm_css$Css$prop1('max-height');
var _rtfeldman$elm_css$Css$padding = _rtfeldman$elm_css$Css$prop1('padding');
var _rtfeldman$elm_css$Css$paddingBlockStart = _rtfeldman$elm_css$Css$prop1('padding-block-start');
var _rtfeldman$elm_css$Css$paddingBlockEnd = _rtfeldman$elm_css$Css$prop1('padding-block-end');
var _rtfeldman$elm_css$Css$paddingInlineStart = _rtfeldman$elm_css$Css$prop1('padding-inline-start');
var _rtfeldman$elm_css$Css$paddingInlineEnd = _rtfeldman$elm_css$Css$prop1('padding-inline-end');
var _rtfeldman$elm_css$Css$paddingTop = _rtfeldman$elm_css$Css$prop1('padding-top');
var _rtfeldman$elm_css$Css$paddingBottom = _rtfeldman$elm_css$Css$prop1('padding-bottom');
var _rtfeldman$elm_css$Css$paddingRight = _rtfeldman$elm_css$Css$prop1('padding-right');
var _rtfeldman$elm_css$Css$paddingLeft = _rtfeldman$elm_css$Css$prop1('padding-left');
var _rtfeldman$elm_css$Css$margin = _rtfeldman$elm_css$Css$prop1('margin');
var _rtfeldman$elm_css$Css$marginTop = _rtfeldman$elm_css$Css$prop1('margin-top');
var _rtfeldman$elm_css$Css$marginBottom = _rtfeldman$elm_css$Css$prop1('margin-bottom');
var _rtfeldman$elm_css$Css$marginRight = _rtfeldman$elm_css$Css$prop1('margin-right');
var _rtfeldman$elm_css$Css$marginLeft = _rtfeldman$elm_css$Css$prop1('margin-left');
var _rtfeldman$elm_css$Css$marginBlockStart = _rtfeldman$elm_css$Css$prop1('margin-block-start');
var _rtfeldman$elm_css$Css$marginBlockEnd = _rtfeldman$elm_css$Css$prop1('margin-block-end');
var _rtfeldman$elm_css$Css$marginInlineStart = _rtfeldman$elm_css$Css$prop1('margin-inline-start');
var _rtfeldman$elm_css$Css$marginInlineEnd = _rtfeldman$elm_css$Css$prop1('margin-inline-end');
var _rtfeldman$elm_css$Css$top = _rtfeldman$elm_css$Css$prop1('top');
var _rtfeldman$elm_css$Css$bottom = _rtfeldman$elm_css$Css$prop1('bottom');
var _rtfeldman$elm_css$Css$left = _rtfeldman$elm_css$Css$prop1('left');
var _rtfeldman$elm_css$Css$right = _rtfeldman$elm_css$Css$prop1('right');
var _rtfeldman$elm_css$Css$border = _rtfeldman$elm_css$Css$prop1('border');
var _rtfeldman$elm_css$Css$borderTop = _rtfeldman$elm_css$Css$prop1('border-top');
var _rtfeldman$elm_css$Css$borderBottom = _rtfeldman$elm_css$Css$prop1('border-bottom');
var _rtfeldman$elm_css$Css$borderLeft = _rtfeldman$elm_css$Css$prop1('border-left');
var _rtfeldman$elm_css$Css$borderRight = _rtfeldman$elm_css$Css$prop1('border-right');
var _rtfeldman$elm_css$Css$borderBlockStart = _rtfeldman$elm_css$Css$prop1('border-block-start');
var _rtfeldman$elm_css$Css$borderBlockEnd = _rtfeldman$elm_css$Css$prop1('border-block-end');
var _rtfeldman$elm_css$Css$borderInlineStart = _rtfeldman$elm_css$Css$prop1('border-block-start');
var _rtfeldman$elm_css$Css$borderInlineEnd = _rtfeldman$elm_css$Css$prop1('border-block-end');
var _rtfeldman$elm_css$Css$borderImageOutset = _rtfeldman$elm_css$Css$prop1('border-image-outset');
var _rtfeldman$elm_css$Css$borderImageWidth = _rtfeldman$elm_css$Css$prop1('border-image-width');
var _rtfeldman$elm_css$Css$borderBlockEndStyle = _rtfeldman$elm_css$Css$prop1('border-block-end-style');
var _rtfeldman$elm_css$Css$borderBlockStartStyle = _rtfeldman$elm_css$Css$prop1('border-block-start-style');
var _rtfeldman$elm_css$Css$borderInlineEndStyle = _rtfeldman$elm_css$Css$prop1('border-inline-end-style');
var _rtfeldman$elm_css$Css$borderBottomStyle = _rtfeldman$elm_css$Css$prop1('border-bottom-style');
var _rtfeldman$elm_css$Css$borderInlineStartStyle = _rtfeldman$elm_css$Css$prop1('border-inline-start-style');
var _rtfeldman$elm_css$Css$borderLeftStyle = _rtfeldman$elm_css$Css$prop1('border-left-style');
var _rtfeldman$elm_css$Css$borderRightStyle = _rtfeldman$elm_css$Css$prop1('border-right-style');
var _rtfeldman$elm_css$Css$borderTopStyle = _rtfeldman$elm_css$Css$prop1('border-top-style');
var _rtfeldman$elm_css$Css$borderStyle = _rtfeldman$elm_css$Css$prop1('border-style');
var _rtfeldman$elm_css$Css$borderCollapse = _rtfeldman$elm_css$Css$prop1('border-collapse');
var _rtfeldman$elm_css$Css$borderWidth = _rtfeldman$elm_css$Css$prop1('border-width');
var _rtfeldman$elm_css$Css$borderBottomWidth = _rtfeldman$elm_css$Css$prop1('border-bottom-width');
var _rtfeldman$elm_css$Css$borderInlineEndWidth = _rtfeldman$elm_css$Css$prop1('border-inline-end-width');
var _rtfeldman$elm_css$Css$borderLeftWidth = _rtfeldman$elm_css$Css$prop1('border-left-width');
var _rtfeldman$elm_css$Css$borderRightWidth = _rtfeldman$elm_css$Css$prop1('border-right-width');
var _rtfeldman$elm_css$Css$borderTopWidth = _rtfeldman$elm_css$Css$prop1('border-top-width');
var _rtfeldman$elm_css$Css$borderBottomLeftRadius = _rtfeldman$elm_css$Css$prop1('border-bottom-left-radius');
var _rtfeldman$elm_css$Css$borderBottomRightRadius = _rtfeldman$elm_css$Css$prop1('border-bottom-right-radius');
var _rtfeldman$elm_css$Css$borderTopLeftRadius = _rtfeldman$elm_css$Css$prop1('border-top-left-radius');
var _rtfeldman$elm_css$Css$borderTopRightRadius = _rtfeldman$elm_css$Css$prop1('border-top-right-radius');
var _rtfeldman$elm_css$Css$borderRadius = _rtfeldman$elm_css$Css$prop1('border-radius');
var _rtfeldman$elm_css$Css$borderSpacing = _rtfeldman$elm_css$Css$prop1('border-spacing');
var _rtfeldman$elm_css$Css$outline = _rtfeldman$elm_css$Css$prop1('outline');
var _rtfeldman$elm_css$Css$outlineWidth = _rtfeldman$elm_css$Css$prop1('outline-width');
var _rtfeldman$elm_css$Css$outlineStyle = _rtfeldman$elm_css$Css$prop1('outline-style');
var _rtfeldman$elm_css$Css$outlineOffset = _rtfeldman$elm_css$Css$prop1('outline-offset');
var _rtfeldman$elm_css$Css$resize = _rtfeldman$elm_css$Css$prop1('resize');
var _rtfeldman$elm_css$Css$fill = _rtfeldman$elm_css$Css$prop1('fill');
var _rtfeldman$elm_css$Css$visibility = _rtfeldman$elm_css$Css$prop1('visibility');
var _rtfeldman$elm_css$Css$overflow = _rtfeldman$elm_css$Css$prop1('overflow');
var _rtfeldman$elm_css$Css$overflowX = _rtfeldman$elm_css$Css$prop1('overflow-x');
var _rtfeldman$elm_css$Css$overflowY = _rtfeldman$elm_css$Css$prop1('overflow-y');
var _rtfeldman$elm_css$Css$overflowWrap = _rtfeldman$elm_css$Css$prop1('overflow-wrap');
var _rtfeldman$elm_css$Css$whiteSpace = _rtfeldman$elm_css$Css$prop1('white-space');
var _rtfeldman$elm_css$Css$backgroundRepeat = _rtfeldman$elm_css$Css$prop1('background-repeat');
var _rtfeldman$elm_css$Css$backgroundAttachment = _rtfeldman$elm_css$Css$prop1('background-attachment');
var _rtfeldman$elm_css$Css$backgroundClip = _rtfeldman$elm_css$Css$prop1('background-clip');
var _rtfeldman$elm_css$Css$backgroundOrigin = _rtfeldman$elm_css$Css$prop1('background-origin');
var _rtfeldman$elm_css$Css$backgroundImage = _rtfeldman$elm_css$Css$prop1('background-image');
var _rtfeldman$elm_css$Css$backgroundSize = _rtfeldman$elm_css$Css$prop1('background-size');
var _rtfeldman$elm_css$Css$lineHeight = _rtfeldman$elm_css$Css$prop1('line-height');
var _rtfeldman$elm_css$Css$letterSpacing = _rtfeldman$elm_css$Css$prop1('letter-spacing');
var _rtfeldman$elm_css$Css$fontFamily = _rtfeldman$elm_css$Css$prop1('font-family');
var _rtfeldman$elm_css$Css$fontFamilies = function (_p8) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'font-family',
		_rtfeldman$elm_css$Css$stringsToValue(_p8));
};
var _rtfeldman$elm_css$Css$fontSize = _rtfeldman$elm_css$Css$prop1('font-size');
var _rtfeldman$elm_css$Css$fontStyle = _rtfeldman$elm_css$Css$prop1('font-style');
var _rtfeldman$elm_css$Css$fontVariant = _rtfeldman$elm_css$Css$prop1('font-variant');
var _rtfeldman$elm_css$Css$fontVariantLigatures = _rtfeldman$elm_css$Css$prop1('font-variant-ligatures');
var _rtfeldman$elm_css$Css$fontVariantCaps = _rtfeldman$elm_css$Css$prop1('font-variant-caps');
var _rtfeldman$elm_css$Css$fontVariantNumeric = _rtfeldman$elm_css$Css$prop1('font-variant-numeric');
var _rtfeldman$elm_css$Css$fontVariantNumerics = function (_p9) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'font-variant-numeric',
		_rtfeldman$elm_css$Css$valuesOrNone(_p9));
};
var _rtfeldman$elm_css$Css$cursor = _rtfeldman$elm_css$Css$prop1('cursor');
var _rtfeldman$elm_css$Css$textDecoration = _rtfeldman$elm_css$Css$prop1('text-decoration');
var _rtfeldman$elm_css$Css$textDecorations = function (_p10) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'text-decoration',
		_rtfeldman$elm_css$Css$valuesOrNone(_p10));
};
var _rtfeldman$elm_css$Css$textDecorationLine = _rtfeldman$elm_css$Css$prop1('text-decoration-line');
var _rtfeldman$elm_css$Css$textDecorationLines = function (_p11) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'text-decoration-line',
		_rtfeldman$elm_css$Css$valuesOrNone(_p11));
};
var _rtfeldman$elm_css$Css$textDecorationStyle = _rtfeldman$elm_css$Css$prop1('text-decoration-style');
var _rtfeldman$elm_css$Css$zIndex = _rtfeldman$elm_css$Css$prop1('z-index');
var _rtfeldman$elm_css$Css$touchAction = _rtfeldman$elm_css$Css$prop1('touch-action');
var _rtfeldman$elm_css$Css$tableLayout = _rtfeldman$elm_css$Css$prop1('table-layout');
var _rtfeldman$elm_css$Css$pointerEvents = _rtfeldman$elm_css$Css$prop1('pointer-events');
var _rtfeldman$elm_css$Css$position = _rtfeldman$elm_css$Css$prop1('position');
var _rtfeldman$elm_css$Css$textBottom = _rtfeldman$elm_css$Css$prop1('text-bottom');
var _rtfeldman$elm_css$Css$textTop = _rtfeldman$elm_css$Css$prop1('text-top');
var _rtfeldman$elm_css$Css$super = _rtfeldman$elm_css$Css$prop1('super');
var _rtfeldman$elm_css$Css$sub = _rtfeldman$elm_css$Css$prop1('sub');
var _rtfeldman$elm_css$Css$baseline = _rtfeldman$elm_css$Css$prop1('baseline');
var _rtfeldman$elm_css$Css$middle = _rtfeldman$elm_css$Css$prop1('middle');
var _rtfeldman$elm_css$Css$noWrap = {value: 'nowrap', whiteSpace: _rtfeldman$elm_css$Css_Structure$Compatible, flexWrap: _rtfeldman$elm_css$Css_Structure$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$auto = {value: 'auto', cursor: _rtfeldman$elm_css$Css_Structure$Compatible, flexBasis: _rtfeldman$elm_css$Css_Structure$Compatible, overflow: _rtfeldman$elm_css$Css_Structure$Compatible, textRendering: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible, alignItemsOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible, justifyContentOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible, intOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible, pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible, touchAction: _rtfeldman$elm_css$Css_Structure$Compatible, tableLayout: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$none = {value: 'none', cursor: _rtfeldman$elm_css$Css_Structure$Compatible, none: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNone: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible, textDecorationLine: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible, display: _rtfeldman$elm_css$Css_Structure$Compatible, outline: _rtfeldman$elm_css$Css_Structure$Compatible, pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible, resize: _rtfeldman$elm_css$Css_Structure$Compatible, transform: _rtfeldman$elm_css$Css_Structure$Compatible, borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundImage: _rtfeldman$elm_css$Css_Structure$Compatible, textTransform: _rtfeldman$elm_css$Css_Structure$Compatible, touchAction: _rtfeldman$elm_css$Css_Structure$Compatible, updateFrequency: _rtfeldman$elm_css$Css_Structure$Compatible, blockAxisOverflow: _rtfeldman$elm_css$Css_Structure$Compatible, inlineAxisOverflow: _rtfeldman$elm_css$Css_Structure$Compatible, pointerDevice: _rtfeldman$elm_css$Css_Structure$Compatible, hoverCapability: _rtfeldman$elm_css$Css_Structure$Compatible, scriptingSupport: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inlineListItem = {value: 'inline-list-item', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$listItem = {value: 'list-item', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableFooterGroup = {value: 'table-footer-group', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableHeaderGroup = {value: 'table-header-group', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableColumnGroup = {value: 'table-column-group', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableRowGroup = {value: 'table-row-group', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableCaption = {value: 'table-caption', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableColumn = {value: 'table-column', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableCell = {value: 'table-cell', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$tableRow = {value: 'table-row', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inlineTable = {value: 'inline-table', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$table = {value: 'table', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inline = {value: 'inline', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inlineFlex = {value: 'inline-flex', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inlineBlock = {value: 'inline-block', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$block = {value: 'block', display: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toTopLeft = {value: 'to top left', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toLeft = {value: 'to left', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toBottomLeft = {value: 'to bottom left', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toBottom = {value: 'to bottom', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toBottomRight = {value: 'to bottom right', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toRight = {value: 'to right', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toTopRight = {value: 'to top right', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$toTop = {value: 'to top', angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$stop2 = F2(
	function (c, len) {
		return {
			ctor: '_Tuple2',
			_0: c,
			_1: _elm_lang$core$Maybe$Just(len)
		};
	});
var _rtfeldman$elm_css$Css$stop = function (c) {
	return {ctor: '_Tuple2', _0: c, _1: _elm_lang$core$Maybe$Nothing};
};
var _rtfeldman$elm_css$Css$collectStops = _elm_lang$core$List$map(
	function (_p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$core$String$append,
			_p13._0.value,
			A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(
					_elm_lang$core$Maybe$map,
					function (_p14) {
						return A2(
							_elm_lang$core$String$cons,
							_elm_lang$core$Native_Utils.chr(' '),
							function (_) {
								return _.value;
							}(_p14));
					},
					_p13._1)));
	});
var _rtfeldman$elm_css$Css$local = {value: 'local', backgroundAttachment: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$noRepeat = {value: 'no-repeat', backgroundRepeat: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$round = {value: 'round', backgroundRepeat: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$space = {value: 'space', backgroundRepeat: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$repeat = {value: 'repeat', backgroundRepeat: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$repeatY = {value: 'repeat-y', backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$repeatX = {value: 'repeat-x', backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lineThrough = {value: 'line-through', textDecorationLine: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$overline = {value: 'overline', textDecorationLine: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$underline = {value: 'underline', textDecorationLine: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$row = {value: 'row', flexDirection: _rtfeldman$elm_css$Css_Structure$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$rowReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'row-reverse'});
var _rtfeldman$elm_css$Css$column = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'column'});
var _rtfeldman$elm_css$Css$columnReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$row,
	{value: 'column-reverse'});
var _rtfeldman$elm_css$Css$stretch = _rtfeldman$elm_css$Css$prop1('stretch');
var _rtfeldman$elm_css$Css$spaceBetween = _rtfeldman$elm_css$Css$prop1('space-between');
var _rtfeldman$elm_css$Css$spaceAround = _rtfeldman$elm_css$Css$prop1('space-around');
var _rtfeldman$elm_css$Css$flexEnd = _rtfeldman$elm_css$Css$prop1('flex-end');
var _rtfeldman$elm_css$Css$flexStart = _rtfeldman$elm_css$Css$prop1('flex-start');
var _rtfeldman$elm_css$Css$wrap = {value: 'wrap', flexWrap: _rtfeldman$elm_css$Css_Structure$Compatible, flexDirectionOrWrap: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$wrapReverse = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$wrap,
	{value: 'wrap-reverse'});
var _rtfeldman$elm_css$Css$content = {value: 'content', flexBasis: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$order = _rtfeldman$elm_css$Css$prop1('order');
var _rtfeldman$elm_css$Css$flexFlow2 = _rtfeldman$elm_css$Css$prop2('flex-flow');
var _rtfeldman$elm_css$Css$flexFlow1 = _rtfeldman$elm_css$Css$prop1('flex-flow');
var _rtfeldman$elm_css$Css$flexDirection = _rtfeldman$elm_css$Css$prop1('flex-direction');
var _rtfeldman$elm_css$Css$flexWrap = _rtfeldman$elm_css$Css$prop1('flex-wrap');
var _rtfeldman$elm_css$Css$flexShrink = _rtfeldman$elm_css$Css$prop1('flex-shrink');
var _rtfeldman$elm_css$Css$flexGrow = _rtfeldman$elm_css$Css$prop1('flex-grow');
var _rtfeldman$elm_css$Css$flexBasis = _rtfeldman$elm_css$Css$prop1('flex-basis');
var _rtfeldman$elm_css$Css$flex3 = _rtfeldman$elm_css$Css$prop3('flex');
var _rtfeldman$elm_css$Css$flex2 = _rtfeldman$elm_css$Css$prop2('flex');
var _rtfeldman$elm_css$Css$flex = _rtfeldman$elm_css$Css$prop1('flex');
var _rtfeldman$elm_css$Css$listStyle3 = _rtfeldman$elm_css$Css$prop3('list-style');
var _rtfeldman$elm_css$Css$listStyle2 = _rtfeldman$elm_css$Css$prop2('list-style');
var _rtfeldman$elm_css$Css$listStyle = _rtfeldman$elm_css$Css$prop1('list-style');
var _rtfeldman$elm_css$Css$thai = {value: 'thai', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$telugu = {value: 'telugu', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$oriya = {value: 'oriya', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$myanmar = {value: 'myanmar', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$malayalam = {value: 'malayalam', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lao = {value: 'lao', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$khmer = {value: 'khmer', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$kannada = {value: 'kannada', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$gurmukhi = {value: 'gurmukhi', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$gujarati = {value: 'gujarati', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$georgian = {value: 'georgian', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$devanagari = {value: 'devanagari', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$cjkHeavenlyStem = {value: 'cjk-heavenly-stem', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$cjkEarthlyBranch = {value: 'cjk-earthly-branch', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$bengali = {value: 'bengali', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$armenian = {value: 'armenian', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$arabicIndic = {value: 'arabic-indic', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$upperLatin = {value: 'upper-latin', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lowerLatin = {value: 'lower-latin', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$upperAlpha = {value: 'upper-alpha', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lowerAlpha = {value: 'lower-alpha', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$upperGreek = {value: 'upper-greek', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lowerGreek = {value: 'lower-greek', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$upperRoman = {value: 'upper-roman', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lowerRoman = {value: 'lower-roman', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$decimalLeadingZero = {value: 'decimal-leading-zero', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$decimal = {value: 'decimal', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$square = {value: 'square', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$circle = {value: 'circle', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$disc = {value: 'disc', listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$listStyleType = _rtfeldman$elm_css$Css$prop1('list-style-type');
var _rtfeldman$elm_css$Css$outside = {value: 'outside', listStylePosition: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inside = {value: 'inside', listStylePosition: _rtfeldman$elm_css$Css_Structure$Compatible, listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$listStylePosition = _rtfeldman$elm_css$Css$prop1('list-style-position');
var _rtfeldman$elm_css$Css$transformStyle = _rtfeldman$elm_css$Css$prop1('transform-style');
var _rtfeldman$elm_css$Css$flat = {value: 'flat', transformStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$preserve3d = {value: 'preserve-3d', transformStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$boxSizing = _rtfeldman$elm_css$Css$prop1('box-sizing');
var _rtfeldman$elm_css$Css$transformBox = _rtfeldman$elm_css$Css$prop1('transform-box');
var _rtfeldman$elm_css$Css$viewBox = {value: 'view-box', transformBox: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$borderBox = {value: 'border-box', boxSizing: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundClip: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$contentBox = {value: 'content-box', boxSizing: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundClip: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fillBox = {value: 'fill-box', transformBox: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$transforms = function (_p15) {
	return A2(
		_rtfeldman$elm_css$Css$prop1,
		'transform',
		_rtfeldman$elm_css$Css$valuesOrNone(_p15));
};
var _rtfeldman$elm_css$Css$transform = function (only) {
	return _rtfeldman$elm_css$Css$transforms(
		{
			ctor: '::',
			_0: only,
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css$angleConverter = F2(
	function (suffix, num) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$numberToString(num),
				suffix),
			angle: _rtfeldman$elm_css$Css_Structure$Compatible,
			angleOrDirection: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$deg = _rtfeldman$elm_css$Css$angleConverter('deg');
var _rtfeldman$elm_css$Css$grad = _rtfeldman$elm_css$Css$angleConverter('grad');
var _rtfeldman$elm_css$Css$rad = _rtfeldman$elm_css$Css$angleConverter('rad');
var _rtfeldman$elm_css$Css$turn = _rtfeldman$elm_css$Css$angleConverter('turn');
var _rtfeldman$elm_css$Css$lengthConverter = F3(
	function (units, unitLabel, numericValue) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$elm_css$Css$numberToString(numericValue),
				unitLabel),
			numericValue: numericValue,
			units: units,
			unitLabel: unitLabel,
			length: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNone: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible,
			textIndent: _rtfeldman$elm_css$Css_Structure$Compatible,
			flexBasis: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible,
			fontSize: _rtfeldman$elm_css$Css_Structure$Compatible,
			absoluteLength: _rtfeldman$elm_css$Css_Structure$Compatible,
			lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible,
			calc: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$true = _rtfeldman$elm_css$Css$prop1('true');
var _rtfeldman$elm_css$Css$matchParent = _rtfeldman$elm_css$Css$prop1('match-parent');
var _rtfeldman$elm_css$Css$end = _rtfeldman$elm_css$Css$prop1('end');
var _rtfeldman$elm_css$Css$start = _rtfeldman$elm_css$Css$prop1('start');
var _rtfeldman$elm_css$Css$justifyAll = _rtfeldman$elm_css$Css$prop1('justify-all');
var _rtfeldman$elm_css$Css$justify = _rtfeldman$elm_css$Css$prop1('justify');
var _rtfeldman$elm_css$Css$center = _rtfeldman$elm_css$Css$prop1('center');
var _rtfeldman$elm_css$Css$collapse = {value: 'collapse', borderCollapse: _rtfeldman$elm_css$Css_Structure$Compatible, visibility: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$separate = {value: 'separate', borderCollapse: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$outset = {value: 'outset', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$inset = {value: 'inset', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$ridge = {value: 'ridge', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$groove = {value: 'groove', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$double = {value: 'double', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$solid = {value: 'solid', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$dashed = {value: 'dashed', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$dotted = {value: 'dotted', borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible, textDecorationStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$wavy = {value: 'wavy', textDecorationStyle: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$clip = {value: 'clip', textOverflow: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$ellipsis = {value: 'ellipsis', textOverflow: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$fullWidth = {value: 'full-width', textTransform: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$lowercase = {value: 'lowercase', textTransform: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$uppercase = {value: 'uppercase', textTransform: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$capitalize = {value: 'capitalize', textTransform: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$sideways = {value: 'sideways', textOrientation: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$upright = {value: 'upright', textOrientation: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$mixed = {value: 'mixed', textOrientation: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$eachLine = {value: 'each-line', textIndent: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$hanging = {value: 'hanging', textIndent: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$geometricPrecision = {value: 'geometricPrecision', textRendering: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$optimizeLegibility = {value: 'optimizeLegibility', textRendering: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$optimizeSpeed = {value: 'optimizeSpeed', textRendering: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$hslaToRgba = F6(
	function (value, warnings, hue, saturation, lightness, hslAlpha) {
		var _p16 = _elm_lang$core$Color$toRgb(
			A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, hslAlpha));
		var red = _p16.red;
		var green = _p16.green;
		var blue = _p16.blue;
		var alpha = _p16.alpha;
		return {value: value, color: _rtfeldman$elm_css$Css_Structure$Compatible, red: red, green: green, blue: blue, alpha: alpha, warnings: warnings};
	});
var _rtfeldman$elm_css$Css$withPrecedingHash = function (str) {
	return A2(_elm_lang$core$String$startsWith, '#', str) ? str : A2(
		_elm_lang$core$String$cons,
		_elm_lang$core$Native_Utils.chr('#'),
		str);
};
var _rtfeldman$elm_css$Css$erroneousHex = function (str) {
	return {
		value: _rtfeldman$elm_css$Css$withPrecedingHash(str),
		color: _rtfeldman$elm_css$Css_Structure$Compatible,
		red: 0,
		green: 0,
		blue: 0,
		alpha: 1,
		warnings: _elm_lang$core$List$singleton(
			A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: 'Hex color strings must contain exactly 3, 4, 6, or 8 hexadecimal digits, optionally preceded by \"#\".',
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(str),
						_1: {
							ctor: '::',
							_0: 'is an invalid hex color string.',
							_1: {
								ctor: '::',
								_0: 'Please see: https://drafts.csswg.org/css-color/#hex-notation',
								_1: {ctor: '[]'}
							}
						}
					}
				}))
	};
};
var _rtfeldman$elm_css$Css$validHex = F5(
	function (str, _p20, _p19, _p18, _p17) {
		var _p21 = _p20;
		var _p22 = _p19;
		var _p23 = _p18;
		var _p24 = _p17;
		var toResult = function (_p25) {
			return _rtfeldman$hex$Hex$fromString(
				_elm_lang$core$String$toLower(
					_elm_lang$core$String$fromList(_p25)));
		};
		var results = {
			ctor: '_Tuple4',
			_0: toResult(
				{
					ctor: '::',
					_0: _p21._0,
					_1: {
						ctor: '::',
						_0: _p21._1,
						_1: {ctor: '[]'}
					}
				}),
			_1: toResult(
				{
					ctor: '::',
					_0: _p22._0,
					_1: {
						ctor: '::',
						_0: _p22._1,
						_1: {ctor: '[]'}
					}
				}),
			_2: toResult(
				{
					ctor: '::',
					_0: _p23._0,
					_1: {
						ctor: '::',
						_0: _p23._1,
						_1: {ctor: '[]'}
					}
				}),
			_3: toResult(
				{
					ctor: '::',
					_0: _p24._0,
					_1: {
						ctor: '::',
						_0: _p24._1,
						_1: {ctor: '[]'}
					}
				})
		};
		var _p26 = results;
		if (((((_p26.ctor === '_Tuple4') && (_p26._0.ctor === 'Ok')) && (_p26._1.ctor === 'Ok')) && (_p26._2.ctor === 'Ok')) && (_p26._3.ctor === 'Ok')) {
			return {
				value: _rtfeldman$elm_css$Css$withPrecedingHash(str),
				color: _rtfeldman$elm_css$Css_Structure$Compatible,
				red: _p26._0._0,
				green: _p26._1._0,
				blue: _p26._2._0,
				alpha: _elm_lang$core$Basics$toFloat(_p26._3._0) / 255,
				warnings: {ctor: '[]'}
			};
		} else {
			return _rtfeldman$elm_css$Css$erroneousHex(str);
		}
	});
var _rtfeldman$elm_css$Css$hex = function (str) {
	var withoutHash = A2(_elm_lang$core$String$startsWith, '#', str) ? A2(_elm_lang$core$String$dropLeft, 1, str) : str;
	var _p27 = _elm_lang$core$String$toList(withoutHash);
	_v9_4:
	do {
		if (((_p27.ctor === '::') && (_p27._1.ctor === '::')) && (_p27._1._1.ctor === '::')) {
			if (_p27._1._1._1.ctor === '[]') {
				var _p30 = _p27._0;
				var _p29 = _p27._1._0;
				var _p28 = _p27._1._1._0;
				return A5(
					_rtfeldman$elm_css$Css$validHex,
					str,
					{ctor: '_Tuple2', _0: _p30, _1: _p30},
					{ctor: '_Tuple2', _0: _p29, _1: _p29},
					{ctor: '_Tuple2', _0: _p28, _1: _p28},
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.chr('f'),
						_1: _elm_lang$core$Native_Utils.chr('f')
					});
			} else {
				if (_p27._1._1._1._1.ctor === '[]') {
					var _p34 = _p27._0;
					var _p33 = _p27._1._0;
					var _p32 = _p27._1._1._0;
					var _p31 = _p27._1._1._1._0;
					return A5(
						_rtfeldman$elm_css$Css$validHex,
						str,
						{ctor: '_Tuple2', _0: _p34, _1: _p34},
						{ctor: '_Tuple2', _0: _p33, _1: _p33},
						{ctor: '_Tuple2', _0: _p32, _1: _p32},
						{ctor: '_Tuple2', _0: _p31, _1: _p31});
				} else {
					if (_p27._1._1._1._1._1.ctor === '::') {
						if (_p27._1._1._1._1._1._1.ctor === '[]') {
							return A5(
								_rtfeldman$elm_css$Css$validHex,
								str,
								{ctor: '_Tuple2', _0: _p27._0, _1: _p27._1._0},
								{ctor: '_Tuple2', _0: _p27._1._1._0, _1: _p27._1._1._1._0},
								{ctor: '_Tuple2', _0: _p27._1._1._1._1._0, _1: _p27._1._1._1._1._1._0},
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.chr('f'),
									_1: _elm_lang$core$Native_Utils.chr('f')
								});
						} else {
							if ((_p27._1._1._1._1._1._1._1.ctor === '::') && (_p27._1._1._1._1._1._1._1._1.ctor === '[]')) {
								return A5(
									_rtfeldman$elm_css$Css$validHex,
									str,
									{ctor: '_Tuple2', _0: _p27._0, _1: _p27._1._0},
									{ctor: '_Tuple2', _0: _p27._1._1._0, _1: _p27._1._1._1._0},
									{ctor: '_Tuple2', _0: _p27._1._1._1._1._0, _1: _p27._1._1._1._1._1._0},
									{ctor: '_Tuple2', _0: _p27._1._1._1._1._1._1._0, _1: _p27._1._1._1._1._1._1._1._0});
							} else {
								break _v9_4;
							}
						}
					} else {
						break _v9_4;
					}
				}
			}
		} else {
			break _v9_4;
		}
	} while(false);
	return _rtfeldman$elm_css$Css$erroneousHex(str);
};
var _rtfeldman$elm_css$Css$hidden = {value: 'hidden', overflow: _rtfeldman$elm_css$Css_Structure$Compatible, borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible, visibility: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$contain = {value: 'contain', lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$cover = {value: 'cover', lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$url = function (urlValue) {
	return {
		value: A2(
			_elm_lang$core$Basics_ops['++'],
			'url(',
			A2(_elm_lang$core$Basics_ops['++'], urlValue, ')')),
		backgroundImage: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$paddingBox = {value: 'padding-box', backgroundClip: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$luminosity = _rtfeldman$elm_css$Css$prop1('luminosity');
var _rtfeldman$elm_css$Css$saturation = _rtfeldman$elm_css$Css$prop1('saturation');
var _rtfeldman$elm_css$Css$hue = _rtfeldman$elm_css$Css$prop1('hue');
var _rtfeldman$elm_css$Css$exclusion = _rtfeldman$elm_css$Css$prop1('exclusion');
var _rtfeldman$elm_css$Css$difference = _rtfeldman$elm_css$Css$prop1('difference');
var _rtfeldman$elm_css$Css$softLight = _rtfeldman$elm_css$Css$prop1('soft-light');
var _rtfeldman$elm_css$Css$hardLight = _rtfeldman$elm_css$Css$prop1('hard-light');
var _rtfeldman$elm_css$Css$colorBurn = _rtfeldman$elm_css$Css$prop1('color-burn');
var _rtfeldman$elm_css$Css$colorDodge = _rtfeldman$elm_css$Css$prop1('color-dodge');
var _rtfeldman$elm_css$Css$lighten = _rtfeldman$elm_css$Css$prop1('lighten');
var _rtfeldman$elm_css$Css$darken = _rtfeldman$elm_css$Css$prop1('darken');
var _rtfeldman$elm_css$Css$overlay = _rtfeldman$elm_css$Css$prop1('overlay');
var _rtfeldman$elm_css$Css$screenBlendMode = _rtfeldman$elm_css$Css$prop1('screen');
var _rtfeldman$elm_css$Css$multiply = _rtfeldman$elm_css$Css$prop1('multiply');
var _rtfeldman$elm_css$Css$vertical = {value: 'vertical', resize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$horizontal = {value: 'horizontal', resize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$both = {value: 'both', resize: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$breakWord = {value: 'break-word', overflowWrap: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$scroll = {value: 'scroll', scroll: _rtfeldman$elm_css$Css_Structure$Compatible, overflow: _rtfeldman$elm_css$Css_Structure$Compatible, backgroundAttachment: _rtfeldman$elm_css$Css_Structure$Compatible, blockAxisOverflow: _rtfeldman$elm_css$Css_Structure$Compatible, inlineAxisOverflow: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$visible = {value: 'visible', overflow: _rtfeldman$elm_css$Css_Structure$Compatible, visibility: _rtfeldman$elm_css$Css_Structure$Compatible, pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$currentColor = {
	value: 'currentColor',
	color: _rtfeldman$elm_css$Css_Structure$Compatible,
	warnings: {ctor: '[]'}
};
var _rtfeldman$elm_css$Css$transparent = {
	value: 'transparent',
	color: _rtfeldman$elm_css$Css_Structure$Compatible,
	warnings: {ctor: '[]'}
};
var _rtfeldman$elm_css$Css$important = _rtfeldman$elm_css$Css_Preprocess$mapLastProperty(
	function (property) {
		return _elm_lang$core$Native_Utils.update(
			property,
			{important: true});
	});
var _rtfeldman$elm_css$Css$all = _rtfeldman$elm_css$Css$prop1('all');
var _rtfeldman$elm_css$Css$combineLengths = F3(
	function (operation, first, second) {
		var numericValue = A2(operation, first.numericValue, second.numericValue);
		var value = A2(
			_elm_lang$core$String$join,
			'',
			A2(
				_elm_lang$core$List$filter,
				function (_p35) {
					return !_elm_lang$core$String$isEmpty(_p35);
				},
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(numericValue),
					_1: {
						ctor: '::',
						_0: first.unitLabel,
						_1: {ctor: '[]'}
					}
				}));
		return _elm_lang$core$Native_Utils.update(
			first,
			{value: value, numericValue: numericValue});
	});
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|*|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x * y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|/|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x / y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|-|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x - y;
		}));
var _rtfeldman$elm_css$Css_ops = _rtfeldman$elm_css$Css_ops || {};
_rtfeldman$elm_css$Css_ops['|+|'] = _rtfeldman$elm_css$Css$combineLengths(
	F2(
		function (x, y) {
			return x + y;
		}));
var _rtfeldman$elm_css$Css$calcExpressionToString = function (expression) {
	var _p36 = expression;
	if (_p36.ctor === 'Addition') {
		return '+';
	} else {
		return '-';
	}
};
var _rtfeldman$elm_css$Css$colorValueForOverloadedProperty = _rtfeldman$elm_css$Css$transparent;
var _rtfeldman$elm_css$Css$getOverloadedProperty = F3(
	function (functionName, desiredKey, style) {
		getOverloadedProperty:
		while (true) {
			var _p37 = style;
			switch (_p37.ctor) {
				case 'AppendProperty':
					return A2(_rtfeldman$elm_css$Css$property, desiredKey, _p37._0.key);
				case 'ExtendSelector':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable Style for selector ',
										_elm_lang$core$Basics$toString(_p37._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'NestSnippet':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable Style for combinator ',
										_elm_lang$core$Basics$toString(_p37._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'WithPseudoElement':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable Style for pseudo-element setter ',
										_elm_lang$core$Basics$toString(_p37._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				case 'WithMedia':
					return A3(
						_rtfeldman$elm_css$Css$propertyWithWarnings,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot apply ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									functionName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										' with inapplicable Style for media query ',
										_elm_lang$core$Basics$toString(_p37._0)))),
							_1: {ctor: '[]'}
						},
						desiredKey,
						'');
				default:
					if (_p37._0.ctor === '[]') {
						return A3(
							_rtfeldman$elm_css$Css$propertyWithWarnings,
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'Cannot apply ',
									A2(_elm_lang$core$Basics_ops['++'], functionName, ' with empty Style. ')),
								_1: {ctor: '[]'}
							},
							desiredKey,
							'');
					} else {
						if (_p37._0._1.ctor === '[]') {
							var _v12 = functionName,
								_v13 = desiredKey,
								_v14 = _p37._0._0;
							functionName = _v12;
							desiredKey = _v13;
							style = _v14;
							continue getOverloadedProperty;
						} else {
							var _v15 = functionName,
								_v16 = desiredKey,
								_v17 = _rtfeldman$elm_css$Css_Preprocess$ApplyStyles(_p37._0._1);
							functionName = _v15;
							desiredKey = _v16;
							style = _v17;
							continue getOverloadedProperty;
						}
					}
			}
		}
	});
var _rtfeldman$elm_css$Css$backgroundBlendMode = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'backgroundBlendMode',
		'background-blend-mode',
		fn(_rtfeldman$elm_css$Css$colorValueForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$cssFunction = F2(
	function (funcName, args) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			funcName,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$String$join, ', ', args),
					')')));
	});
var _rtfeldman$elm_css$Css$calc = F3(
	function (first, expression, second) {
		var grab = function (l) {
			return A2(_elm_lang$core$String$startsWith, 'calc(', l.value) ? A2(_elm_lang$core$String$dropLeft, 4, l.value) : l.value;
		};
		var calcs = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: grab(first),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$calcExpressionToString(expression),
					_1: {
						ctor: '::',
						_0: grab(second),
						_1: {ctor: '[]'}
					}
				}
			});
		var value = A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'calc',
			{
				ctor: '::',
				_0: calcs,
				_1: {ctor: '[]'}
			});
		return {value: value, length: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNone: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, textIndent: _rtfeldman$elm_css$Css_Structure$Compatible, flexBasis: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible, fontSize: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible, calc: _rtfeldman$elm_css$Css_Structure$Compatible};
	});
var _rtfeldman$elm_css$Css$rgb = F3(
	function (red, green, blue) {
		var warnings = ((_elm_lang$core$Native_Utils.cmp(red, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(red, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(green, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(green, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(blue, 255) > 0)))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'RGB color values must be between 0 and 255. rgb(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(red),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(green),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(blue),
									') is not valid.')))))),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rgb',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: red,
						_1: {
							ctor: '::',
							_0: green,
							_1: {
								ctor: '::',
								_0: blue,
								_1: {ctor: '[]'}
							}
						}
					})),
			color: _rtfeldman$elm_css$Css_Structure$Compatible,
			warnings: warnings,
			red: red,
			green: green,
			blue: blue,
			alpha: 1
		};
	});
var _rtfeldman$elm_css$Css$rgba = F4(
	function (red, green, blue, alpha) {
		var warnings = ((_elm_lang$core$Native_Utils.cmp(red, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(red, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(green, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(green, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(blue, 255) > 0) || ((_elm_lang$core$Native_Utils.cmp(alpha, 0) < 0) || (_elm_lang$core$Native_Utils.cmp(alpha, 1) > 0)))))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'RGB color values must be between 0 and 255, and the alpha in RGBA must be between 0 and 1. rgba(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(red),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(green),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(blue),
									A2(
										_elm_lang$core$Basics_ops['++'],
										', ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(alpha),
											') is not valid.')))))))),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rgba',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css$numberToString,
						{
							ctor: '::',
							_0: red,
							_1: {
								ctor: '::',
								_0: green,
								_1: {
									ctor: '::',
									_0: blue,
									_1: {ctor: '[]'}
								}
							}
						}),
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$numberToString(alpha),
						_1: {ctor: '[]'}
					})),
			color: _rtfeldman$elm_css$Css_Structure$Compatible,
			warnings: warnings,
			red: red,
			green: green,
			blue: blue,
			alpha: alpha
		};
	});
var _rtfeldman$elm_css$Css$hsl = F3(
	function (hue, saturation, lightness) {
		var valuesList = {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$numberToString(hue),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numericalPercentageToString(saturation),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$numericalPercentageToString(lightness),
					_1: {ctor: '[]'}
				}
			}
		};
		var value = A2(_rtfeldman$elm_css$Css$cssFunction, 'hsl', valuesList);
		var warnings = ((_elm_lang$core$Native_Utils.cmp(hue, 360) > 0) || ((_elm_lang$core$Native_Utils.cmp(hue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 1) > 0) || (_elm_lang$core$Native_Utils.cmp(lightness, 0) < 0)))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'HSL color values must have an H value between 0 and 360 (as in degrees) and S and L values between 0 and 1. ',
				A2(_elm_lang$core$Basics_ops['++'], value, ' is not valid.')),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A6(_rtfeldman$elm_css$Css$hslaToRgba, value, warnings, hue, saturation, lightness, 1);
	});
var _rtfeldman$elm_css$Css$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		var valuesList = {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$numberToString(hue),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numericalPercentageToString(saturation),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$numericalPercentageToString(lightness),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$numberToString(alpha),
						_1: {ctor: '[]'}
					}
				}
			}
		};
		var value = A2(_rtfeldman$elm_css$Css$cssFunction, 'hsla', valuesList);
		var warnings = ((_elm_lang$core$Native_Utils.cmp(hue, 360) > 0) || ((_elm_lang$core$Native_Utils.cmp(hue, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(saturation, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 1) > 0) || ((_elm_lang$core$Native_Utils.cmp(lightness, 0) < 0) || ((_elm_lang$core$Native_Utils.cmp(alpha, 1) > 0) || (_elm_lang$core$Native_Utils.cmp(alpha, 0) < 0)))))))) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				'HSLA color values must have an H value between 0 and 360 (as in degrees) and S, L, and A values between 0 and 1. ',
				A2(_elm_lang$core$Basics_ops['++'], value, ' is not valid.')),
			_1: {ctor: '[]'}
		} : {ctor: '[]'};
		return A6(_rtfeldman$elm_css$Css$hslaToRgba, value, warnings, hue, saturation, lightness, alpha);
	});
var _rtfeldman$elm_css$Css$matrix = F6(
	function (a, b, c, d, tx, ty) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'matrix',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: a,
						_1: {
							ctor: '::',
							_0: b,
							_1: {
								ctor: '::',
								_0: c,
								_1: {
									ctor: '::',
									_0: d,
									_1: {
										ctor: '::',
										_0: tx,
										_1: {
											ctor: '::',
											_0: ty,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					})),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$matrix3d = function (a1) {
	return function (a2) {
		return function (a3) {
			return function (a4) {
				return function (b1) {
					return function (b2) {
						return function (b3) {
							return function (b4) {
								return function (c1) {
									return function (c2) {
										return function (c3) {
											return function (c4) {
												return function (d1) {
													return function (d2) {
														return function (d3) {
															return function (d4) {
																return {
																	value: A2(
																		_rtfeldman$elm_css$Css$cssFunction,
																		'matrix3d',
																		A2(
																			_elm_lang$core$List$map,
																			_rtfeldman$elm_css$Css$numberToString,
																			{
																				ctor: '::',
																				_0: a1,
																				_1: {
																					ctor: '::',
																					_0: a2,
																					_1: {
																						ctor: '::',
																						_0: a3,
																						_1: {
																							ctor: '::',
																							_0: a4,
																							_1: {
																								ctor: '::',
																								_0: b1,
																								_1: {
																									ctor: '::',
																									_0: b2,
																									_1: {
																										ctor: '::',
																										_0: b3,
																										_1: {
																											ctor: '::',
																											_0: b4,
																											_1: {
																												ctor: '::',
																												_0: c1,
																												_1: {
																													ctor: '::',
																													_0: c2,
																													_1: {
																														ctor: '::',
																														_0: c3,
																														_1: {
																															ctor: '::',
																															_0: c4,
																															_1: {
																																ctor: '::',
																																_0: d1,
																																_1: {
																																	ctor: '::',
																																	_0: d2,
																																	_1: {
																																		ctor: '::',
																																		_0: d3,
																																		_1: {
																																			ctor: '::',
																																			_0: d4,
																																			_1: {ctor: '[]'}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			})),
																	transform: _rtfeldman$elm_css$Css_Structure$Compatible
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$perspective = function (l) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'perspective',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(l),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotate = function (_p38) {
	var _p39 = _p38;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotate',
			{
				ctor: '::',
				_0: _p39.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateX = function (_p40) {
	var _p41 = _p40;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateX',
			{
				ctor: '::',
				_0: _p41.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateY = function (_p42) {
	var _p43 = _p42;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateY',
			{
				ctor: '::',
				_0: _p43.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotateZ = function (_p44) {
	var _p45 = _p44;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'rotateZ',
			{
				ctor: '::',
				_0: _p45.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$rotate3d = F4(
	function (x, y, z, _p46) {
		var _p47 = _p46;
		var coordsAsStrings = A2(
			_elm_lang$core$List$map,
			_rtfeldman$elm_css$Css$numberToString,
			{
				ctor: '::',
				_0: x,
				_1: {
					ctor: '::',
					_0: y,
					_1: {
						ctor: '::',
						_0: z,
						_1: {ctor: '[]'}
					}
				}
			});
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'rotate3d',
				A2(
					_elm_lang$core$Basics_ops['++'],
					coordsAsStrings,
					{
						ctor: '::',
						_0: _p47.value,
						_1: {ctor: '[]'}
					})),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$scale = function (x) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scale',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(x),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$scale2 = F2(
	function (x, y) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'scale',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {ctor: '[]'}
						}
					})),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$scaleX = function (x) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scaleX',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(x),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$scaleY = function (y) {
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'scaleY',
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$numberToString(y),
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$scale3d = F3(
	function (x, y, z) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'scale3d',
				A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css$numberToString,
					{
						ctor: '::',
						_0: x,
						_1: {
							ctor: '::',
							_0: y,
							_1: {
								ctor: '::',
								_0: z,
								_1: {ctor: '[]'}
							}
						}
					})),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$skew = function (_p48) {
	var _p49 = _p48;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skew',
			{
				ctor: '::',
				_0: _p49.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$skew2 = F2(
	function (ax, ay) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'skew',
				{
					ctor: '::',
					_0: ax.value,
					_1: {
						ctor: '::',
						_0: ay.value,
						_1: {ctor: '[]'}
					}
				}),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$skewX = function (_p50) {
	var _p51 = _p50;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skewX',
			{
				ctor: '::',
				_0: _p51.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$skewY = function (_p52) {
	var _p53 = _p52;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'skewY',
			{
				ctor: '::',
				_0: _p53.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate = function (_p54) {
	var _p55 = _p54;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translate',
			{
				ctor: '::',
				_0: _p55.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate2 = F2(
	function (tx, ty) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'translate',
				{
					ctor: '::',
					_0: tx.value,
					_1: {
						ctor: '::',
						_0: ty.value,
						_1: {ctor: '[]'}
					}
				}),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$translateX = function (_p56) {
	var _p57 = _p56;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateX',
			{
				ctor: '::',
				_0: _p57.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$translateY = function (_p58) {
	var _p59 = _p58;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateY',
			{
				ctor: '::',
				_0: _p59.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$translateZ = function (_p60) {
	var _p61 = _p60;
	return {
		value: A2(
			_rtfeldman$elm_css$Css$cssFunction,
			'translateZ',
			{
				ctor: '::',
				_0: _p61.value,
				_1: {ctor: '[]'}
			}),
		transform: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css$translate3d = F3(
	function (tx, ty, tz) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'translate3d',
				{
					ctor: '::',
					_0: tx.value,
					_1: {
						ctor: '::',
						_0: ty.value,
						_1: {
							ctor: '::',
							_0: tz.value,
							_1: {ctor: '[]'}
						}
					}
				}),
			transform: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$linearGradient = F3(
	function (stop1, stop2, stops) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'linear-gradient',
				_rtfeldman$elm_css$Css$collectStops(
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: stop1,
							_1: {
								ctor: '::',
								_0: stop2,
								_1: {ctor: '[]'}
							}
						},
						stops))),
			backgroundImage: _rtfeldman$elm_css$Css_Structure$Compatible,
			listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$linearGradient2 = F4(
	function (dir, stop1, stop2, stops) {
		return {
			value: A2(
				_rtfeldman$elm_css$Css$cssFunction,
				'linear-gradient',
				A2(
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					dir.value,
					_rtfeldman$elm_css$Css$collectStops(
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: stop1,
								_1: {
									ctor: '::',
									_0: stop2,
									_1: {ctor: '[]'}
								}
							},
							stops)))),
			backgroundImage: _rtfeldman$elm_css$Css_Structure$Compatible,
			listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css$CalculatedLength = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {value: a, length: b, lengthOrAuto: c, lengthOrNumber: d, lengthOrNone: e, lengthOrMinMaxDimension: f, lengthOrNoneOrMinMaxDimension: g, textIndent: h, flexBasis: i, lengthOrNumberOrAutoOrNoneOrContent: j, fontSize: k, lengthOrAutoOrCoverOrContain: l, calc: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$ExplicitLength = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return {value: a, numericValue: b, units: c, unitLabel: d, length: e, lengthOrAuto: f, lengthOrNumber: g, lengthOrNone: h, lengthOrMinMaxDimension: i, lengthOrNoneOrMinMaxDimension: j, textIndent: k, flexBasis: l, absoluteLength: m, lengthOrNumberOrAutoOrNoneOrContent: n, fontSize: o, lengthOrAutoOrCoverOrContain: p, calc: q};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$NonMixable = {};
var _rtfeldman$elm_css$Css$BasicProperty = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (_1) {
																											return function (_2) {
																												return function (_3) {
																													return function (_4) {
																														return function (_5) {
																															return function (_6) {
																																return function (_7) {
																																	return function (_8) {
																																		return function (_9) {
																																			return function (_10) {
																																				return function (_11) {
																																					return function (_12) {
																																						return function (_13) {
																																							return function (_14) {
																																								return function (_15) {
																																									return function (_16) {
																																										return function (_17) {
																																											return function (_18) {
																																												return function (_19) {
																																													return function (_20) {
																																														return function (_21) {
																																															return function (_22) {
																																																return function (_23) {
																																																	return function (_24) {
																																																		return function (_25) {
																																																			return function (_26) {
																																																				return function (_27) {
																																																					return function (_28) {
																																																						return {value: a, all: b, alignItems: c, borderStyle: d, boxSizing: e, color: f, cursor: g, display: h, flexBasis: i, flexWrap: j, flexDirection: k, flexDirectionOrWrap: l, justifyContent: m, none: n, number: o, outline: p, overflow: q, pointerEvents: r, visibility: s, textDecorationLine: t, textRendering: u, textIndent: v, textDecorationStyle: w, textTransform: x, length: y, lengthOrAuto: z, lengthOrNone: _1, lengthOrNumber: _2, lengthOrMinMaxDimension: _3, lengthOrNoneOrMinMaxDimension: _4, lengthOrNumberOrAutoOrNoneOrContent: _5, listStyleType: _6, listStylePosition: _7, listStyleTypeOrPositionOrImage: _8, fontFamily: _9, fontSize: _10, fontStyle: _11, fontWeight: _12, fontVariant: _13, units: _14, numericValue: _15, unitLabel: _16, warnings: _17, backgroundRepeat: _18, backgroundRepeatShorthand: _19, backgroundAttachment: _20, backgroundBlendMode: _21, backgroundOrigin: _22, backgroundImage: _23, lengthOrAutoOrCoverOrContain: _24, intOrAuto: _25, touchAction: _26, whiteSpace: _27, tableLayout: _28};
																																																					};
																																																				};
																																																			};
																																																		};
																																																	};
																																																};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _rtfeldman$elm_css$Css$Normal = F7(
	function (a, b, c, d, e, f, g) {
		return {value: a, warnings: b, fontStyle: c, fontWeight: d, featureTagValue: e, overflowWrap: f, whiteSpace: g};
	});
var _rtfeldman$elm_css$Css$Subtraction = {ctor: 'Subtraction'};
var _rtfeldman$elm_css$Css$minus = _rtfeldman$elm_css$Css$Subtraction;
var _rtfeldman$elm_css$Css$Addition = {ctor: 'Addition'};
var _rtfeldman$elm_css$Css$plus = _rtfeldman$elm_css$Css$Addition;
var _rtfeldman$elm_css$Css$PercentageUnits = {ctor: 'PercentageUnits'};
var _rtfeldman$elm_css$Css$pct = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PercentageUnits, '%');
var _rtfeldman$elm_css$Css$EmUnits = {ctor: 'EmUnits'};
var _rtfeldman$elm_css$Css$em = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$EmUnits, 'em');
var _rtfeldman$elm_css$Css$ExUnits = {ctor: 'ExUnits'};
var _rtfeldman$elm_css$Css$ex = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$ExUnits, 'ex');
var _rtfeldman$elm_css$Css$ChUnits = {ctor: 'ChUnits'};
var _rtfeldman$elm_css$Css$ch = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$ChUnits, 'ch');
var _rtfeldman$elm_css$Css$RemUnits = {ctor: 'RemUnits'};
var _rtfeldman$elm_css$Css$rem = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$RemUnits, 'rem');
var _rtfeldman$elm_css$Css$VhUnits = {ctor: 'VhUnits'};
var _rtfeldman$elm_css$Css$vh = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VhUnits, 'vh');
var _rtfeldman$elm_css$Css$VwUnits = {ctor: 'VwUnits'};
var _rtfeldman$elm_css$Css$vw = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VwUnits, 'vw');
var _rtfeldman$elm_css$Css$VMinUnits = {ctor: 'VMinUnits'};
var _rtfeldman$elm_css$Css$vmin = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VMinUnits, 'vmin');
var _rtfeldman$elm_css$Css$VMaxUnits = {ctor: 'VMaxUnits'};
var _rtfeldman$elm_css$Css$vmax = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$VMaxUnits, 'vmax');
var _rtfeldman$elm_css$Css$PxUnits = {ctor: 'PxUnits'};
var _rtfeldman$elm_css$Css$px = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PxUnits, 'px');
var _rtfeldman$elm_css$Css$MMUnits = {ctor: 'MMUnits'};
var _rtfeldman$elm_css$Css$mm = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$MMUnits, 'mm');
var _rtfeldman$elm_css$Css$CMUnits = {ctor: 'CMUnits'};
var _rtfeldman$elm_css$Css$cm = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$CMUnits, 'cm');
var _rtfeldman$elm_css$Css$InchUnits = {ctor: 'InchUnits'};
var _rtfeldman$elm_css$Css$inches = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$InchUnits, 'in');
var _rtfeldman$elm_css$Css$PtUnits = {ctor: 'PtUnits'};
var _rtfeldman$elm_css$Css$pt = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PtUnits, 'pt');
var _rtfeldman$elm_css$Css$PcUnits = {ctor: 'PcUnits'};
var _rtfeldman$elm_css$Css$pc = A2(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$PcUnits, 'pc');
var _rtfeldman$elm_css$Css$UnitlessInteger = {ctor: 'UnitlessInteger'};
var _rtfeldman$elm_css$Css$zero = {value: '0', length: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNone: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible, number: _rtfeldman$elm_css$Css_Structure$Compatible, outline: _rtfeldman$elm_css$Css_Structure$Compatible, units: _rtfeldman$elm_css$Css$UnitlessInteger, unitLabel: '', numericValue: 0, lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css$int = function (val) {
	return {
		value: _rtfeldman$elm_css$Css$numberToString(val),
		lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible,
		number: _rtfeldman$elm_css$Css_Structure$Compatible,
		fontWeight: _rtfeldman$elm_css$Css_Structure$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible,
		intOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible,
		numericValue: _elm_lang$core$Basics$toFloat(val),
		unitLabel: '',
		units: _rtfeldman$elm_css$Css$UnitlessInteger
	};
};
var _rtfeldman$elm_css$Css$UnitlessFloat = {ctor: 'UnitlessFloat'};
var _rtfeldman$elm_css$Css$num = function (val) {
	return {
		value: _rtfeldman$elm_css$Css$numberToString(val),
		lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible,
		number: _rtfeldman$elm_css$Css_Structure$Compatible,
		lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible,
		numericValue: val,
		unitLabel: '',
		units: _rtfeldman$elm_css$Css$UnitlessFloat
	};
};
var _rtfeldman$elm_css$Css$IncompatibleUnits = {ctor: 'IncompatibleUnits'};
var _rtfeldman$elm_css$Css$initial = {
	value: 'initial',
	overflow: _rtfeldman$elm_css$Css_Structure$Compatible,
	visibility: _rtfeldman$elm_css$Css_Structure$Compatible,
	none: _rtfeldman$elm_css$Css_Structure$Compatible,
	number: _rtfeldman$elm_css$Css_Structure$Compatible,
	textDecorationLine: _rtfeldman$elm_css$Css_Structure$Compatible,
	textRendering: _rtfeldman$elm_css$Css_Structure$Compatible,
	textIndent: _rtfeldman$elm_css$Css_Structure$Compatible,
	textDecorationStyle: _rtfeldman$elm_css$Css_Structure$Compatible,
	textTransform: _rtfeldman$elm_css$Css_Structure$Compatible,
	borderStyle: _rtfeldman$elm_css$Css_Structure$Compatible,
	boxSizing: _rtfeldman$elm_css$Css_Structure$Compatible,
	color: _rtfeldman$elm_css$Css_Structure$Compatible,
	cursor: _rtfeldman$elm_css$Css_Structure$Compatible,
	display: _rtfeldman$elm_css$Css_Structure$Compatible,
	all: _rtfeldman$elm_css$Css_Structure$Compatible,
	alignItems: _rtfeldman$elm_css$Css_Structure$Compatible,
	justifyContent: _rtfeldman$elm_css$Css_Structure$Compatible,
	length: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrNone: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrNumber: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrNoneOrMinMaxDimension: _rtfeldman$elm_css$Css_Structure$Compatible,
	listStyleType: _rtfeldman$elm_css$Css_Structure$Compatible,
	listStylePosition: _rtfeldman$elm_css$Css_Structure$Compatible,
	listStyleTypeOrPositionOrImage: _rtfeldman$elm_css$Css_Structure$Compatible,
	flexBasis: _rtfeldman$elm_css$Css_Structure$Compatible,
	flexWrap: _rtfeldman$elm_css$Css_Structure$Compatible,
	flexDirection: _rtfeldman$elm_css$Css_Structure$Compatible,
	flexDirectionOrWrap: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrNumberOrAutoOrNoneOrContent: _rtfeldman$elm_css$Css_Structure$Compatible,
	fontFamily: _rtfeldman$elm_css$Css_Structure$Compatible,
	fontSize: _rtfeldman$elm_css$Css_Structure$Compatible,
	fontStyle: _rtfeldman$elm_css$Css_Structure$Compatible,
	fontWeight: _rtfeldman$elm_css$Css_Structure$Compatible,
	fontVariant: _rtfeldman$elm_css$Css_Structure$Compatible,
	outline: _rtfeldman$elm_css$Css_Structure$Compatible,
	pointerEvents: _rtfeldman$elm_css$Css_Structure$Compatible,
	units: _rtfeldman$elm_css$Css$IncompatibleUnits,
	numericValue: 0,
	unitLabel: '',
	warnings: {ctor: '[]'},
	backgroundRepeat: _rtfeldman$elm_css$Css_Structure$Compatible,
	backgroundRepeatShorthand: _rtfeldman$elm_css$Css_Structure$Compatible,
	backgroundAttachment: _rtfeldman$elm_css$Css_Structure$Compatible,
	backgroundBlendMode: _rtfeldman$elm_css$Css_Structure$Compatible,
	backgroundOrigin: _rtfeldman$elm_css$Css_Structure$Compatible,
	backgroundImage: _rtfeldman$elm_css$Css_Structure$Compatible,
	lengthOrAutoOrCoverOrContain: _rtfeldman$elm_css$Css_Structure$Compatible,
	intOrAuto: _rtfeldman$elm_css$Css_Structure$Compatible,
	touchAction: _rtfeldman$elm_css$Css_Structure$Compatible,
	whiteSpace: _rtfeldman$elm_css$Css_Structure$Compatible,
	tableLayout: _rtfeldman$elm_css$Css_Structure$Compatible
};
var _rtfeldman$elm_css$Css$unset = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$initial,
	{value: 'unset'});
var _rtfeldman$elm_css$Css$inherit = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Css$initial,
	{value: 'inherit'});
var _rtfeldman$elm_css$Css$lengthForOverloadedProperty = A3(_rtfeldman$elm_css$Css$lengthConverter, _rtfeldman$elm_css$Css$IncompatibleUnits, '', 0);
var _rtfeldman$elm_css$Css$alignItems = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'alignItems',
		'align-items',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$alignSelf = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'alignSelf',
		'align-self',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$justifyContent = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'justifyContent',
		'justify-content',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$float = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'float',
		'float',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$textAlignLast = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'textAlignLast',
		'text-align-last',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$textAlign = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'textAlign',
		'text-align',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$verticalAlign = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'verticalAlign',
		'vertical-align',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$backgroundPosition = function (fn) {
	return A3(
		_rtfeldman$elm_css$Css$getOverloadedProperty,
		'backgroundPosition',
		'background-position',
		fn(_rtfeldman$elm_css$Css$lengthForOverloadedProperty));
};
var _rtfeldman$elm_css$Css$Rtl = {ctor: 'Rtl'};
var _rtfeldman$elm_css$Css$Ltr = {ctor: 'Ltr'};
var _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs = {ctor: 'IntentionallyUnsupportedPleaseSeeDocs'};
var _rtfeldman$elm_css$Css$thin = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;
var _rtfeldman$elm_css$Css$thick = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;
var _rtfeldman$elm_css$Css$blink = _rtfeldman$elm_css$Css$IntentionallyUnsupportedPleaseSeeDocs;

var _rtfeldman$elm_css$Css_Structure_Output$noIndent = '';
var _rtfeldman$elm_css$Css_Structure_Output$spaceIndent = '    ';
var _rtfeldman$elm_css$Css_Structure_Output$indent = function (str) {
	return A2(_elm_lang$core$Basics_ops['++'], _rtfeldman$elm_css$Css_Structure_Output$spaceIndent, str);
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperty = function (_p0) {
	var _p1 = _p0;
	var suffix = _p1.important ? ' !important;' : ';';
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_p1.key,
		A2(
			_elm_lang$core$Basics_ops['++'],
			': ',
			A2(_elm_lang$core$Basics_ops['++'], _p1.value, suffix)));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperties = function (properties) {
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			function (_p2) {
				return _rtfeldman$elm_css$Css_Structure_Output$indent(
					_rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperty(_p2));
			},
			properties));
};
var _rtfeldman$elm_css$Css_Structure_Output$combinatorToString = function (combinator) {
	var _p3 = combinator;
	switch (_p3.ctor) {
		case 'AdjacentSibling':
			return '+';
		case 'GeneralSibling':
			return '~';
		case 'Child':
			return '>';
		default:
			return '';
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$pseudoElementToString = function (_p4) {
	var _p5 = _p4;
	return A2(_elm_lang$core$Basics_ops['++'], '::', _p5._0);
};
var _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString = function (repeatableSimpleSelector) {
	var _p6 = repeatableSimpleSelector;
	switch (_p6.ctor) {
		case 'ClassSelector':
			return A2(_elm_lang$core$Basics_ops['++'], '.', _p6._0);
		case 'IdSelector':
			return A2(_elm_lang$core$Basics_ops['++'], '#', _p6._0);
		default:
			return A2(_elm_lang$core$Basics_ops['++'], ':', _p6._0);
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString = function (simpleSelectorSequence) {
	var _p7 = simpleSelectorSequence;
	switch (_p7.ctor) {
		case 'TypeSelectorSequence':
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _p7._0._0,
					_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p7._1)
				});
		case 'UniversalSelectorSequence':
			var _p8 = _p7._0;
			return _elm_lang$core$List$isEmpty(_p8) ? '*' : A2(
				_elm_lang$core$String$join,
				'',
				A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p8));
		default:
			return A2(
				_elm_lang$core$String$join,
				'',
				{
					ctor: '::',
					_0: _p7._0,
					_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$repeatableSimpleSelectorToString, _p7._1)
				});
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$selectorChainToString = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure_Output$combinatorToString(_p10._0),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString(_p10._1),
				_1: {ctor: '[]'}
			}
		});
};
var _rtfeldman$elm_css$Css_Structure_Output$selectorToString = function (_p11) {
	var _p12 = _p11;
	var pseudoElementsString = A2(
		_elm_lang$core$String$join,
		'',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(_elm_lang$core$Maybe$map, _rtfeldman$elm_css$Css_Structure_Output$pseudoElementToString, _p12._2)),
			_1: {ctor: '[]'}
		});
	var segments = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure_Output$simpleSelectorSequenceToString(_p12._0),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$selectorChainToString, _p12._1));
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		pseudoElementsString,
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$filter,
				function (_p13) {
					return !_elm_lang$core$String$isEmpty(_p13);
				},
				segments)));
};
var _rtfeldman$elm_css$Css_Structure_Output$mediaExpressionToString = function (expression) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			expression.feature,
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A2(
						_elm_lang$core$Maybe$map,
						F2(
							function (x, y) {
								return A2(_elm_lang$core$Basics_ops['++'], x, y);
							})(': '),
						expression.value)),
				')')));
};
var _rtfeldman$elm_css$Css_Structure_Output$mediaTypeToString = function (mediaType) {
	var _p14 = mediaType;
	switch (_p14.ctor) {
		case 'Print':
			return 'print';
		case 'Screen':
			return 'screen';
		default:
			return 'speech';
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$mediaQueryToString = function (mediaQuery) {
	var prefixWith = F3(
		function (str, mediaType, expressions) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				str,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$String$join,
						' and ',
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Css_Structure_Output$mediaTypeToString(mediaType),
							_1: A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$mediaExpressionToString, expressions)
						})));
		});
	var _p15 = mediaQuery;
	switch (_p15.ctor) {
		case 'AllQuery':
			return A2(
				_elm_lang$core$String$join,
				' and ',
				A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$mediaExpressionToString, _p15._0));
		case 'OnlyQuery':
			return A3(prefixWith, 'only', _p15._0, _p15._1);
		case 'NotQuery':
			return A3(prefixWith, 'not', _p15._0, _p15._1);
		default:
			return _p15._0;
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock = F2(
	function (indentLevel, _p16) {
		var _p17 = _p16;
		var selectorStr = A2(
			_elm_lang$core$String$join,
			', ',
			A2(
				_elm_lang$core$List$map,
				_rtfeldman$elm_css$Css_Structure_Output$selectorToString,
				{ctor: '::', _0: _p17._0, _1: _p17._1}));
		return A2(
			_elm_lang$core$String$join,
			'',
			{
				ctor: '::',
				_0: selectorStr,
				_1: {
					ctor: '::',
					_0: ' {\n',
					_1: {
						ctor: '::',
						_0: indentLevel,
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css_Structure_Output$prettyPrintProperties(_p17._2),
							_1: {
								ctor: '::',
								_0: '\n',
								_1: {
									ctor: '::',
									_0: indentLevel,
									_1: {
										ctor: '::',
										_0: '}',
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
	});
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrintDeclaration = function (declaration) {
	var _p18 = declaration;
	switch (_p18.ctor) {
		case 'StyleBlockDeclaration':
			return A2(_rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock, _rtfeldman$elm_css$Css_Structure_Output$noIndent, _p18._0);
		case 'MediaRule':
			var query = A2(
				_elm_lang$core$String$join,
				',\n',
				A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$mediaQueryToString, _p18._0));
			var blocks = A2(
				_elm_lang$core$String$join,
				'\n\n',
				A2(
					_elm_lang$core$List$map,
					function (_p19) {
						return _rtfeldman$elm_css$Css_Structure_Output$indent(
							A2(_rtfeldman$elm_css$Css_Structure_Output$prettyPrintStyleBlock, _rtfeldman$elm_css$Css_Structure_Output$spaceIndent, _p19));
					},
					_p18._1));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'@media ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					query,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' {\n',
						A2(_elm_lang$core$Basics_ops['++'], blocks, '\n}'))));
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Css.Structure.Output',
				{
					start: {line: 61, column: 5},
					end: {line: 78, column: 49}
				},
				_p18)('not yet implemented :x');
	}
};
var _rtfeldman$elm_css$Css_Structure_Output$namespaceToString = function (_p21) {
	var _p22 = _p21;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@namespace ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p22._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\"',
				A2(_elm_lang$core$Basics_ops['++'], _p22._1, '\"'))));
};
var _rtfeldman$elm_css$Css_Structure_Output$importToString = function (_p23) {
	var _p24 = _p23;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'@import \"',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p24._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p24._1),
				'\"')));
};
var _rtfeldman$elm_css$Css_Structure_Output$charsetToString = function (charset) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_lang$core$Maybe$map,
			function (str) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'@charset \"',
					A2(_elm_lang$core$Basics_ops['++'], str, '\"'));
			},
			charset));
};
var _rtfeldman$elm_css$Css_Structure_Output$prettyPrint = function (_p25) {
	var _p26 = _p25;
	return A2(
		_elm_lang$core$String$join,
		'\n\n',
		A2(
			_elm_lang$core$List$filter,
			function (_p27) {
				return !_elm_lang$core$String$isEmpty(_p27);
			},
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure_Output$charsetToString(_p26.charset),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$String$join,
						'\n',
						A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$importToString, _p26.imports)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$String$join,
							'\n',
							A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$namespaceToString, _p26.namespaces)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$String$join,
								'\n\n',
								A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure_Output$prettyPrintDeclaration, _p26.declarations)),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};

var _rtfeldman$elm_css$Css_Preprocess_Resolve$oneOf = function (maybes) {
	oneOf:
	while (true) {
		var _p0 = maybes;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p2 = _p0._0;
			var _p1 = _p2;
			if (_p1.ctor === 'Nothing') {
				var _v2 = _p0._1;
				maybes = _v2;
				continue oneOf;
			} else {
				return _p2;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		var _p3 = declarations;
		if (_p3.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p3._0.ctor === 'StyleBlockDeclaration') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{ctor: '::', _0: _p3._0._0._0, _1: _p3._0._0._1},
					_rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(_p3._1));
			} else {
				var _v4 = _p3._1;
				declarations = _v4;
				continue collectSelectors;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning = function (_p4) {
	var _p5 = _p4;
	return {
		ctor: '_Tuple2',
		_0: _p5.warnings,
		_1: {key: _p5.key, value: _p5.value, important: _p5.important}
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings = function (properties) {
	return {
		ctor: '_Tuple2',
		_0: A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.warnings;
			},
			properties),
		_1: A2(
			_elm_lang$core$List$map,
			function (prop) {
				return _elm_lang$core$Tuple$second(
					_rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning(prop));
			},
			properties)
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toDocumentRule = F5(
	function (str1, str2, str3, str4, declaration) {
		var _p6 = declaration;
		if (_p6.ctor === 'StyleBlockDeclaration') {
			return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, str1, str2, str3, str4, _p6._0);
		} else {
			return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration = function (declarations) {
	lastDeclaration:
	while (true) {
		var _p7 = declarations;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p7._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '::',
						_0: _p7._0,
						_1: {ctor: '[]'}
					});
			} else {
				var _v8 = _p7._1;
				declarations = _v8;
				continue lastDeclaration;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings = function (declarationsAndWarnings) {
	var _p8 = declarationsAndWarnings;
	if (_p8.ctor === '[]') {
		return {
			declarations: {ctor: '[]'},
			warnings: {ctor: '[]'}
		};
	} else {
		var result = _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(_p8._1);
		return {
			declarations: A2(_elm_lang$core$Basics_ops['++'], _p8._0.declarations, result.declarations),
			warnings: A2(_elm_lang$core$Basics_ops['++'], _p8._0.warnings, result.warnings)
		};
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues = function (tuples) {
	var expandTuples = function (tuplesToExpand) {
		var _p9 = tuplesToExpand;
		if (_p9.ctor === '[]') {
			return {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			};
		} else {
			var _p10 = expandTuples(_p9._1);
			var nextWarnings = _p10._0;
			var nextTuples = _p10._1;
			var _p11 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(_p9._0._1);
			var warnings = _p11._0;
			var properties = _p11._1;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$Basics_ops['++'], warnings, nextWarnings),
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p9._0._0, _1: properties},
					_1: nextTuples
				}
			};
		}
	};
	var _p12 = expandTuples(tuples);
	var warnings = _p12._0;
	var newTuples = _p12._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$FontFeatureValues(newTuples),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle = function (counterStyleProperties) {
	var _p13 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(counterStyleProperties);
	var warnings = _p13._0;
	var properties = _p13._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$Viewport(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport = function (viewportProperties) {
	var _p14 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(viewportProperties);
	var warnings = _p14._0;
	var properties = _p14._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$Viewport(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes = F2(
	function (str, properties) {
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$Keyframes, str, properties),
				_1: {ctor: '[]'}
			},
			warnings: {ctor: '[]'}
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace = function (fontFaceProperties) {
	var _p15 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(fontFaceProperties);
	var warnings = _p15._0;
	var properties = _p15._1;
	return {
		declarations: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$FontFace(properties),
			_1: {ctor: '[]'}
		},
		warnings: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule = F2(
	function (str, pageRuleProperties) {
		var _p16 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarnings(pageRuleProperties);
		var warnings = _p16._0;
		var properties = _p16._1;
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$PageRule, str, properties),
				_1: {ctor: '[]'}
			},
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule = F2(
	function (mediaQueries, declaration) {
		var _p17 = declaration;
		switch (_p17.ctor) {
			case 'StyleBlockDeclaration':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					mediaQueries,
					{
						ctor: '::',
						_0: _p17._0,
						_1: {ctor: '[]'}
					});
			case 'MediaRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$MediaRule,
					A2(_elm_lang$core$Basics_ops['++'], mediaQueries, _p17._0),
					_p17._1);
			case 'SupportsRule':
				return A2(
					_rtfeldman$elm_css$Css_Structure$SupportsRule,
					_p17._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule(mediaQueries),
						_p17._1));
			case 'DocumentRule':
				return A5(_rtfeldman$elm_css$Css_Structure$DocumentRule, _p17._0, _p17._1, _p17._2, _p17._3, _p17._4);
			case 'PageRule':
				return declaration;
			case 'FontFace':
				return declaration;
			case 'Keyframes':
				return declaration;
			case 'Viewport':
				return declaration;
			case 'CounterStyle':
				return declaration;
			default:
				return declaration;
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule = F2(
	function (mediaQueries, styleBlocks) {
		var handleStyleBlock = function (styleBlock) {
			var _p18 = _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(styleBlock);
			var declarations = _p18.declarations;
			var warnings = _p18.warnings;
			return {
				declarations: A2(
					_elm_lang$core$List$map,
					_rtfeldman$elm_css$Css_Preprocess_Resolve$toMediaRule(mediaQueries),
					declarations),
				warnings: warnings
			};
		};
		var results = A2(_elm_lang$core$List$map, handleStyleBlock, styleBlocks);
		return {
			warnings: A2(
				_elm_lang$core$List$concatMap,
				function (_) {
					return _.warnings;
				},
				results),
			declarations: A2(
				_elm_lang$core$List$concatMap,
				function (_) {
					return _.declarations;
				},
				results)
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock = function (_p19) {
	var _p20 = _p19;
	return A2(
		_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles,
		_p20._2,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
				A3(
					_rtfeldman$elm_css$Css_Structure$StyleBlock,
					_p20._0,
					_p20._1,
					{ctor: '[]'})),
			_1: {ctor: '[]'}
		});
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles = F2(
	function (styles, declarations) {
		applyStyles:
		while (true) {
			var _p21 = styles;
			if (_p21.ctor === '[]') {
				return {
					declarations: declarations,
					warnings: {ctor: '[]'}
				};
			} else {
				switch (_p21._0.ctor) {
					case 'AppendProperty':
						var _p22 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extractWarning(_p21._0._0);
						var warnings = _p22._0;
						var property = _p22._1;
						var result = A2(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles,
							_p21._1,
							A2(_rtfeldman$elm_css$Css_Structure$appendProperty, property, declarations));
						return {
							declarations: result.declarations,
							warnings: A2(_elm_lang$core$Basics_ops['++'], warnings, result.warnings)
						};
					case 'ExtendSelector':
						return A4(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedStylesToLast,
							_p21._0._1,
							_p21._1,
							_rtfeldman$elm_css$Css_Structure$appendRepeatableToLastSelector(_p21._0._0),
							declarations);
					case 'NestSnippet':
						var chain = F2(
							function (_p24, _p23) {
								var _p25 = _p24;
								var _p26 = _p23;
								return A3(
									_rtfeldman$elm_css$Css_Structure$Selector,
									_p25._0,
									A2(
										_elm_lang$core$Basics_ops['++'],
										_p25._1,
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: _p21._0._0, _1: _p26._0},
											_1: _p26._1
										}),
									_rtfeldman$elm_css$Css_Preprocess_Resolve$oneOf(
										{
											ctor: '::',
											_0: _p26._2,
											_1: {
												ctor: '::',
												_0: _p25._2,
												_1: {ctor: '[]'}
											}
										}));
							});
						var expandDeclaration = function (declaration) {
							var _p27 = declaration;
							switch (_p27.ctor) {
								case 'StyleBlockDeclaration':
									var newSelectors = A2(
										_elm_lang$core$List$concatMap,
										function (originalSelector) {
											return A2(
												_elm_lang$core$List$map,
												chain(originalSelector),
												{ctor: '::', _0: _p27._0._0, _1: _p27._0._1});
										},
										_rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(declarations));
									var newDeclarations = function () {
										var _p28 = newSelectors;
										if (_p28.ctor === '[]') {
											return {ctor: '[]'};
										} else {
											return {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css_Structure$StyleBlockDeclaration(
													A3(
														_rtfeldman$elm_css$Css_Structure$StyleBlock,
														_p28._0,
														_p28._1,
														{ctor: '[]'})),
												_1: {ctor: '[]'}
											};
										}
									}();
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
										{
											ctor: '::',
											_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles, _p27._0._2, newDeclarations),
											_1: {ctor: '[]'}
										});
								case 'MediaRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule, _p27._0, _p27._1);
								case 'SupportsRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule, _p27._0, _p27._1);
								case 'DocumentRule':
									return A5(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule, _p27._0, _p27._1, _p27._2, _p27._3, _p27._4);
								case 'PageRule':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule, _p27._0, _p27._1);
								case 'FontFace':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace(_p27._0);
								case 'Keyframes':
									return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes, _p27._0, _p27._1);
								case 'Viewport':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport(_p27._0);
								case 'CounterStyle':
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle(_p27._0);
								default:
									return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues(_p27._0);
							}
						};
						return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
							A2(
								F2(
									function (x, y) {
										return A2(_elm_lang$core$Basics_ops['++'], x, y);
									}),
								{
									ctor: '::',
									_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles, _p21._1, declarations),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									expandDeclaration,
									A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p21._0._1))));
					case 'WithPseudoElement':
						return A4(
							_rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedStylesToLast,
							_p21._0._1,
							_p21._1,
							_rtfeldman$elm_css$Css_Structure$appendPseudoElementToLastSelector(_p21._0._0),
							declarations);
					case 'WithMedia':
						var newDeclarations = function () {
							var _p29 = _rtfeldman$elm_css$Css_Preprocess_Resolve$collectSelectors(declarations);
							if (_p29.ctor === '[]') {
								return {ctor: '[]'};
							} else {
								return {
									ctor: '::',
									_0: A2(
										_rtfeldman$elm_css$Css_Structure$MediaRule,
										_p21._0._0,
										{
											ctor: '::',
											_0: A3(
												_rtfeldman$elm_css$Css_Structure$StyleBlock,
												_p29._0,
												_p29._1,
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								};
							}
						}();
						return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
							{
								ctor: '::',
								_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles, _p21._1, declarations),
								_1: {
									ctor: '::',
									_0: A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles, _p21._0._1, newDeclarations),
									_1: {ctor: '[]'}
								}
							});
					default:
						var _v19 = A2(_elm_lang$core$Basics_ops['++'], _p21._0._0, _p21._1),
							_v20 = declarations;
						styles = _v19;
						declarations = _v20;
						continue applyStyles;
				}
			}
		}
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$applyNestedStylesToLast = F4(
	function (nestedStyles, rest, f, declarations) {
		var withoutParent = function (decls) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_elm_lang$core$List$tail(decls));
		};
		var nextResult = A2(
			_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles,
			rest,
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				_rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration(declarations)));
		var newDeclarations = function () {
			var _p30 = {
				ctor: '_Tuple2',
				_0: _elm_lang$core$List$head(nextResult.declarations),
				_1: _elm_lang$core$List$head(
					_elm_lang$core$List$reverse(declarations))
			};
			if (((_p30.ctor === '_Tuple2') && (_p30._0.ctor === 'Just')) && (_p30._1.ctor === 'Just')) {
				var _p32 = _p30._1._0;
				var _p31 = _p30._0._0;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$List$take,
						_elm_lang$core$List$length(declarations) - 1,
						declarations),
					{
						ctor: '::',
						_0: (!_elm_lang$core$Native_Utils.eq(_p32, _p31)) ? _p31 : _p32,
						_1: {ctor: '[]'}
					});
			} else {
				return declarations;
			}
		}();
		var handleInitial = function (declarationsAndWarnings) {
			var result = A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$applyStyles, nestedStyles, declarationsAndWarnings.declarations);
			return {
				warnings: A2(_elm_lang$core$Basics_ops['++'], declarationsAndWarnings.warnings, result.warnings),
				declarations: result.declarations
			};
		};
		var insertStylesToNestedDecl = function (lastDecl) {
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$concatDeclarationsAndWarnings(
				A2(
					_rtfeldman$elm_css$Css_Structure$mapLast,
					handleInitial,
					A2(
						_elm_lang$core$List$map,
						function (declaration) {
							return {
								declarations: {
									ctor: '::',
									_0: declaration,
									_1: {ctor: '[]'}
								},
								warnings: {ctor: '[]'}
							};
						},
						A2(_rtfeldman$elm_css$Css_Structure$concatMapLastStyleBlock, f, lastDecl))));
		};
		var initialResult = A2(
			_elm_lang$core$Maybe$withDefault,
			{
				warnings: {ctor: '[]'},
				declarations: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Maybe$map,
				insertStylesToNestedDecl,
				_rtfeldman$elm_css$Css_Preprocess_Resolve$lastDeclaration(declarations)));
		return {
			warnings: A2(_elm_lang$core$Basics_ops['++'], initialResult.warnings, nextResult.warnings),
			declarations: A2(
				_elm_lang$core$Basics_ops['++'],
				newDeclarations,
				A2(
					_elm_lang$core$Basics_ops['++'],
					withoutParent(initialResult.declarations),
					withoutParent(nextResult.declarations)))
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule = F5(
	function (str1, str2, str3, str4, styleBlock) {
		var _p33 = _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(styleBlock);
		var declarations = _p33.declarations;
		var warnings = _p33.warnings;
		return {
			declarations: A2(
				_elm_lang$core$List$map,
				A4(_rtfeldman$elm_css$Css_Preprocess_Resolve$toDocumentRule, str1, str2, str3, str4),
				declarations),
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule = F2(
	function (str, snippets) {
		var _p34 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(
			A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, snippets));
		var declarations = _p34.declarations;
		var warnings = _p34.warnings;
		return {
			declarations: {
				ctor: '::',
				_0: A2(_rtfeldman$elm_css$Css_Structure$SupportsRule, str, declarations),
				_1: {ctor: '[]'}
			},
			warnings: warnings
		};
	});
var _rtfeldman$elm_css$Css_Preprocess_Resolve$extract = function (snippetDeclarations) {
	var _p35 = snippetDeclarations;
	if (_p35.ctor === '[]') {
		return {
			declarations: {ctor: '[]'},
			warnings: {ctor: '[]'}
		};
	} else {
		var _p36 = _rtfeldman$elm_css$Css_Preprocess_Resolve$toDeclarations(_p35._0);
		var declarations = _p36.declarations;
		var warnings = _p36.warnings;
		var nextResult = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(_p35._1);
		return {
			declarations: A2(_elm_lang$core$Basics_ops['++'], declarations, nextResult.declarations),
			warnings: A2(_elm_lang$core$Basics_ops['++'], warnings, nextResult.warnings)
		};
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toDeclarations = function (snippetDeclaration) {
	var _p37 = snippetDeclaration;
	switch (_p37.ctor) {
		case 'StyleBlockDeclaration':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$expandStyleBlock(_p37._0);
		case 'MediaRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveMediaRule, _p37._0, _p37._1);
		case 'SupportsRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveSupportsRule, _p37._0, _p37._1);
		case 'DocumentRule':
			return A5(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveDocumentRule, _p37._0, _p37._1, _p37._2, _p37._3, _p37._4);
		case 'PageRule':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolvePageRule, _p37._0, _p37._1);
		case 'FontFace':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFace(_p37._0);
		case 'Keyframes':
			return A2(_rtfeldman$elm_css$Css_Preprocess_Resolve$resolveKeyframes, _p37._0, _p37._1);
		case 'Viewport':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveViewport(_p37._0);
		case 'CounterStyle':
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveCounterStyle(_p37._0);
		default:
			return _rtfeldman$elm_css$Css_Preprocess_Resolve$resolveFontFeatureValues(_p37._0);
	}
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$toStructure = function (_p38) {
	var _p39 = _p38;
	var _p40 = _rtfeldman$elm_css$Css_Preprocess_Resolve$extract(
		A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, _p39.snippets));
	var warnings = _p40.warnings;
	var declarations = _p40.declarations;
	return {
		ctor: '_Tuple2',
		_0: {charset: _p39.charset, imports: _p39.imports, namespaces: _p39.namespaces, declarations: declarations},
		_1: warnings
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$compile1 = function (sheet) {
	var _p41 = _rtfeldman$elm_css$Css_Preprocess_Resolve$toStructure(sheet);
	var structureStylesheet = _p41._0;
	var warnings = _p41._1;
	return {
		warnings: warnings,
		css: _rtfeldman$elm_css$Css_Structure_Output$prettyPrint(
			_rtfeldman$elm_css$Css_Structure$dropEmpty(structureStylesheet))
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$compile = function (styles) {
	var results = A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Preprocess_Resolve$compile1, styles);
	return {
		warnings: A2(
			_elm_lang$core$List$concatMap,
			function (_) {
				return _.warnings;
			},
			results),
		css: A2(
			_elm_lang$core$String$join,
			'\n\n',
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.css;
				},
				results))
	};
};
var _rtfeldman$elm_css$Css_Preprocess_Resolve$DeclarationsAndWarnings = F2(
	function (a, b) {
		return {declarations: a, warnings: b};
	});

var _elm_lang$core$Native_Bitwise = function() {

return {
	and: F2(function and(a, b) { return a & b; }),
	or: F2(function or(a, b) { return a | b; }),
	xor: F2(function xor(a, b) { return a ^ b; }),
	complement: function complement(a) { return ~a; },
	shiftLeftBy: F2(function(offset, a) { return a << offset; }),
	shiftRightBy: F2(function(offset, a) { return a >> offset; }),
	shiftRightZfBy: F2(function(offset, a) { return a >>> offset; })
};

}();

var _elm_lang$core$Bitwise$shiftRightZfBy = _elm_lang$core$Native_Bitwise.shiftRightZfBy;
var _elm_lang$core$Bitwise$shiftRightBy = _elm_lang$core$Native_Bitwise.shiftRightBy;
var _elm_lang$core$Bitwise$shiftLeftBy = _elm_lang$core$Native_Bitwise.shiftLeftBy;
var _elm_lang$core$Bitwise$complement = _elm_lang$core$Native_Bitwise.complement;
var _elm_lang$core$Bitwise$xor = _elm_lang$core$Native_Bitwise.xor;
var _elm_lang$core$Bitwise$or = _elm_lang$core$Native_Bitwise.or;
var _elm_lang$core$Bitwise$and = _elm_lang$core$Native_Bitwise.and;

var _Skinney$murmur3$UTF8$accumulate = F3(
	function (add, $char, _p0) {
		var _p1 = _p0;
		var _p3 = _p1._0;
		var _p2 = _p1._1;
		if (_p2.ctor === 'Nothing') {
			return (_elm_lang$core$Native_Utils.cmp($char, 128) < 0) ? {
				ctor: '_Tuple2',
				_0: A2(add, $char, _p3),
				_1: _elm_lang$core$Maybe$Nothing
			} : ((_elm_lang$core$Native_Utils.cmp($char, 2048) < 0) ? {
				ctor: '_Tuple2',
				_0: A2(
					add,
					128 | (63 & $char),
					A2(add, 192 | ($char >>> 6), _p3)),
				_1: _elm_lang$core$Maybe$Nothing
			} : (((_elm_lang$core$Native_Utils.cmp($char, 55296) < 0) || (_elm_lang$core$Native_Utils.cmp($char, 57344) > -1)) ? {
				ctor: '_Tuple2',
				_0: A2(
					add,
					128 | (63 & $char),
					A2(
						add,
						128 | (63 & ($char >>> 6)),
						A2(add, 224 | ($char >>> 12), _p3))),
				_1: _elm_lang$core$Maybe$Nothing
			} : {
				ctor: '_Tuple2',
				_0: _p3,
				_1: _elm_lang$core$Maybe$Just($char)
			}));
		} else {
			var combined = ((1023 & $char) | ((1023 & _p2._0) << 10)) + 65536;
			return {
				ctor: '_Tuple2',
				_0: A2(
					add,
					128 | (63 & combined),
					A2(
						add,
						128 | (63 & (combined >>> 6)),
						A2(
							add,
							128 | (63 & (combined >>> 12)),
							A2(add, 240 | (combined >>> 18), _p3)))),
				_1: _elm_lang$core$Maybe$Nothing
			};
		}
	});
var _Skinney$murmur3$UTF8$foldl = F3(
	function (op, acc, input) {
		var helper = F2(
			function ($char, acc) {
				return A3(
					_Skinney$murmur3$UTF8$accumulate,
					op,
					_elm_lang$core$Char$toCode($char),
					acc);
			});
		return _elm_lang$core$Tuple$first(
			A3(
				_elm_lang$core$String$foldl,
				helper,
				{ctor: '_Tuple2', _0: acc, _1: _elm_lang$core$Maybe$Nothing},
				input));
	});

var _Skinney$murmur3$Murmur3$mur = F2(
	function (c, h) {
		return 4294967295 & (((h & 65535) * c) + ((65535 & ((h >>> 16) * c)) << 16));
	});
var _Skinney$murmur3$Murmur3$step = function (acc) {
	var h1 = A2(_Skinney$murmur3$Murmur3$mur, 5, (acc >>> 19) | (acc << 13));
	return ((h1 & 65535) + 27492) + ((65535 & ((h1 >>> 16) + 58964)) << 16);
};
var _Skinney$murmur3$Murmur3$mix = F2(
	function (h1, h2) {
		var k1 = A2(_Skinney$murmur3$Murmur3$mur, 3432918353, h2);
		return h1 ^ A2(_Skinney$murmur3$Murmur3$mur, 461845907, (k1 >>> 17) | (k1 << 15));
	});
var _Skinney$murmur3$Murmur3$finalize = function (data) {
	var acc = (!_elm_lang$core$Native_Utils.eq(data.hash, 0)) ? A2(_Skinney$murmur3$Murmur3$mix, data.seed, data.hash) : data.seed;
	var h1 = acc ^ data.charsProcessed;
	var h2 = A2(_Skinney$murmur3$Murmur3$mur, 2246822507, h1 ^ (h1 >>> 16));
	var h3 = A2(_Skinney$murmur3$Murmur3$mur, 3266489909, h2 ^ (h2 >>> 13));
	return (h3 ^ (h3 >>> 16)) >>> 0;
};
var _Skinney$murmur3$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | (c << data.shift);
		var _p0 = data.shift;
		if (_p0 === 24) {
			var newHash = _Skinney$murmur3$Murmur3$step(
				A2(_Skinney$murmur3$Murmur3$mix, data.seed, res));
			return {shift: 0, seed: newHash, hash: 0, charsProcessed: data.charsProcessed + 1};
		} else {
			return {shift: data.shift + 8, seed: data.seed, hash: res, charsProcessed: data.charsProcessed + 1};
		}
	});
var _Skinney$murmur3$Murmur3$HashData = F4(
	function (a, b, c, d) {
		return {shift: a, seed: b, hash: c, charsProcessed: d};
	});
var _Skinney$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return _Skinney$murmur3$Murmur3$finalize(
			A3(
				_Skinney$murmur3$UTF8$foldl,
				_Skinney$murmur3$Murmur3$hashFold,
				A4(_Skinney$murmur3$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});

var _rtfeldman$elm_css$VirtualDom_Styled$containsKey = F2(
	function (key, pairs) {
		containsKey:
		while (true) {
			var _p0 = pairs;
			if (_p0.ctor === '[]') {
				return false;
			} else {
				if (_elm_lang$core$Native_Utils.eq(key, _p0._0._0)) {
					return true;
				} else {
					var _v1 = key,
						_v2 = _p0._1;
					key = _v1;
					pairs = _v2;
					continue containsKey;
				}
			}
		}
	});
var _rtfeldman$elm_css$VirtualDom_Styled$getUnusedKey = F2(
	function ($default, pairs) {
		getUnusedKey:
		while (true) {
			var _p1 = pairs;
			if (_p1.ctor === '[]') {
				return $default;
			} else {
				var _p2 = _p1._1;
				var newKey = A2(_elm_lang$core$Basics_ops['++'], '_', _p1._0._0);
				if (A2(_rtfeldman$elm_css$VirtualDom_Styled$containsKey, newKey, _p2)) {
					var _v4 = newKey,
						_v5 = _p2;
					$default = _v4;
					pairs = _v5;
					continue getUnusedKey;
				} else {
					return newKey;
				}
			}
		}
	});
var _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty = function (_p3) {
	var _p4 = _p3;
	return _p4._0;
};
var _rtfeldman$elm_css$VirtualDom_Styled$stylesFromPropertiesHelp = F2(
	function (candidate, properties) {
		stylesFromPropertiesHelp:
		while (true) {
			var _p5 = properties;
			if (_p5.ctor === '[]') {
				return candidate;
			} else {
				var _p7 = _p5._1;
				var _p6 = _p5._0._2;
				if (_elm_lang$core$String$isEmpty(_p6)) {
					var _v8 = candidate,
						_v9 = _p7;
					candidate = _v8;
					properties = _v9;
					continue stylesFromPropertiesHelp;
				} else {
					var _v10 = _elm_lang$core$Maybe$Just(
						{ctor: '_Tuple2', _0: _p6, _1: _p5._0._1}),
						_v11 = _p7;
					candidate = _v10;
					properties = _v11;
					continue stylesFromPropertiesHelp;
				}
			}
		}
	});
var _rtfeldman$elm_css$VirtualDom_Styled$stylesFromProperties = function (properties) {
	var _p8 = A2(_rtfeldman$elm_css$VirtualDom_Styled$stylesFromPropertiesHelp, _elm_lang$core$Maybe$Nothing, properties);
	if (_p8.ctor === 'Nothing') {
		return _elm_lang$core$Dict$empty;
	} else {
		return A2(_elm_lang$core$Dict$singleton, _p8._0._0, _p8._0._1);
	}
};
var _rtfeldman$elm_css$VirtualDom_Styled$accumulateStyles = F2(
	function (_p9, styles) {
		var _p10 = _p9;
		var _p11 = _p10._1;
		return _elm_lang$core$List$isEmpty(_p11) ? styles : A3(_elm_lang$core$Dict$insert, _p10._2, _p11, styles);
	});
var _rtfeldman$elm_css$VirtualDom_Styled$accumulateKeyedStyledHtml = F2(
	function (_p13, _p12) {
		var _p14 = _p13;
		var _p23 = _p14._0;
		var _p15 = _p12;
		var _p22 = _p15._1;
		var _p21 = _p15._0;
		var _p16 = _p14._1;
		switch (_p16.ctor) {
			case 'Unstyled':
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p23, _1: _p16._0},
						_1: _p21
					},
					_1: _p22
				};
			case 'Element':
				var _p18 = _p16._1;
				var combinedStyles = A3(_elm_lang$core$List$foldl, _rtfeldman$elm_css$VirtualDom_Styled$accumulateStyles, _p22, _p18);
				var _p17 = A3(
					_elm_lang$core$List$foldl,
					_rtfeldman$elm_css$VirtualDom_Styled$accumulateStyledHtml,
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: combinedStyles
					},
					_p16._2);
				var childNodes = _p17._0;
				var finalStyles = _p17._1;
				var vdom = A3(
					_elm_lang$virtual_dom$VirtualDom$node,
					_p16._0,
					A2(_elm_lang$core$List$map, _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty, _p18),
					_elm_lang$core$List$reverse(childNodes));
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p23, _1: vdom},
						_1: _p21
					},
					_1: finalStyles
				};
			default:
				var _p20 = _p16._1;
				var combinedStyles = A3(_elm_lang$core$List$foldl, _rtfeldman$elm_css$VirtualDom_Styled$accumulateStyles, _p22, _p20);
				var _p19 = A3(
					_elm_lang$core$List$foldl,
					_rtfeldman$elm_css$VirtualDom_Styled$accumulateKeyedStyledHtml,
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: combinedStyles
					},
					_p16._2);
				var childNodes = _p19._0;
				var finalStyles = _p19._1;
				var vdom = A3(
					_elm_lang$virtual_dom$VirtualDom$keyedNode,
					_p16._0,
					A2(_elm_lang$core$List$map, _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty, _p20),
					_elm_lang$core$List$reverse(childNodes));
				return {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p23, _1: vdom},
						_1: _p21
					},
					_1: finalStyles
				};
		}
	});
var _rtfeldman$elm_css$VirtualDom_Styled$accumulateStyledHtml = F2(
	function (html, _p24) {
		var _p25 = _p24;
		var _p32 = _p25._1;
		var _p31 = _p25._0;
		var _p26 = html;
		switch (_p26.ctor) {
			case 'Unstyled':
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: _p26._0, _1: _p31},
					_1: _p32
				};
			case 'Element':
				var _p28 = _p26._1;
				var combinedStyles = A3(_elm_lang$core$List$foldl, _rtfeldman$elm_css$VirtualDom_Styled$accumulateStyles, _p32, _p28);
				var _p27 = A3(
					_elm_lang$core$List$foldl,
					_rtfeldman$elm_css$VirtualDom_Styled$accumulateStyledHtml,
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: combinedStyles
					},
					_p26._2);
				var childNodes = _p27._0;
				var finalStyles = _p27._1;
				var node = A3(
					_elm_lang$virtual_dom$VirtualDom$node,
					_p26._0,
					A2(_elm_lang$core$List$map, _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty, _p28),
					_elm_lang$core$List$reverse(childNodes));
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: node, _1: _p31},
					_1: finalStyles
				};
			default:
				var _p30 = _p26._1;
				var combinedStyles = A3(_elm_lang$core$List$foldl, _rtfeldman$elm_css$VirtualDom_Styled$accumulateStyles, _p32, _p30);
				var _p29 = A3(
					_elm_lang$core$List$foldl,
					_rtfeldman$elm_css$VirtualDom_Styled$accumulateKeyedStyledHtml,
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: combinedStyles
					},
					_p26._2);
				var childNodes = _p29._0;
				var finalStyles = _p29._1;
				var node = A3(
					_elm_lang$virtual_dom$VirtualDom$keyedNode,
					_p26._0,
					A2(_elm_lang$core$List$map, _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty, _p30),
					_elm_lang$core$List$reverse(childNodes));
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: node, _1: _p31},
					_1: finalStyles
				};
		}
	});
var _rtfeldman$elm_css$VirtualDom_Styled$murmurSeed = 15739;
var _rtfeldman$elm_css$VirtualDom_Styled$makeSnippet = F2(
	function (styles, sequence) {
		var selector = A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			sequence,
			{ctor: '[]'},
			_elm_lang$core$Maybe$Nothing);
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
					A3(
						_rtfeldman$elm_css$Css_Preprocess$StyleBlock,
						selector,
						{ctor: '[]'},
						styles)),
				_1: {ctor: '[]'}
			});
	});
var _rtfeldman$elm_css$VirtualDom_Styled$snippetFromPair = function (_p33) {
	var _p34 = _p33;
	return A2(
		_rtfeldman$elm_css$VirtualDom_Styled$makeSnippet,
		_p34._1,
		_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Structure$ClassSelector(_p34._0),
				_1: {ctor: '[]'}
			}));
};
var _rtfeldman$elm_css$VirtualDom_Styled$toDeclaration = function (dict) {
	return function (_) {
		return _.css;
	}(
		_rtfeldman$elm_css$Css_Preprocess_Resolve$compile(
			_elm_lang$core$List$singleton(
				_rtfeldman$elm_css$Css_Preprocess$stylesheet(
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$VirtualDom_Styled$snippetFromPair,
						_elm_lang$core$Dict$toList(dict))))));
};
var _rtfeldman$elm_css$VirtualDom_Styled$toStyleNode = function (styles) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom$node,
		'style',
		{ctor: '[]'},
		_elm_lang$core$List$singleton(
			_elm_lang$virtual_dom$VirtualDom$text(
				_rtfeldman$elm_css$VirtualDom_Styled$toDeclaration(styles))));
};
var _rtfeldman$elm_css$VirtualDom_Styled$unstyle = F3(
	function (elemType, properties, children) {
		var unstyledProperties = A2(_elm_lang$core$List$map, _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty, properties);
		var initialStyles = _rtfeldman$elm_css$VirtualDom_Styled$stylesFromProperties(properties);
		var _p35 = A3(
			_elm_lang$core$List$foldl,
			_rtfeldman$elm_css$VirtualDom_Styled$accumulateStyledHtml,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: initialStyles
			},
			children);
		var childNodes = _p35._0;
		var styles = _p35._1;
		var styleNode = _rtfeldman$elm_css$VirtualDom_Styled$toStyleNode(styles);
		return A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			elemType,
			unstyledProperties,
			{
				ctor: '::',
				_0: styleNode,
				_1: _elm_lang$core$List$reverse(childNodes)
			});
	});
var _rtfeldman$elm_css$VirtualDom_Styled$toKeyedStyleNode = F2(
	function (allStyles, keyedChildNodes) {
		var finalNode = _rtfeldman$elm_css$VirtualDom_Styled$toStyleNode(allStyles);
		var styleNodeKey = A2(_rtfeldman$elm_css$VirtualDom_Styled$getUnusedKey, '_', keyedChildNodes);
		return {ctor: '_Tuple2', _0: styleNodeKey, _1: finalNode};
	});
var _rtfeldman$elm_css$VirtualDom_Styled$unstyleKeyed = F3(
	function (elemType, properties, keyedChildren) {
		var unstyledProperties = A2(_elm_lang$core$List$map, _rtfeldman$elm_css$VirtualDom_Styled$extractUnstyledProperty, properties);
		var initialStyles = _rtfeldman$elm_css$VirtualDom_Styled$stylesFromProperties(properties);
		var _p36 = A3(
			_elm_lang$core$List$foldl,
			_rtfeldman$elm_css$VirtualDom_Styled$accumulateKeyedStyledHtml,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: initialStyles
			},
			keyedChildren);
		var keyedChildNodes = _p36._0;
		var styles = _p36._1;
		var keyedStyleNode = A2(_rtfeldman$elm_css$VirtualDom_Styled$toKeyedStyleNode, styles, keyedChildNodes);
		return A3(
			_elm_lang$virtual_dom$VirtualDom$keyedNode,
			elemType,
			unstyledProperties,
			{
				ctor: '::',
				_0: keyedStyleNode,
				_1: _elm_lang$core$List$reverse(keyedChildNodes)
			});
	});
var _rtfeldman$elm_css$VirtualDom_Styled$getClassname = function (styles) {
	return _elm_lang$core$List$isEmpty(styles) ? 'unstyled' : A2(
		_elm_lang$core$String$cons,
		_elm_lang$core$Native_Utils.chr('_'),
		_rtfeldman$hex$Hex$toString(
			A2(
				_Skinney$murmur3$Murmur3$hashString,
				_rtfeldman$elm_css$VirtualDom_Styled$murmurSeed,
				function (_) {
					return _.css;
				}(
					_rtfeldman$elm_css$Css_Preprocess_Resolve$compile(
						_elm_lang$core$List$singleton(
							_rtfeldman$elm_css$Css_Preprocess$stylesheet(
								_elm_lang$core$List$singleton(
									A2(
										_rtfeldman$elm_css$VirtualDom_Styled$makeSnippet,
										styles,
										_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
											{ctor: '[]'}))))))))));
};
var _rtfeldman$elm_css$VirtualDom_Styled$toUnstyled = function (node) {
	var _p37 = node;
	switch (_p37.ctor) {
		case 'Unstyled':
			return _p37._0;
		case 'Element':
			return A3(_rtfeldman$elm_css$VirtualDom_Styled$unstyle, _p37._0, _p37._1, _p37._2);
		default:
			return A3(_rtfeldman$elm_css$VirtualDom_Styled$unstyleKeyed, _p37._0, _p37._1, _p37._2);
	}
};
var _rtfeldman$elm_css$VirtualDom_Styled$Unstyled = function (a) {
	return {ctor: 'Unstyled', _0: a};
};
var _rtfeldman$elm_css$VirtualDom_Styled$unstyledNode = _rtfeldman$elm_css$VirtualDom_Styled$Unstyled;
var _rtfeldman$elm_css$VirtualDom_Styled$text = function (_p38) {
	return _rtfeldman$elm_css$VirtualDom_Styled$Unstyled(
		_elm_lang$virtual_dom$VirtualDom$text(_p38));
};
var _rtfeldman$elm_css$VirtualDom_Styled$lazy = F2(
	function (fn, arg) {
		return _rtfeldman$elm_css$VirtualDom_Styled$Unstyled(
			A2(_elm_lang$virtual_dom$VirtualDom$lazy, fn, arg));
	});
var _rtfeldman$elm_css$VirtualDom_Styled$lazy2 = F3(
	function (fn, arg1, arg2) {
		return _rtfeldman$elm_css$VirtualDom_Styled$Unstyled(
			A3(_elm_lang$virtual_dom$VirtualDom$lazy2, fn, arg1, arg2));
	});
var _rtfeldman$elm_css$VirtualDom_Styled$lazy3 = F4(
	function (fn, arg1, arg2, arg3) {
		return _rtfeldman$elm_css$VirtualDom_Styled$Unstyled(
			A4(_elm_lang$virtual_dom$VirtualDom$lazy3, fn, arg1, arg2, arg3));
	});
var _rtfeldman$elm_css$VirtualDom_Styled$KeyedElement = F3(
	function (a, b, c) {
		return {ctor: 'KeyedElement', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$VirtualDom_Styled$keyedNode = _rtfeldman$elm_css$VirtualDom_Styled$KeyedElement;
var _rtfeldman$elm_css$VirtualDom_Styled$Element = F3(
	function (a, b, c) {
		return {ctor: 'Element', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$VirtualDom_Styled$node = _rtfeldman$elm_css$VirtualDom_Styled$Element;
var _rtfeldman$elm_css$VirtualDom_Styled$Property = F3(
	function (a, b, c) {
		return {ctor: 'Property', _0: a, _1: b, _2: c};
	});
var _rtfeldman$elm_css$VirtualDom_Styled$property = F2(
	function (key, value) {
		return A3(
			_rtfeldman$elm_css$VirtualDom_Styled$Property,
			A2(_elm_lang$virtual_dom$VirtualDom$property, key, value),
			{ctor: '[]'},
			'');
	});
var _rtfeldman$elm_css$VirtualDom_Styled$attribute = F2(
	function (key, value) {
		return A3(
			_rtfeldman$elm_css$VirtualDom_Styled$Property,
			A2(_elm_lang$virtual_dom$VirtualDom$attribute, key, value),
			{ctor: '[]'},
			'');
	});
var _rtfeldman$elm_css$VirtualDom_Styled$attributeNS = F3(
	function (namespace, key, value) {
		return A3(
			_rtfeldman$elm_css$VirtualDom_Styled$Property,
			A3(_elm_lang$virtual_dom$VirtualDom$attributeNS, namespace, key, value),
			{ctor: '[]'},
			'');
	});
var _rtfeldman$elm_css$VirtualDom_Styled$unstyledProperty = function (prop) {
	return A3(
		_rtfeldman$elm_css$VirtualDom_Styled$Property,
		prop,
		{ctor: '[]'},
		'');
};
var _rtfeldman$elm_css$VirtualDom_Styled$on = F2(
	function (eventName, decoder) {
		return A3(
			_rtfeldman$elm_css$VirtualDom_Styled$Property,
			A2(_elm_lang$virtual_dom$VirtualDom$on, eventName, decoder),
			{ctor: '[]'},
			'');
	});
var _rtfeldman$elm_css$VirtualDom_Styled$onWithOptions = F3(
	function (eventName, options, decoder) {
		return A3(
			_rtfeldman$elm_css$VirtualDom_Styled$Property,
			A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, options, decoder),
			{ctor: '[]'},
			'');
	});
var _rtfeldman$elm_css$VirtualDom_Styled$mapProperty = F2(
	function (transform, _p39) {
		var _p40 = _p39;
		return A3(
			_rtfeldman$elm_css$VirtualDom_Styled$Property,
			A2(_elm_lang$virtual_dom$VirtualDom$mapProperty, transform, _p40._0),
			_p40._1,
			_p40._2);
	});
var _rtfeldman$elm_css$VirtualDom_Styled$map = F2(
	function (transform, node) {
		var _p41 = node;
		switch (_p41.ctor) {
			case 'Element':
				return A3(
					_rtfeldman$elm_css$VirtualDom_Styled$Element,
					_p41._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$VirtualDom_Styled$mapProperty(transform),
						_p41._1),
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$VirtualDom_Styled$map(transform),
						_p41._2));
			case 'KeyedElement':
				return A3(
					_rtfeldman$elm_css$VirtualDom_Styled$KeyedElement,
					_p41._0,
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$elm_css$VirtualDom_Styled$mapProperty(transform),
						_p41._1),
					A2(
						_elm_lang$core$List$map,
						function (_p42) {
							var _p43 = _p42;
							return {
								ctor: '_Tuple2',
								_0: _p43._0,
								_1: A2(_rtfeldman$elm_css$VirtualDom_Styled$map, transform, _p43._1)
							};
						},
						_p41._2));
			default:
				return _rtfeldman$elm_css$VirtualDom_Styled$Unstyled(
					A2(_elm_lang$virtual_dom$VirtualDom$map, transform, _p41._0));
		}
	});

var _rtfeldman$elm_css$Html_Styled_Internal$css = function (styles) {
	var classname = _rtfeldman$elm_css$VirtualDom_Styled$getClassname(styles);
	var classProperty = A2(
		_elm_lang$virtual_dom$VirtualDom$property,
		'className',
		_elm_lang$core$Json_Encode$string(classname));
	return A3(_rtfeldman$elm_css$VirtualDom_Styled$Property, classProperty, styles, classname);
};

var _rtfeldman$elm_css$Html_Styled$fromUnstyled = _rtfeldman$elm_css$VirtualDom_Styled$unstyledNode;
var _rtfeldman$elm_css$Html_Styled$toUnstyled = _rtfeldman$elm_css$VirtualDom_Styled$toUnstyled;
var _rtfeldman$elm_css$Html_Styled$program = function (config) {
	return _elm_lang$virtual_dom$VirtualDom$program(
		_elm_lang$core$Native_Utils.update(
			config,
			{
				view: function (_p0) {
					return _rtfeldman$elm_css$Html_Styled$toUnstyled(
						config.view(_p0));
				}
			}));
};
var _rtfeldman$elm_css$Html_Styled$beginnerProgram = function (_p1) {
	var _p2 = _p1;
	return _rtfeldman$elm_css$Html_Styled$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p2.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p2.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p2.view,
			subscriptions: function (_p3) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _rtfeldman$elm_css$Html_Styled$programWithFlags = function (config) {
	return _elm_lang$virtual_dom$VirtualDom$programWithFlags(
		_elm_lang$core$Native_Utils.update(
			config,
			{
				view: function (_p4) {
					return _rtfeldman$elm_css$Html_Styled$toUnstyled(
						config.view(_p4));
				}
			}));
};
var _rtfeldman$elm_css$Html_Styled$styled = F4(
	function (fn, styles, attrs, children) {
		return A2(
			fn,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Internal$css(styles),
				_1: attrs
			},
			children);
	});
var _rtfeldman$elm_css$Html_Styled$map = _rtfeldman$elm_css$VirtualDom_Styled$map;
var _rtfeldman$elm_css$Html_Styled$text = _rtfeldman$elm_css$VirtualDom_Styled$text;
var _rtfeldman$elm_css$Html_Styled$node = _rtfeldman$elm_css$VirtualDom_Styled$node;
var _rtfeldman$elm_css$Html_Styled$body = _rtfeldman$elm_css$Html_Styled$node('body');
var _rtfeldman$elm_css$Html_Styled$section = _rtfeldman$elm_css$Html_Styled$node('section');
var _rtfeldman$elm_css$Html_Styled$nav = _rtfeldman$elm_css$Html_Styled$node('nav');
var _rtfeldman$elm_css$Html_Styled$article = _rtfeldman$elm_css$Html_Styled$node('article');
var _rtfeldman$elm_css$Html_Styled$aside = _rtfeldman$elm_css$Html_Styled$node('aside');
var _rtfeldman$elm_css$Html_Styled$h1 = _rtfeldman$elm_css$Html_Styled$node('h1');
var _rtfeldman$elm_css$Html_Styled$h2 = _rtfeldman$elm_css$Html_Styled$node('h2');
var _rtfeldman$elm_css$Html_Styled$h3 = _rtfeldman$elm_css$Html_Styled$node('h3');
var _rtfeldman$elm_css$Html_Styled$h4 = _rtfeldman$elm_css$Html_Styled$node('h4');
var _rtfeldman$elm_css$Html_Styled$h5 = _rtfeldman$elm_css$Html_Styled$node('h5');
var _rtfeldman$elm_css$Html_Styled$h6 = _rtfeldman$elm_css$Html_Styled$node('h6');
var _rtfeldman$elm_css$Html_Styled$header = _rtfeldman$elm_css$Html_Styled$node('header');
var _rtfeldman$elm_css$Html_Styled$footer = _rtfeldman$elm_css$Html_Styled$node('footer');
var _rtfeldman$elm_css$Html_Styled$address = _rtfeldman$elm_css$Html_Styled$node('address');
var _rtfeldman$elm_css$Html_Styled$main_ = _rtfeldman$elm_css$Html_Styled$node('main');
var _rtfeldman$elm_css$Html_Styled$p = _rtfeldman$elm_css$Html_Styled$node('p');
var _rtfeldman$elm_css$Html_Styled$hr = _rtfeldman$elm_css$Html_Styled$node('hr');
var _rtfeldman$elm_css$Html_Styled$pre = _rtfeldman$elm_css$Html_Styled$node('pre');
var _rtfeldman$elm_css$Html_Styled$blockquote = _rtfeldman$elm_css$Html_Styled$node('blockquote');
var _rtfeldman$elm_css$Html_Styled$ol = _rtfeldman$elm_css$Html_Styled$node('ol');
var _rtfeldman$elm_css$Html_Styled$ul = _rtfeldman$elm_css$Html_Styled$node('ul');
var _rtfeldman$elm_css$Html_Styled$li = _rtfeldman$elm_css$Html_Styled$node('li');
var _rtfeldman$elm_css$Html_Styled$dl = _rtfeldman$elm_css$Html_Styled$node('dl');
var _rtfeldman$elm_css$Html_Styled$dt = _rtfeldman$elm_css$Html_Styled$node('dt');
var _rtfeldman$elm_css$Html_Styled$dd = _rtfeldman$elm_css$Html_Styled$node('dd');
var _rtfeldman$elm_css$Html_Styled$figure = _rtfeldman$elm_css$Html_Styled$node('figure');
var _rtfeldman$elm_css$Html_Styled$figcaption = _rtfeldman$elm_css$Html_Styled$node('figcaption');
var _rtfeldman$elm_css$Html_Styled$div = _rtfeldman$elm_css$Html_Styled$node('div');
var _rtfeldman$elm_css$Html_Styled$a = _rtfeldman$elm_css$Html_Styled$node('a');
var _rtfeldman$elm_css$Html_Styled$em = _rtfeldman$elm_css$Html_Styled$node('em');
var _rtfeldman$elm_css$Html_Styled$strong = _rtfeldman$elm_css$Html_Styled$node('strong');
var _rtfeldman$elm_css$Html_Styled$small = _rtfeldman$elm_css$Html_Styled$node('small');
var _rtfeldman$elm_css$Html_Styled$s = _rtfeldman$elm_css$Html_Styled$node('s');
var _rtfeldman$elm_css$Html_Styled$cite = _rtfeldman$elm_css$Html_Styled$node('cite');
var _rtfeldman$elm_css$Html_Styled$q = _rtfeldman$elm_css$Html_Styled$node('q');
var _rtfeldman$elm_css$Html_Styled$dfn = _rtfeldman$elm_css$Html_Styled$node('dfn');
var _rtfeldman$elm_css$Html_Styled$abbr = _rtfeldman$elm_css$Html_Styled$node('abbr');
var _rtfeldman$elm_css$Html_Styled$time = _rtfeldman$elm_css$Html_Styled$node('time');
var _rtfeldman$elm_css$Html_Styled$code = _rtfeldman$elm_css$Html_Styled$node('code');
var _rtfeldman$elm_css$Html_Styled$var = _rtfeldman$elm_css$Html_Styled$node('var');
var _rtfeldman$elm_css$Html_Styled$samp = _rtfeldman$elm_css$Html_Styled$node('samp');
var _rtfeldman$elm_css$Html_Styled$kbd = _rtfeldman$elm_css$Html_Styled$node('kbd');
var _rtfeldman$elm_css$Html_Styled$sub = _rtfeldman$elm_css$Html_Styled$node('sub');
var _rtfeldman$elm_css$Html_Styled$sup = _rtfeldman$elm_css$Html_Styled$node('sup');
var _rtfeldman$elm_css$Html_Styled$i = _rtfeldman$elm_css$Html_Styled$node('i');
var _rtfeldman$elm_css$Html_Styled$b = _rtfeldman$elm_css$Html_Styled$node('b');
var _rtfeldman$elm_css$Html_Styled$u = _rtfeldman$elm_css$Html_Styled$node('u');
var _rtfeldman$elm_css$Html_Styled$mark = _rtfeldman$elm_css$Html_Styled$node('mark');
var _rtfeldman$elm_css$Html_Styled$ruby = _rtfeldman$elm_css$Html_Styled$node('ruby');
var _rtfeldman$elm_css$Html_Styled$rt = _rtfeldman$elm_css$Html_Styled$node('rt');
var _rtfeldman$elm_css$Html_Styled$rp = _rtfeldman$elm_css$Html_Styled$node('rp');
var _rtfeldman$elm_css$Html_Styled$bdi = _rtfeldman$elm_css$Html_Styled$node('bdi');
var _rtfeldman$elm_css$Html_Styled$bdo = _rtfeldman$elm_css$Html_Styled$node('bdo');
var _rtfeldman$elm_css$Html_Styled$span = _rtfeldman$elm_css$Html_Styled$node('span');
var _rtfeldman$elm_css$Html_Styled$br = _rtfeldman$elm_css$Html_Styled$node('br');
var _rtfeldman$elm_css$Html_Styled$wbr = _rtfeldman$elm_css$Html_Styled$node('wbr');
var _rtfeldman$elm_css$Html_Styled$ins = _rtfeldman$elm_css$Html_Styled$node('ins');
var _rtfeldman$elm_css$Html_Styled$del = _rtfeldman$elm_css$Html_Styled$node('del');
var _rtfeldman$elm_css$Html_Styled$img = _rtfeldman$elm_css$Html_Styled$node('img');
var _rtfeldman$elm_css$Html_Styled$iframe = _rtfeldman$elm_css$Html_Styled$node('iframe');
var _rtfeldman$elm_css$Html_Styled$embed = _rtfeldman$elm_css$Html_Styled$node('embed');
var _rtfeldman$elm_css$Html_Styled$object = _rtfeldman$elm_css$Html_Styled$node('object');
var _rtfeldman$elm_css$Html_Styled$param = _rtfeldman$elm_css$Html_Styled$node('param');
var _rtfeldman$elm_css$Html_Styled$video = _rtfeldman$elm_css$Html_Styled$node('video');
var _rtfeldman$elm_css$Html_Styled$audio = _rtfeldman$elm_css$Html_Styled$node('audio');
var _rtfeldman$elm_css$Html_Styled$source = _rtfeldman$elm_css$Html_Styled$node('source');
var _rtfeldman$elm_css$Html_Styled$track = _rtfeldman$elm_css$Html_Styled$node('track');
var _rtfeldman$elm_css$Html_Styled$canvas = _rtfeldman$elm_css$Html_Styled$node('canvas');
var _rtfeldman$elm_css$Html_Styled$math = _rtfeldman$elm_css$Html_Styled$node('math');
var _rtfeldman$elm_css$Html_Styled$table = _rtfeldman$elm_css$Html_Styled$node('table');
var _rtfeldman$elm_css$Html_Styled$caption = _rtfeldman$elm_css$Html_Styled$node('caption');
var _rtfeldman$elm_css$Html_Styled$colgroup = _rtfeldman$elm_css$Html_Styled$node('colgroup');
var _rtfeldman$elm_css$Html_Styled$col = _rtfeldman$elm_css$Html_Styled$node('col');
var _rtfeldman$elm_css$Html_Styled$tbody = _rtfeldman$elm_css$Html_Styled$node('tbody');
var _rtfeldman$elm_css$Html_Styled$thead = _rtfeldman$elm_css$Html_Styled$node('thead');
var _rtfeldman$elm_css$Html_Styled$tfoot = _rtfeldman$elm_css$Html_Styled$node('tfoot');
var _rtfeldman$elm_css$Html_Styled$tr = _rtfeldman$elm_css$Html_Styled$node('tr');
var _rtfeldman$elm_css$Html_Styled$td = _rtfeldman$elm_css$Html_Styled$node('td');
var _rtfeldman$elm_css$Html_Styled$th = _rtfeldman$elm_css$Html_Styled$node('th');
var _rtfeldman$elm_css$Html_Styled$form = _rtfeldman$elm_css$Html_Styled$node('form');
var _rtfeldman$elm_css$Html_Styled$fieldset = _rtfeldman$elm_css$Html_Styled$node('fieldset');
var _rtfeldman$elm_css$Html_Styled$legend = _rtfeldman$elm_css$Html_Styled$node('legend');
var _rtfeldman$elm_css$Html_Styled$label = _rtfeldman$elm_css$Html_Styled$node('label');
var _rtfeldman$elm_css$Html_Styled$input = _rtfeldman$elm_css$Html_Styled$node('input');
var _rtfeldman$elm_css$Html_Styled$button = _rtfeldman$elm_css$Html_Styled$node('button');
var _rtfeldman$elm_css$Html_Styled$select = _rtfeldman$elm_css$Html_Styled$node('select');
var _rtfeldman$elm_css$Html_Styled$datalist = _rtfeldman$elm_css$Html_Styled$node('datalist');
var _rtfeldman$elm_css$Html_Styled$optgroup = _rtfeldman$elm_css$Html_Styled$node('optgroup');
var _rtfeldman$elm_css$Html_Styled$option = _rtfeldman$elm_css$Html_Styled$node('option');
var _rtfeldman$elm_css$Html_Styled$textarea = _rtfeldman$elm_css$Html_Styled$node('textarea');
var _rtfeldman$elm_css$Html_Styled$keygen = _rtfeldman$elm_css$Html_Styled$node('keygen');
var _rtfeldman$elm_css$Html_Styled$output = _rtfeldman$elm_css$Html_Styled$node('output');
var _rtfeldman$elm_css$Html_Styled$progress = _rtfeldman$elm_css$Html_Styled$node('progress');
var _rtfeldman$elm_css$Html_Styled$meter = _rtfeldman$elm_css$Html_Styled$node('meter');
var _rtfeldman$elm_css$Html_Styled$details = _rtfeldman$elm_css$Html_Styled$node('details');
var _rtfeldman$elm_css$Html_Styled$summary = _rtfeldman$elm_css$Html_Styled$node('summary');
var _rtfeldman$elm_css$Html_Styled$menuitem = _rtfeldman$elm_css$Html_Styled$node('menuitem');
var _rtfeldman$elm_css$Html_Styled$menu = _rtfeldman$elm_css$Html_Styled$node('menu');

var _rtfeldman$elm_css$Html_Styled_Attributes$css = _rtfeldman$elm_css$Html_Styled_Internal$css;
var _rtfeldman$elm_css$Html_Styled_Attributes$map = _rtfeldman$elm_css$VirtualDom_Styled$mapProperty;
var _rtfeldman$elm_css$Html_Styled_Attributes$attribute = _rtfeldman$elm_css$VirtualDom_Styled$attribute;
var _rtfeldman$elm_css$Html_Styled_Attributes$contextmenu = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'contextmenu', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$draggable = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'draggable', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$itemprop = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'itemprop', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$tabindex = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$charset = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'charset', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$height = function (value) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$width = function (value) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$formaction = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'formAction', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$list = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'list', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$minlength = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$maxlength = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$size = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$form = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'form', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$cols = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$rows = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$challenge = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'challenge', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$media = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'media', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$rel = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'rel', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$datetime = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'datetime', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$pubdate = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'pubdate', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$colspan = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$rowspan = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$manifest = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$attribute, 'manifest', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$property = _rtfeldman$elm_css$VirtualDom_Styled$property;
var _rtfeldman$elm_css$Html_Styled_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_rtfeldman$elm_css$Html_Styled_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _rtfeldman$elm_css$Html_Styled_Attributes$class = function (name) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'className', name);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$id = function (name) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'id', name);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$title = function (name) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'title', name);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$accesskey = function ($char) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$dir = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'dir', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$dropzone = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'dropzone', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$lang = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'lang', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$content = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'content', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$httpEquiv = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'httpEquiv', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$language = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'language', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$src = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'src', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$alt = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'alt', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$preload = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'preload', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$poster = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'poster', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$kind = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'kind', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$srclang = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'srclang', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$sandbox = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'sandbox', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$srcdoc = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'srcdoc', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$type_ = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'type', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$value = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'value', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$defaultValue = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'defaultValue', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$placeholder = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'placeholder', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$accept = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'accept', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$acceptCharset = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'acceptCharset', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$action = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'action', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$autocomplete = function (bool) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _rtfeldman$elm_css$Html_Styled_Attributes$enctype = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'enctype', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$method = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'method', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$name = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'name', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$pattern = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'pattern', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$for = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'htmlFor', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$max = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'max', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$min = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'min', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$step = function (n) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'step', n);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$wrap = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'wrap', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$usemap = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'useMap', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$shape = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'shape', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$coords = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'coords', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$keytype = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'keytype', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$align = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'align', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$cite = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'cite', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$href = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'href', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$target = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'target', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$downloadAs = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'download', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$hreflang = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'hreflang', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$ping = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'ping', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$start = function (n) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$headers = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'headers', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$scope = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$stringProperty, 'scope', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_rtfeldman$elm_css$Html_Styled_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _rtfeldman$elm_css$Html_Styled_Attributes$hidden = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'hidden', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$contenteditable = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'contentEditable', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$spellcheck = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'spellcheck', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$async = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'async', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$defer = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'defer', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$scoped = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'scoped', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$autoplay = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'autoplay', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$controls = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'controls', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$loop = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'loop', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$default = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'default', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$seamless = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'seamless', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$checked = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'checked', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$selected = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'selected', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$autofocus = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'autofocus', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$disabled = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'disabled', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$multiple = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'multiple', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$novalidate = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'noValidate', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$readonly = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'readOnly', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$required = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'required', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$ismap = function (value) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'isMap', value);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$download = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'download', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$reversed = function (bool) {
	return A2(_rtfeldman$elm_css$Html_Styled_Attributes$boolProperty, 'reversed', bool);
};
var _rtfeldman$elm_css$Html_Styled_Attributes$classList = function (list) {
	return _rtfeldman$elm_css$Html_Styled_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _rtfeldman$elm_css$Html_Styled_Attributes$fromUnstyled = _rtfeldman$elm_css$VirtualDom_Styled$unstyledProperty;
var _rtfeldman$elm_css$Html_Styled_Attributes$style = function (_p0) {
	return _rtfeldman$elm_css$Html_Styled_Attributes$fromUnstyled(
		_elm_lang$virtual_dom$VirtualDom$style(_p0));
};

var _rtfeldman$elm_css$Html_Styled_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _rtfeldman$elm_css$Html_Styled_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _rtfeldman$elm_css$Html_Styled_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _rtfeldman$elm_css$Html_Styled_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _rtfeldman$elm_css$Html_Styled_Events$onWithOptions = _rtfeldman$elm_css$VirtualDom_Styled$onWithOptions;
var _rtfeldman$elm_css$Html_Styled_Events$on = _rtfeldman$elm_css$VirtualDom_Styled$on;
var _rtfeldman$elm_css$Html_Styled_Events$onFocus = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onBlur = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_rtfeldman$elm_css$Html_Styled_Events$defaultOptions,
	{preventDefault: true});
var _rtfeldman$elm_css$Html_Styled_Events$onSubmit = function (msg) {
	return A3(
		_rtfeldman$elm_css$Html_Styled_Events$onWithOptions,
		'submit',
		_rtfeldman$elm_css$Html_Styled_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onCheck = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _rtfeldman$elm_css$Html_Styled_Events$targetChecked));
};
var _rtfeldman$elm_css$Html_Styled_Events$onInput = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _rtfeldman$elm_css$Html_Styled_Events$targetValue));
};
var _rtfeldman$elm_css$Html_Styled_Events$onMouseOut = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onMouseOver = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onMouseLeave = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onMouseEnter = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onMouseUp = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onMouseDown = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onDoubleClick = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$onClick = function (msg) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _rtfeldman$elm_css$Html_Styled_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _inkuzmin$elm_multiselect$Multiselect_Keycodes$tab = 9;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$backspace = 8;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$end = 35;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$home = 36;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$pageDown = 34;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$pageUp = 33;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$downArrow = 40;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$upArrow = 38;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$escape = 27;
var _inkuzmin$elm_multiselect$Multiselect_Keycodes$return = 13;

var _rtfeldman$elm_css$Css_Media$unparameterizedFeature = function (key) {
	return {feature: key, value: _elm_lang$core$Maybe$Nothing};
};
var _rtfeldman$elm_css$Css_Media$feature = F2(
	function (key, _p0) {
		var _p1 = _p0;
		return {
			feature: key,
			value: _elm_lang$core$Maybe$Just(_p1.value)
		};
	});
var _rtfeldman$elm_css$Css_Media$scripting = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'scripting', value);
};
var _rtfeldman$elm_css$Css_Media$enabled = {value: 'enabled', scriptingSupport: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$initialOnly = {value: 'initial-only', scriptingSupport: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$anyHover = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'any-hover', value);
};
var _rtfeldman$elm_css$Css_Media$hover = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'hover', value);
};
var _rtfeldman$elm_css$Css_Media$canHover = {value: 'hover', hoverCapability: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$anyPointer = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'any-pointer', value);
};
var _rtfeldman$elm_css$Css_Media$pointer = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'pointer', value);
};
var _rtfeldman$elm_css$Css_Media$coarse = {value: 'coarse', pointerDevice: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$fine = {value: 'fine', pointerDevice: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$colorGamut = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'color-gamut', value);
};
var _rtfeldman$elm_css$Css_Media$rec2020 = {value: 'rec2020', colorGamut: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$p3 = {value: 'p3', colorGamut: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$srgb = {value: 'srgb', colorGamut: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$maxColorIndex = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-color-index', value);
};
var _rtfeldman$elm_css$Css_Media$minColorIndex = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-color-index', value);
};
var _rtfeldman$elm_css$Css_Media$colorIndex = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'color-index', value);
};
var _rtfeldman$elm_css$Css_Media$maxMonochrome = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-monochrome', value);
};
var _rtfeldman$elm_css$Css_Media$minMonochrome = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-monochrome', value);
};
var _rtfeldman$elm_css$Css_Media$monochrome = _rtfeldman$elm_css$Css_Media$unparameterizedFeature('monochrome');
var _rtfeldman$elm_css$Css_Media$maxColor = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-color', value);
};
var _rtfeldman$elm_css$Css_Media$color = _rtfeldman$elm_css$Css_Media$unparameterizedFeature('color');
var _rtfeldman$elm_css$Css_Media$minColor = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-color', value);
};
var _rtfeldman$elm_css$Css_Media$bits = function (value) {
	return {
		value: _elm_lang$core$Basics$toString(value),
		bits: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css_Media$overflowInline = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'overflow-inline', value);
};
var _rtfeldman$elm_css$Css_Media$overflowBlock = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'overflow-block', value);
};
var _rtfeldman$elm_css$Css_Media$optionalPaged = {value: 'optional-paged', blockAxisOverflow: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$paged = {value: 'paged', blockAxisOverflow: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$update = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'update', value);
};
var _rtfeldman$elm_css$Css_Media$fast = {value: 'fast', updateFrequency: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$slow = {value: 'slow', updateFrequency: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$grid = _rtfeldman$elm_css$Css_Media$unparameterizedFeature('grid');
var _rtfeldman$elm_css$Css_Media$scan = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'scan', value);
};
var _rtfeldman$elm_css$Css_Media$interlace = {value: 'interlace', scanningProcess: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$progressive = {value: 'progressive', scanningProcess: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$maxResolution = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-resolution', value);
};
var _rtfeldman$elm_css$Css_Media$resolution = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'resolution', value);
};
var _rtfeldman$elm_css$Css_Media$minResolution = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-resolution', value);
};
var _rtfeldman$elm_css$Css_Media$dppx = function (value) {
	return {
		value: A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(value),
			'dppx'),
		resolution: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css_Media$dpcm = function (value) {
	return {
		value: A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(value),
			'dpcm'),
		resolution: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css_Media$dpi = function (value) {
	return {
		value: A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(value),
			'dpi'),
		resolution: _rtfeldman$elm_css$Css_Structure$Compatible
	};
};
var _rtfeldman$elm_css$Css_Media$orientation = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'orientation', value);
};
var _rtfeldman$elm_css$Css_Media$portrait = {value: 'portrait', orientation: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$landscape = {value: 'landscape', orientation: _rtfeldman$elm_css$Css_Structure$Compatible};
var _rtfeldman$elm_css$Css_Media$maxAspectRatio = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-aspect-ratio', value);
};
var _rtfeldman$elm_css$Css_Media$aspectRatio = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'aspect-ratio', value);
};
var _rtfeldman$elm_css$Css_Media$minAspectRatio = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-aspect-ratio', value);
};
var _rtfeldman$elm_css$Css_Media$ratio = F2(
	function (numerator, denominator) {
		return {
			value: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(numerator),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/',
					_elm_lang$core$Basics$toString(denominator))),
			ratio: _rtfeldman$elm_css$Css_Structure$Compatible
		};
	});
var _rtfeldman$elm_css$Css_Media$maxHeight = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-height', value);
};
var _rtfeldman$elm_css$Css_Media$height = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'height', value);
};
var _rtfeldman$elm_css$Css_Media$minHeight = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-height', value);
};
var _rtfeldman$elm_css$Css_Media$maxWidth = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'max-width', value);
};
var _rtfeldman$elm_css$Css_Media$width = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'width', value);
};
var _rtfeldman$elm_css$Css_Media$minWidth = function (value) {
	return A2(_rtfeldman$elm_css$Css_Media$feature, 'min-width', value);
};
var _rtfeldman$elm_css$Css_Media$speech = _rtfeldman$elm_css$Css_Structure$Speech;
var _rtfeldman$elm_css$Css_Media$screen = _rtfeldman$elm_css$Css_Structure$Screen;
var _rtfeldman$elm_css$Css_Media$print = _rtfeldman$elm_css$Css_Structure$Print;
var _rtfeldman$elm_css$Css_Media$connectWith = F2(
	function (connect, queries) {
		var _p2 = queries;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p4 = _p2._0;
			var _p3 = A2(_rtfeldman$elm_css$Css_Media$connectWith, connect, _p2._1);
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(_p4);
			} else {
				return _elm_lang$core$Maybe$Just(
					A2(connect, _p4, _p3._0));
			}
		}
	});
var _rtfeldman$elm_css$Css_Media$not = _rtfeldman$elm_css$Css_Structure$NotQuery;
var _rtfeldman$elm_css$Css_Media$only = _rtfeldman$elm_css$Css_Structure$OnlyQuery;
var _rtfeldman$elm_css$Css_Media$all = _rtfeldman$elm_css$Css_Structure$AllQuery;
var _rtfeldman$elm_css$Css_Media$withMediaQuery = function (queries) {
	return _rtfeldman$elm_css$Css_Preprocess$WithMedia(
		A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure$CustomQuery, queries));
};
var _rtfeldman$elm_css$Css_Media$withMedia = function (queries) {
	return _rtfeldman$elm_css$Css_Preprocess$WithMedia(queries);
};
var _rtfeldman$elm_css$Css_Media$Ratio = F2(
	function (a, b) {
		return {value: a, ratio: b};
	});
var _rtfeldman$elm_css$Css_Media$Landscape = F2(
	function (a, b) {
		return {value: a, orientation: b};
	});
var _rtfeldman$elm_css$Css_Media$Portrait = F2(
	function (a, b) {
		return {value: a, orientation: b};
	});
var _rtfeldman$elm_css$Css_Media$Resolution = F2(
	function (a, b) {
		return {value: a, resolution: b};
	});
var _rtfeldman$elm_css$Css_Media$Progressive = F2(
	function (a, b) {
		return {value: a, scanningProcess: b};
	});
var _rtfeldman$elm_css$Css_Media$Interlace = F2(
	function (a, b) {
		return {value: a, scanningProcess: b};
	});
var _rtfeldman$elm_css$Css_Media$Slow = F2(
	function (a, b) {
		return {value: a, updateFrequency: b};
	});
var _rtfeldman$elm_css$Css_Media$Fast = F2(
	function (a, b) {
		return {value: a, updateFrequency: b};
	});
var _rtfeldman$elm_css$Css_Media$Paged = F2(
	function (a, b) {
		return {value: a, blockAxisOverflow: b};
	});
var _rtfeldman$elm_css$Css_Media$OptionalPaged = F2(
	function (a, b) {
		return {value: a, blockAxisOverflow: b};
	});
var _rtfeldman$elm_css$Css_Media$Bits = F2(
	function (a, b) {
		return {value: a, bits: b};
	});
var _rtfeldman$elm_css$Css_Media$SRGB = F2(
	function (a, b) {
		return {value: a, colorGamut: b};
	});
var _rtfeldman$elm_css$Css_Media$P3 = F2(
	function (a, b) {
		return {value: a, colorGamut: b};
	});
var _rtfeldman$elm_css$Css_Media$Rec2020 = F2(
	function (a, b) {
		return {value: a, colorGamut: b};
	});
var _rtfeldman$elm_css$Css_Media$Fine = F2(
	function (a, b) {
		return {value: a, pointerDevice: b};
	});
var _rtfeldman$elm_css$Css_Media$Coarse = F2(
	function (a, b) {
		return {value: a, pointerDevice: b};
	});
var _rtfeldman$elm_css$Css_Media$CanHover = F2(
	function (a, b) {
		return {value: a, hoverCapability: b};
	});
var _rtfeldman$elm_css$Css_Media$InitialOnly = F2(
	function (a, b) {
		return {value: a, scriptingSupport: b};
	});
var _rtfeldman$elm_css$Css_Media$Enabled = F2(
	function (a, b) {
		return {value: a, scriptingSupport: b};
	});

var _rtfeldman$elm_css$Css_Foreign$collectSelectors = function (declarations) {
	collectSelectors:
	while (true) {
		var _p0 = declarations;
		if (_p0.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			if (_p0._0.ctor === 'StyleBlockDeclaration') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(_rtfeldman$elm_css$Css_Foreign$unwrapSelector, _p0._0._0._0, _p0._0._0._2),
						_1: _p0._0._0._1
					},
					_rtfeldman$elm_css$Css_Foreign$collectSelectors(_p0._1));
			} else {
				var _v1 = _p0._1;
				declarations = _v1;
				continue collectSelectors;
			}
		}
	}
};
var _rtfeldman$elm_css$Css_Foreign$unwrapSelector = F2(
	function (_p1, styles) {
		var _p2 = _p1;
		var unwrapCombinatorSelector = F2(
			function (style, cs) {
				var _p3 = style;
				if (_p3.ctor === 'NestSnippet') {
					return A2(
						_elm_lang$core$List$append,
						cs,
						A2(
							_elm_lang$core$List$map,
							function (_p4) {
								var _p5 = _p4;
								return {ctor: '_Tuple2', _0: _p3._0, _1: _p5._0};
							},
							A2(
								_elm_lang$core$List$concatMap,
								function (_p6) {
									return _rtfeldman$elm_css$Css_Foreign$collectSelectors(
										_rtfeldman$elm_css$Css_Preprocess$unwrapSnippet(_p6));
								},
								_p3._1)));
				} else {
					return cs;
				}
			});
		var unwrapSequenceSelector = F2(
			function (style, s) {
				var _p7 = style;
				if (_p7.ctor === 'ExtendSelector') {
					return A3(
						_elm_lang$core$List$foldr,
						unwrapSequenceSelector,
						A2(_rtfeldman$elm_css$Css_Structure$appendRepeatable, _p7._0, s),
						_p7._1);
				} else {
					return s;
				}
			});
		return A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			A3(_elm_lang$core$List$foldr, unwrapSequenceSelector, _p2._0, styles),
			A3(_elm_lang$core$List$foldr, unwrapCombinatorSelector, _p2._1, styles),
			_p2._2);
	});
var _rtfeldman$elm_css$Css_Foreign$typeSelector = F2(
	function (selectorStr, styles) {
		var sequence = A2(
			_rtfeldman$elm_css$Css_Structure$TypeSelectorSequence,
			_rtfeldman$elm_css$Css_Structure$TypeSelector(selectorStr),
			{ctor: '[]'});
		var selector = A3(
			_rtfeldman$elm_css$Css_Structure$Selector,
			sequence,
			{ctor: '[]'},
			_elm_lang$core$Maybe$Nothing);
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
					A3(
						_rtfeldman$elm_css$Css_Preprocess$StyleBlock,
						selector,
						{ctor: '[]'},
						styles)),
				_1: {ctor: '[]'}
			});
	});
var _rtfeldman$elm_css$Css_Foreign$html = _rtfeldman$elm_css$Css_Foreign$typeSelector('html');
var _rtfeldman$elm_css$Css_Foreign$body = _rtfeldman$elm_css$Css_Foreign$typeSelector('body');
var _rtfeldman$elm_css$Css_Foreign$article = _rtfeldman$elm_css$Css_Foreign$typeSelector('article');
var _rtfeldman$elm_css$Css_Foreign$header = _rtfeldman$elm_css$Css_Foreign$typeSelector('header');
var _rtfeldman$elm_css$Css_Foreign$footer = _rtfeldman$elm_css$Css_Foreign$typeSelector('footer');
var _rtfeldman$elm_css$Css_Foreign$h1 = _rtfeldman$elm_css$Css_Foreign$typeSelector('h1');
var _rtfeldman$elm_css$Css_Foreign$h2 = _rtfeldman$elm_css$Css_Foreign$typeSelector('h2');
var _rtfeldman$elm_css$Css_Foreign$h3 = _rtfeldman$elm_css$Css_Foreign$typeSelector('h3');
var _rtfeldman$elm_css$Css_Foreign$h4 = _rtfeldman$elm_css$Css_Foreign$typeSelector('h4');
var _rtfeldman$elm_css$Css_Foreign$h5 = _rtfeldman$elm_css$Css_Foreign$typeSelector('h5');
var _rtfeldman$elm_css$Css_Foreign$h6 = _rtfeldman$elm_css$Css_Foreign$typeSelector('h6');
var _rtfeldman$elm_css$Css_Foreign$nav = _rtfeldman$elm_css$Css_Foreign$typeSelector('nav');
var _rtfeldman$elm_css$Css_Foreign$menu = _rtfeldman$elm_css$Css_Foreign$typeSelector('menu');
var _rtfeldman$elm_css$Css_Foreign$section = _rtfeldman$elm_css$Css_Foreign$typeSelector('section');
var _rtfeldman$elm_css$Css_Foreign$aside = _rtfeldman$elm_css$Css_Foreign$typeSelector('aside');
var _rtfeldman$elm_css$Css_Foreign$time = _rtfeldman$elm_css$Css_Foreign$typeSelector('time');
var _rtfeldman$elm_css$Css_Foreign$div = _rtfeldman$elm_css$Css_Foreign$typeSelector('div');
var _rtfeldman$elm_css$Css_Foreign$hr = _rtfeldman$elm_css$Css_Foreign$typeSelector('hr');
var _rtfeldman$elm_css$Css_Foreign$li = _rtfeldman$elm_css$Css_Foreign$typeSelector('li');
var _rtfeldman$elm_css$Css_Foreign$main_ = _rtfeldman$elm_css$Css_Foreign$typeSelector('main');
var _rtfeldman$elm_css$Css_Foreign$ol = _rtfeldman$elm_css$Css_Foreign$typeSelector('ol');
var _rtfeldman$elm_css$Css_Foreign$p = _rtfeldman$elm_css$Css_Foreign$typeSelector('p');
var _rtfeldman$elm_css$Css_Foreign$ul = _rtfeldman$elm_css$Css_Foreign$typeSelector('ul');
var _rtfeldman$elm_css$Css_Foreign$pre = _rtfeldman$elm_css$Css_Foreign$typeSelector('pre');
var _rtfeldman$elm_css$Css_Foreign$dl = _rtfeldman$elm_css$Css_Foreign$typeSelector('dl');
var _rtfeldman$elm_css$Css_Foreign$dt = _rtfeldman$elm_css$Css_Foreign$typeSelector('dt');
var _rtfeldman$elm_css$Css_Foreign$dd = _rtfeldman$elm_css$Css_Foreign$typeSelector('dd');
var _rtfeldman$elm_css$Css_Foreign$a = _rtfeldman$elm_css$Css_Foreign$typeSelector('a');
var _rtfeldman$elm_css$Css_Foreign$code = _rtfeldman$elm_css$Css_Foreign$typeSelector('code');
var _rtfeldman$elm_css$Css_Foreign$small = _rtfeldman$elm_css$Css_Foreign$typeSelector('small');
var _rtfeldman$elm_css$Css_Foreign$span = _rtfeldman$elm_css$Css_Foreign$typeSelector('span');
var _rtfeldman$elm_css$Css_Foreign$strong = _rtfeldman$elm_css$Css_Foreign$typeSelector('strong');
var _rtfeldman$elm_css$Css_Foreign$i = _rtfeldman$elm_css$Css_Foreign$typeSelector('i');
var _rtfeldman$elm_css$Css_Foreign$em = _rtfeldman$elm_css$Css_Foreign$typeSelector('em');
var _rtfeldman$elm_css$Css_Foreign$q = _rtfeldman$elm_css$Css_Foreign$typeSelector('q');
var _rtfeldman$elm_css$Css_Foreign$img = _rtfeldman$elm_css$Css_Foreign$typeSelector('img');
var _rtfeldman$elm_css$Css_Foreign$audio = _rtfeldman$elm_css$Css_Foreign$typeSelector('audio');
var _rtfeldman$elm_css$Css_Foreign$video = _rtfeldman$elm_css$Css_Foreign$typeSelector('video');
var _rtfeldman$elm_css$Css_Foreign$canvas = _rtfeldman$elm_css$Css_Foreign$typeSelector('canvas');
var _rtfeldman$elm_css$Css_Foreign$caption = _rtfeldman$elm_css$Css_Foreign$typeSelector('caption');
var _rtfeldman$elm_css$Css_Foreign$col = _rtfeldman$elm_css$Css_Foreign$typeSelector('col');
var _rtfeldman$elm_css$Css_Foreign$colgroup = _rtfeldman$elm_css$Css_Foreign$typeSelector('colgroup');
var _rtfeldman$elm_css$Css_Foreign$table = _rtfeldman$elm_css$Css_Foreign$typeSelector('table');
var _rtfeldman$elm_css$Css_Foreign$tbody = _rtfeldman$elm_css$Css_Foreign$typeSelector('tbody');
var _rtfeldman$elm_css$Css_Foreign$td = _rtfeldman$elm_css$Css_Foreign$typeSelector('td');
var _rtfeldman$elm_css$Css_Foreign$tfoot = _rtfeldman$elm_css$Css_Foreign$typeSelector('tfoot');
var _rtfeldman$elm_css$Css_Foreign$th = _rtfeldman$elm_css$Css_Foreign$typeSelector('th');
var _rtfeldman$elm_css$Css_Foreign$thead = _rtfeldman$elm_css$Css_Foreign$typeSelector('thead');
var _rtfeldman$elm_css$Css_Foreign$tr = _rtfeldman$elm_css$Css_Foreign$typeSelector('tr');
var _rtfeldman$elm_css$Css_Foreign$button = _rtfeldman$elm_css$Css_Foreign$typeSelector('button');
var _rtfeldman$elm_css$Css_Foreign$fieldset = _rtfeldman$elm_css$Css_Foreign$typeSelector('fieldset');
var _rtfeldman$elm_css$Css_Foreign$form = _rtfeldman$elm_css$Css_Foreign$typeSelector('form');
var _rtfeldman$elm_css$Css_Foreign$input = _rtfeldman$elm_css$Css_Foreign$typeSelector('input');
var _rtfeldman$elm_css$Css_Foreign$label = _rtfeldman$elm_css$Css_Foreign$typeSelector('label');
var _rtfeldman$elm_css$Css_Foreign$legend = _rtfeldman$elm_css$Css_Foreign$typeSelector('legend');
var _rtfeldman$elm_css$Css_Foreign$optgroup = _rtfeldman$elm_css$Css_Foreign$typeSelector('optgroup');
var _rtfeldman$elm_css$Css_Foreign$option = _rtfeldman$elm_css$Css_Foreign$typeSelector('option');
var _rtfeldman$elm_css$Css_Foreign$progress = _rtfeldman$elm_css$Css_Foreign$typeSelector('progress');
var _rtfeldman$elm_css$Css_Foreign$select = _rtfeldman$elm_css$Css_Foreign$typeSelector('select');
var _rtfeldman$elm_css$Css_Foreign$textarea = _rtfeldman$elm_css$Css_Foreign$typeSelector('textarea');
var _rtfeldman$elm_css$Css_Foreign$blockquote = _rtfeldman$elm_css$Css_Foreign$typeSelector('blockquote');
var _rtfeldman$elm_css$Css_Foreign$svg = _rtfeldman$elm_css$Css_Foreign$typeSelector('svg');
var _rtfeldman$elm_css$Css_Foreign$path = _rtfeldman$elm_css$Css_Foreign$typeSelector('path');
var _rtfeldman$elm_css$Css_Foreign$rect = _rtfeldman$elm_css$Css_Foreign$typeSelector('rect');
var _rtfeldman$elm_css$Css_Foreign$circle = _rtfeldman$elm_css$Css_Foreign$typeSelector('circle');
var _rtfeldman$elm_css$Css_Foreign$ellipse = _rtfeldman$elm_css$Css_Foreign$typeSelector('ellipse');
var _rtfeldman$elm_css$Css_Foreign$line = _rtfeldman$elm_css$Css_Foreign$typeSelector('line');
var _rtfeldman$elm_css$Css_Foreign$polyline = _rtfeldman$elm_css$Css_Foreign$typeSelector('polyline');
var _rtfeldman$elm_css$Css_Foreign$polygon = _rtfeldman$elm_css$Css_Foreign$typeSelector('polygon');
var _rtfeldman$elm_css$Css_Foreign$each = F2(
	function (snippetCreators, styles) {
		var selectorsToSnippet = function (selectors) {
			var _p8 = selectors;
			if (_p8.ctor === '[]') {
				return _rtfeldman$elm_css$Css_Preprocess$Snippet(
					{ctor: '[]'});
			} else {
				return _rtfeldman$elm_css$Css_Preprocess$Snippet(
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Css_Preprocess$StyleBlockDeclaration(
							A3(_rtfeldman$elm_css$Css_Preprocess$StyleBlock, _p8._0, _p8._1, styles)),
						_1: {ctor: '[]'}
					});
			}
		};
		return selectorsToSnippet(
			_rtfeldman$elm_css$Css_Foreign$collectSelectors(
				A2(
					_elm_lang$core$List$concatMap,
					_rtfeldman$elm_css$Css_Preprocess$unwrapSnippet,
					A2(
						_elm_lang$core$List$map,
						F2(
							function (x, y) {
								return y(x);
							})(
							{ctor: '[]'}),
						snippetCreators))));
	});
var _rtfeldman$elm_css$Css_Foreign$generalSiblings = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$GeneralSibling);
var _rtfeldman$elm_css$Css_Foreign$adjacentSiblings = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$AdjacentSibling);
var _rtfeldman$elm_css$Css_Foreign$descendants = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$Descendant);
var _rtfeldman$elm_css$Css_Foreign$withClass = function ($class) {
	return _rtfeldman$elm_css$Css_Preprocess$ExtendSelector(
		_rtfeldman$elm_css$Css_Structure$ClassSelector(
			A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', $class)));
};
var _rtfeldman$elm_css$Css_Foreign$children = _rtfeldman$elm_css$Css_Preprocess$NestSnippet(_rtfeldman$elm_css$Css_Structure$Child);
var _rtfeldman$elm_css$Css_Foreign$media = F2(
	function (queries, snippets) {
		var nestedMediaRules = function (declarations) {
			nestedMediaRules:
			while (true) {
				var _p9 = declarations;
				if (_p9.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					switch (_p9._0.ctor) {
						case 'StyleBlockDeclaration':
							var _v8 = _p9._1;
							declarations = _v8;
							continue nestedMediaRules;
						case 'MediaRule':
							return {
								ctor: '::',
								_0: A2(
									_rtfeldman$elm_css$Css_Preprocess$MediaRule,
									A2(_elm_lang$core$List$append, queries, _p9._0._0),
									_p9._0._1),
								_1: nestedMediaRules(_p9._1)
							};
						default:
							return {
								ctor: '::',
								_0: _p9._0,
								_1: nestedMediaRules(_p9._1)
							};
					}
				}
			}
		};
		var extractStyleBlocks = function (declarations) {
			extractStyleBlocks:
			while (true) {
				var _p10 = declarations;
				if (_p10.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					if (_p10._0.ctor === 'StyleBlockDeclaration') {
						return {
							ctor: '::',
							_0: _p10._0._0,
							_1: extractStyleBlocks(_p10._1)
						};
					} else {
						var _v10 = _p10._1;
						declarations = _v10;
						continue extractStyleBlocks;
					}
				}
			}
		};
		var snippetDeclarations = A2(_elm_lang$core$List$concatMap, _rtfeldman$elm_css$Css_Preprocess$unwrapSnippet, snippets);
		var mediaRuleFromStyleBlocks = A2(
			_rtfeldman$elm_css$Css_Preprocess$MediaRule,
			queries,
			extractStyleBlocks(snippetDeclarations));
		return _rtfeldman$elm_css$Css_Preprocess$Snippet(
			{
				ctor: '::',
				_0: mediaRuleFromStyleBlocks,
				_1: nestedMediaRules(snippetDeclarations)
			});
	});
var _rtfeldman$elm_css$Css_Foreign$mediaQuery = F2(
	function (stringQueries, snippets) {
		return A2(
			_rtfeldman$elm_css$Css_Foreign$media,
			A2(_elm_lang$core$List$map, _rtfeldman$elm_css$Css_Structure$CustomQuery, stringQueries),
			snippets);
	});
var _rtfeldman$elm_css$Css_Foreign$everything = function (styles) {
	return A2(
		_rtfeldman$elm_css$VirtualDom_Styled$makeSnippet,
		styles,
		_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
			{ctor: '[]'}));
};
var _rtfeldman$elm_css$Css_Foreign$selector = F2(
	function (selectorStr, styles) {
		return A2(
			_rtfeldman$elm_css$VirtualDom_Styled$makeSnippet,
			styles,
			A2(
				_rtfeldman$elm_css$Css_Structure$CustomSelector,
				selectorStr,
				{ctor: '[]'}));
	});
var _rtfeldman$elm_css$Css_Foreign$class = F2(
	function ($class, styles) {
		return A2(
			_rtfeldman$elm_css$VirtualDom_Styled$makeSnippet,
			styles,
			_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css_Structure$ClassSelector(
						A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', $class)),
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css_Foreign$id = F2(
	function (identifier, styles) {
		return A2(
			_rtfeldman$elm_css$VirtualDom_Styled$makeSnippet,
			styles,
			_rtfeldman$elm_css$Css_Structure$UniversalSelectorSequence(
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Css_Structure$IdSelector(
						A2(_rtfeldman$elm_css_util$Css_Helpers$identifierToString, '', identifier)),
					_1: {ctor: '[]'}
				}));
	});
var _rtfeldman$elm_css$Css_Foreign$global = function (snippets) {
	return _rtfeldman$elm_css$VirtualDom_Styled$unstyledNode(
		A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			'style',
			{ctor: '[]'},
			_elm_lang$core$List$singleton(
				_elm_lang$virtual_dom$VirtualDom$text(
					function (_) {
						return _.css;
					}(
						_rtfeldman$elm_css$Css_Preprocess_Resolve$compile(
							_elm_lang$core$List$singleton(
								_rtfeldman$elm_css$Css_Preprocess$stylesheet(snippets))))))));
};

var _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItemHovered = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$backgroundColor(
			A4(_rtfeldman$elm_css$Css$rgba, 0, 126, 255, 8.0e-2)),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$color(
				_rtfeldman$elm_css$Css$hex('#333')),
			_1: {ctor: '[]'}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrowUpside = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: A3(
			_rtfeldman$elm_css$Css$borderColor3,
			_rtfeldman$elm_css$Css$transparent,
			_rtfeldman$elm_css$Css$transparent,
			_rtfeldman$elm_css$Css$hex('#999')),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$borderStyle(_rtfeldman$elm_css$Css$solid),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$borderTopWidth(
					_rtfeldman$elm_css$Css$px(2.5)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$borderLeftWidth(
						_rtfeldman$elm_css$Css$px(5)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$borderRightWidth(
							_rtfeldman$elm_css$Css$px(5)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$borderBottomWidth(
								_rtfeldman$elm_css$Css$px(5)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$height(_rtfeldman$elm_css$Css$zero),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$width(_rtfeldman$elm_css$Css$zero),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$top(
													_rtfeldman$elm_css$Css$px(-2.5)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrow = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: A3(
			_rtfeldman$elm_css$Css$borderColor3,
			_rtfeldman$elm_css$Css$hex('#999'),
			_rtfeldman$elm_css$Css$transparent,
			_rtfeldman$elm_css$Css$transparent),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$borderStyle(_rtfeldman$elm_css$Css$solid),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$borderTopWidth(
					_rtfeldman$elm_css$Css$px(5)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$borderLeftWidth(
						_rtfeldman$elm_css$Css$px(5)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$borderRightWidth(
							_rtfeldman$elm_css$Css$px(5)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$borderBottomWidth(
								_rtfeldman$elm_css$Css$px(2.5)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$height(_rtfeldman$elm_css$Css$zero),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$width(_rtfeldman$elm_css$Css$zero),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrowWrap = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$cursor(_rtfeldman$elm_css$Css$pointer),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$tableCell),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$verticalAlign(_rtfeldman$elm_css$Css$middle),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$width(
								_rtfeldman$elm_css$Css$px(25)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$paddingRight(
									_rtfeldman$elm_css$Css$px(5)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$hover(
										{
											ctor: '::',
											_0: _rtfeldman$elm_css$Css_Foreign$children(
												{
													ctor: '::',
													_0: A2(
														_rtfeldman$elm_css$Css_Foreign$selector,
														'*[rel=arrow]',
														{
															ctor: '::',
															_0: _rtfeldman$elm_css$Css$borderTopColor(
																_rtfeldman$elm_css$Css$hex('#666')),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_rtfeldman$elm_css$Css_Foreign$selector,
															'*[rel=arrowUpside]',
															{
																ctor: '::',
																_0: _rtfeldman$elm_css$Css$borderBottomColor(
																	_rtfeldman$elm_css$Css$hex('#666')),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$clear = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$fontSize(
				_rtfeldman$elm_css$Css$px(18)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$lineHeight(
					_rtfeldman$elm_css$Css$num(1)),
				_1: {ctor: '[]'}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$clearWrap = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$width(
			_rtfeldman$elm_css$Css$px(17)),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$color(
				_rtfeldman$elm_css$Css$hex('#999')),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$cursor(_rtfeldman$elm_css$Css$pointer),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$tableCell),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$textAlign(_rtfeldman$elm_css$Css$center),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$verticalAlign(_rtfeldman$elm_css$Css$middle),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$hover(
										{
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$color(
												_rtfeldman$elm_css$Css$hex('#D0021B')),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagLabel = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: A2(
			_rtfeldman$elm_css$Css$padding2,
			_rtfeldman$elm_css$Css$px(2),
			_rtfeldman$elm_css$Css$px(5)),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$verticalAlign(_rtfeldman$elm_css$Css$middle),
				_1: {ctor: '[]'}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagIcon = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$hover(
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$backgroundColor(
					_rtfeldman$elm_css$Css$hex('#d8eafd')),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$cursor(_rtfeldman$elm_css$Css$pointer),
			_1: {
				ctor: '::',
				_0: A3(
					_rtfeldman$elm_css$Css$borderRight3,
					_rtfeldman$elm_css$Css$px(1),
					_rtfeldman$elm_css$Css$solid,
					A4(_rtfeldman$elm_css$Css$rgba, 0, 126, 255, 0.24)),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css$padding3,
						_rtfeldman$elm_css$Css$px(1),
						_rtfeldman$elm_css$Css$px(5),
						_rtfeldman$elm_css$Css$px(3)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$verticalAlign(_rtfeldman$elm_css$Css$middle),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$tag = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$color(
			_rtfeldman$elm_css$Css$hex('#007eff')),
		_1: {
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Css$border2,
				_rtfeldman$elm_css$Css$px(1),
				_rtfeldman$elm_css$Css$solid),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$borderColor(
					A4(_rtfeldman$elm_css$Css$rgba, 0, 126, 255, 0.24)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$borderRadius(
						_rtfeldman$elm_css$Css$px(2)),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$backgroundColor(
							A4(_rtfeldman$elm_css$Css$rgba, 0, 126, 255, 8.0e-2)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$fontSize(
									_rtfeldman$elm_css$Css$em(0.9)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$lineHeight(
										_rtfeldman$elm_css$Css$num(1.4)),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$marginLeft(
											_rtfeldman$elm_css$Css$px(5)),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$marginTop(
												_rtfeldman$elm_css$Css$px(5)),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$verticalAlign(_rtfeldman$elm_css$Css$top),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagWrap = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inline),
		_1: {ctor: '[]'}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$opened = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$borderBottomLeftRadius(_rtfeldman$elm_css$Css$zero),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$borderBottomRightRadius(_rtfeldman$elm_css$Css$zero),
			_1: {ctor: '[]'}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$inputMirrow = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$top(
				_rtfeldman$elm_css$Css$px(-100)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$left(
					_rtfeldman$elm_css$Css$px(-100)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$height(_rtfeldman$elm_css$Css$zero),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$overflow(_rtfeldman$elm_css$Css$scroll),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$fontWeight(_rtfeldman$elm_css$Css$normal),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$fontStyle(_rtfeldman$elm_css$Css$normal),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$fontSize(_rtfeldman$elm_css$Css$inherit),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$lineHeight(
											_rtfeldman$elm_css$Css$int(1)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$input = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$borderStyle(_rtfeldman$elm_css$Css$none),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$border(_rtfeldman$elm_css$Css$zero),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$lineHeight(
					_rtfeldman$elm_css$Css$px(14)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$outlineStyle(_rtfeldman$elm_css$Css$none),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$fontSize(_rtfeldman$elm_css$Css$inherit),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$lineHeight(
								_rtfeldman$elm_css$Css$int(1)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$padding(_rtfeldman$elm_css$Css$zero),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$paddingTop(
										_rtfeldman$elm_css$Css$px(8)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$inputWrap = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$inlineBlock),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$marginLeft(
				_rtfeldman$elm_css$Css$px(5)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$padding(_rtfeldman$elm_css$Css$zero),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$verticalAlign(_rtfeldman$elm_css$Css$middle),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$paddingBottom(
							_rtfeldman$elm_css$Css$px(8)),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$container = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: A3(
			_rtfeldman$elm_css$Css$border3,
			_rtfeldman$elm_css$Css$px(1),
			_rtfeldman$elm_css$Css$solid,
			_rtfeldman$elm_css$Css$hex('#ccc')),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$borderRadius(
				_rtfeldman$elm_css$Css$px(4)),
			_1: {
				ctor: '::',
				_0: A3(
					_rtfeldman$elm_css$Css$borderColor3,
					_rtfeldman$elm_css$Css$hex('#d9d9d9'),
					_rtfeldman$elm_css$Css$hex('#ccc'),
					_rtfeldman$elm_css$Css$hex('#b3b3b3')),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$backgroundColor(
						_rtfeldman$elm_css$Css$hex('#fff')),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$color(
							_rtfeldman$elm_css$Css$hex('#333')),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Css$height(
								_rtfeldman$elm_css$Css$px(34)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$width(
									_rtfeldman$elm_css$Css$pct(100)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$display(_rtfeldman$elm_css$Css$table),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$wrap = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$relative),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$width(
				_rtfeldman$elm_css$Css$pct(100)),
			_1: {ctor: '[]'}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuHeight = 200;
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$menu = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$borderBottomRightRadius(
			_rtfeldman$elm_css$Css$px(4)),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$borderBottomLeftRadius(
				_rtfeldman$elm_css$Css$px(4)),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Css$backgroundColor(
					_rtfeldman$elm_css$Css$hex('#fff')),
				_1: {
					ctor: '::',
					_0: A3(
						_rtfeldman$elm_css$Css$border3,
						_rtfeldman$elm_css$Css$px(1),
						_rtfeldman$elm_css$Css$solid,
						_rtfeldman$elm_css$Css$hex('#ccc')),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Css$borderTopColor(
							_rtfeldman$elm_css$Css$hex('#e6e6e6')),
						_1: {
							ctor: '::',
							_0: A4(
								_rtfeldman$elm_css$Css$boxShadow4,
								_rtfeldman$elm_css$Css$zero,
								_rtfeldman$elm_css$Css$px(1),
								_rtfeldman$elm_css$Css$zero,
								A4(_rtfeldman$elm_css$Css$rgba, 0, 0, 0, 6.0e-2)),
							_1: {
								ctor: '::',
								_0: _rtfeldman$elm_css$Css$marginTop(
									_rtfeldman$elm_css$Css$px(-1)),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Css$maxHeight(
										_rtfeldman$elm_css$Css$px(_inkuzmin$elm_multiselect$Multiselect_SelectCss$menuHeight)),
									_1: {
										ctor: '::',
										_0: _rtfeldman$elm_css$Css$position(_rtfeldman$elm_css$Css$absolute),
										_1: {
											ctor: '::',
											_0: _rtfeldman$elm_css$Css$width(
												_rtfeldman$elm_css$Css$pct(100)),
											_1: {
												ctor: '::',
												_0: _rtfeldman$elm_css$Css$zIndex(
													_rtfeldman$elm_css$Css$int(1)),
												_1: {
													ctor: '::',
													_0: _rtfeldman$elm_css$Css$overflowY(_rtfeldman$elm_css$Css$scroll),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight = 32;
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItem = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$color(
			_rtfeldman$elm_css$Css$hex('#666')),
		_1: {
			ctor: '::',
			_0: _rtfeldman$elm_css$Css$cursor(_rtfeldman$elm_css$Css$pointer),
			_1: {
				ctor: '::',
				_0: A2(
					_rtfeldman$elm_css$Css$padding2,
					_rtfeldman$elm_css$Css$px(8),
					_rtfeldman$elm_css$Css$px(10)),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Css$maxHeight(
						_rtfeldman$elm_css$Css$px(_inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight)),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$boxShadowCustom = function (p) {
	return A2(_rtfeldman$elm_css$Css$property, 'box-shadow', p);
};
var _inkuzmin$elm_multiselect$Multiselect_SelectCss$focused = _rtfeldman$elm_css$Css$batch(
	{
		ctor: '::',
		_0: _rtfeldman$elm_css$Css$borderColor(
			_rtfeldman$elm_css$Css$hex('#007eff')),
		_1: {
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$boxShadowCustom('inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px rgba(0, 126, 255, 0.1)'),
			_1: {ctor: '[]'}
		}
	});

var _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter = '‌‌';
var _inkuzmin$elm_multiselect$Multiselect_Utils$fst = _elm_lang$core$Tuple$first;

var _inkuzmin$elm_multiselect$Multiselect$onKeyPress = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _rtfeldman$elm_css$Html_Styled_Events$keyCode));
};
var _inkuzmin$elm_multiselect$Multiselect$onKeyUp = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'keyup',
		A2(_elm_lang$core$Json_Decode$map, tagger, _rtfeldman$elm_css$Html_Styled_Events$targetValue));
};
var _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault = function (message) {
	var config = {stopPropagation: true, preventDefault: true};
	return A3(
		_rtfeldman$elm_css$Html_Styled_Events$onWithOptions,
		'click',
		config,
		_elm_lang$core$Json_Decode$succeed(message));
};
var _inkuzmin$elm_multiselect$Multiselect_ops = _inkuzmin$elm_multiselect$Multiselect_ops || {};
_inkuzmin$elm_multiselect$Multiselect_ops[':>'] = F2(
	function (f, x) {
		return f(x);
	});
var _inkuzmin$elm_multiselect$Multiselect$onKeyDown = function (tagger) {
	return A2(
		_rtfeldman$elm_css$Html_Styled_Events$on,
		'keypress',
		A2(
			_elm_lang$core$Json_Decode$map,
			tagger,
			A2(
				_inkuzmin$elm_multiselect$Multiselect_ops[':>'],
				_debois$elm_dom$DOM$target,
				A2(_inkuzmin$elm_multiselect$Multiselect_ops[':>'], _debois$elm_dom$DOM$previousSibling, _debois$elm_dom$DOM$offsetWidth))));
};
var _inkuzmin$elm_multiselect$Multiselect$fromResult = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Json_Decode$succeed(_p0._0);
	} else {
		return _elm_lang$core$Json_Decode$fail(_p0._0);
	}
};
var _inkuzmin$elm_multiselect$Multiselect$delay = F2(
	function (time, msg) {
		return A2(
			_elm_lang$core$Task$perform,
			function (_p1) {
				return msg;
			},
			_elm_lang$core$Process$sleep(time));
	});
var _inkuzmin$elm_multiselect$Multiselect$nextItem = F2(
	function (list, item) {
		var findNextInList = function (l) {
			findNextInList:
			while (true) {
				var _p2 = l;
				if (_p2.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p2._1.ctor === '[]') {
						return _elm_lang$core$Native_Utils.eq(_p2._0, item) ? _elm_lang$core$List$head(list) : _elm_lang$core$Maybe$Nothing;
					} else {
						var _p3 = _p2._1._0;
						if (_elm_lang$core$Native_Utils.eq(_p2._0, item)) {
							return _elm_lang$core$Maybe$Just(_p3);
						} else {
							var _v2 = {ctor: '::', _0: _p3, _1: _p2._1._1};
							l = _v2;
							continue findNextInList;
						}
					}
				}
			}
		};
		return findNextInList(list);
	});
var _inkuzmin$elm_multiselect$Multiselect$prevItem = F2(
	function (list, item) {
		return A2(
			_inkuzmin$elm_multiselect$Multiselect$nextItem,
			_elm_lang$core$List$reverse(list),
			item);
	});
var _inkuzmin$elm_multiselect$Multiselect$nextSelectedItem = F2(
	function (list, item) {
		var takeLast = function (l) {
			var _p4 = l;
			if (_p4.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p4._1.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					return _elm_lang$core$Maybe$Just(_p4._1._0);
				}
			}
		};
		var findNextInList = function (l) {
			findNextInList:
			while (true) {
				var _p5 = l;
				if (_p5.ctor === '[]') {
					return _elm_lang$core$Maybe$Nothing;
				} else {
					if (_p5._1.ctor === '[]') {
						return _elm_lang$core$Native_Utils.eq(_p5._0, item) ? takeLast(
							_elm_lang$core$List$reverse(list)) : _elm_lang$core$Maybe$Nothing;
					} else {
						var _p6 = _p5._1._0;
						if (_elm_lang$core$Native_Utils.eq(_p5._0, item)) {
							return _elm_lang$core$Maybe$Just(_p6);
						} else {
							var _v5 = {ctor: '::', _0: _p6, _1: _p5._1._1};
							l = _v5;
							continue findNextInList;
						}
					}
				}
			}
		};
		return findNextInList(list);
	});
var _inkuzmin$elm_multiselect$Multiselect$lastElem = A2(
	_elm_lang$core$List$foldl,
	function (_p7) {
		return _elm_lang$core$Basics$always(
			_elm_lang$core$Maybe$Just(_p7));
	},
	_elm_lang$core$Maybe$Nothing);
var _inkuzmin$elm_multiselect$Multiselect$indexOf = F2(
	function (el, list) {
		var helper = F2(
			function (l, index) {
				helper:
				while (true) {
					var _p8 = l;
					if (_p8.ctor === '[]') {
						return _elm_lang$core$Maybe$Nothing;
					} else {
						if (_elm_lang$core$Native_Utils.eq(_p8._0, el)) {
							return _elm_lang$core$Maybe$Just(index);
						} else {
							var _v7 = _p8._1,
								_v8 = index + 1;
							l = _v7;
							index = _v8;
							continue helper;
						}
					}
				}
			});
		return A2(helper, list, 0);
	});
var _inkuzmin$elm_multiselect$Multiselect$fitViewPort = F2(
	function (_p10, _p9) {
		var _p11 = _p10;
		var _p16 = _p11._0;
		var _p15 = _p11._1;
		var _p12 = _p9;
		var _p14 = _p12._0;
		var _p13 = _p12._1;
		return (_elm_lang$core$Native_Utils.cmp(_p16, _p14) < 0) ? _p16 : ((_elm_lang$core$Native_Utils.cmp(_p15, _p13) > 0) ? (_p14 + (_p15 - _p13)) : _p14);
	});
var _inkuzmin$elm_multiselect$Multiselect$getBoundaries = function (i) {
	return {ctor: '_Tuple2', _0: i * _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight, _1: (i * _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight) + _inkuzmin$elm_multiselect$Multiselect_SelectCss$itemHeight};
};
var _inkuzmin$elm_multiselect$Multiselect$getViewPortBoundaries = function (i) {
	return {ctor: '_Tuple2', _0: i, _1: i + _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuHeight};
};
var _inkuzmin$elm_multiselect$Multiselect$filter = F2(
	function (selected, values) {
		return A2(
			_elm_lang$core$List$filter,
			function (value) {
				return !A2(_elm_lang$core$List$member, value, selected);
			},
			values);
	});
var _inkuzmin$elm_multiselect$Multiselect$populateValues = F3(
	function (model, values, selected) {
		var filtered = _elm_lang$core$List$isEmpty(selected) ? values : A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, values);
		return _elm_lang$core$Native_Utils.update(
			model,
			{values: values, filtered: filtered, selected: selected});
	});
var _inkuzmin$elm_multiselect$Multiselect$getSelectedValues = function (model) {
	return model.selected;
};
var _inkuzmin$elm_multiselect$Multiselect$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {status: a, values: b, filtered: c, selected: d, $protected: e, error: f, input: g, inputWidth: h, hovered: i, tag: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _inkuzmin$elm_multiselect$Multiselect$Opened = {ctor: 'Opened'};
var _inkuzmin$elm_multiselect$Multiselect$Focused = {ctor: 'Focused'};
var _inkuzmin$elm_multiselect$Multiselect$Closed = {ctor: 'Closed'};
var _inkuzmin$elm_multiselect$Multiselect$initModel = F2(
	function (values, tag) {
		return _inkuzmin$elm_multiselect$Multiselect$Model(_inkuzmin$elm_multiselect$Multiselect$Closed)(values)(values)(
			{ctor: '[]'})(false)(_elm_lang$core$Maybe$Nothing)('')(23.0)(
			_elm_lang$core$List$head(values))(tag);
	});
var _inkuzmin$elm_multiselect$Multiselect$ScrollY = function (a) {
	return {ctor: 'ScrollY', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Shortcut = function (a) {
	return {ctor: 'Shortcut', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$OnHover = function (a) {
	return {ctor: 'OnHover', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Adjust = function (a) {
	return {ctor: 'Adjust', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Filter = function (a) {
	return {ctor: 'Filter', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$ScrollResult = function (a) {
	return {ctor: 'ScrollResult', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$FocusResult = function (a) {
	return {ctor: 'FocusResult', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Clear = {ctor: 'Clear'};
var _inkuzmin$elm_multiselect$Multiselect$clear = function (model) {
	return (!_elm_lang$core$List$isEmpty(model.selected)) ? A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$clearWrap,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault(_inkuzmin$elm_multiselect$Multiselect$Clear),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
						{
							ctor: '::',
							_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$clear,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled$text('×'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}) : A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _inkuzmin$elm_multiselect$Multiselect$RemoveItem = function (a) {
	return {ctor: 'RemoveItem', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$tag = F2(
	function (name, value) {
		return A2(
			_rtfeldman$elm_css$Html_Styled$div,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
					{
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tag,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_rtfeldman$elm_css$Html_Styled$span,
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
							{
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagIcon,
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Events$onClick(
								_inkuzmin$elm_multiselect$Multiselect$RemoveItem(
									{ctor: '_Tuple2', _0: name, _1: value})),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled$text('×'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_rtfeldman$elm_css$Html_Styled$span,
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
								{
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagLabel,
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled$text(value),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _inkuzmin$elm_multiselect$Multiselect$tags = function (model) {
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$tagWrap,
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (_p17) {
				var _p18 = _p17;
				return A2(_inkuzmin$elm_multiselect$Multiselect$tag, _p18._0, _p18._1);
			},
			model.selected));
};
var _inkuzmin$elm_multiselect$Multiselect$OnSelect = function (a) {
	return {ctor: 'OnSelect', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$menu = function (model) {
	var _p19 = model.status;
	if (_p19.ctor === 'Opened') {
		var hovered = function () {
			var _p20 = model.hovered;
			if (_p20.ctor === 'Nothing') {
				return '';
			} else {
				return _inkuzmin$elm_multiselect$Multiselect_Utils$fst(_p20._0);
			}
		}();
		return A2(
			_rtfeldman$elm_css$Html_Styled$div,
			{
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
					{
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menu,
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$id(
						A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag)),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$List$map,
				function (_p21) {
					var _p22 = _p21;
					var _p24 = _p22._1;
					var _p23 = _p22._0;
					return A2(
						_rtfeldman$elm_css$Html_Styled$div,
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
								_elm_lang$core$Native_Utils.eq(_p23, hovered) ? {
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItemHovered,
									_1: {
										ctor: '::',
										_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItem,
										_1: {ctor: '[]'}
									}
								} : {
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$menuItem,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault(
									_inkuzmin$elm_multiselect$Multiselect$OnSelect(
										{ctor: '_Tuple2', _0: _p23, _1: _p24})),
								_1: {
									ctor: '::',
									_0: _rtfeldman$elm_css$Html_Styled_Events$onMouseOver(
										_inkuzmin$elm_multiselect$Multiselect$OnHover(
											{ctor: '_Tuple2', _0: _p23, _1: _p24})),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled$text(_p24),
							_1: {ctor: '[]'}
						});
				},
				model.filtered));
	} else {
		return A2(
			_rtfeldman$elm_css$Html_Styled$div,
			{ctor: '[]'},
			{ctor: '[]'});
	}
};
var _inkuzmin$elm_multiselect$Multiselect$Toggle = {ctor: 'Toggle'};
var _inkuzmin$elm_multiselect$Multiselect$arrow = function (model) {
	var arrowRel = _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? 'arrowUpside' : 'arrow';
	var arrowCss = _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrowUpside,
		_1: {ctor: '[]'}
	} : {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrow,
		_1: {ctor: '[]'}
	};
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$arrowWrap,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _inkuzmin$elm_multiselect$Multiselect$onClickNoDefault(_inkuzmin$elm_multiselect$Multiselect$Toggle),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(arrowCss),
					_1: {
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled_Attributes$rel(arrowRel),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _inkuzmin$elm_multiselect$Multiselect$DisableProtection = {ctor: 'DisableProtection'};
var _inkuzmin$elm_multiselect$Multiselect$ClickOnComponent = {ctor: 'ClickOnComponent'};
var _inkuzmin$elm_multiselect$Multiselect$Click = function (a) {
	return {ctor: 'Click', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$subscriptions = function (model) {
	return _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? _elm_lang$mouse$Mouse$clicks(_inkuzmin$elm_multiselect$Multiselect$Click) : _elm_lang$core$Platform_Sub$none;
};
var _inkuzmin$elm_multiselect$Multiselect$Start = {ctor: 'Start'};
var _inkuzmin$elm_multiselect$Multiselect$preventDefaultButtons = function () {
	var filterKey = function (code) {
		return (_elm_lang$core$Native_Utils.eq(code, _inkuzmin$elm_multiselect$Multiselect_Keycodes$upArrow) || _elm_lang$core$Native_Utils.eq(code, _inkuzmin$elm_multiselect$Multiselect_Keycodes$downArrow)) ? _elm_lang$core$Result$Ok(code) : _elm_lang$core$Result$Err('ignored input');
	};
	var decoder = A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Basics$always(_inkuzmin$elm_multiselect$Multiselect$Start),
		A2(
			_elm_lang$core$Json_Decode$andThen,
			function (_p25) {
				return _inkuzmin$elm_multiselect$Multiselect$fromResult(
					filterKey(_p25));
			},
			_rtfeldman$elm_css$Html_Styled_Events$keyCode));
	var options = {preventDefault: true, stopPropagation: false};
	return A3(_rtfeldman$elm_css$Html_Styled_Events$onWithOptions, 'keydown', options, decoder);
}();
var _inkuzmin$elm_multiselect$Multiselect$input = function (model) {
	var value = _elm_lang$core$Native_Utils.eq(model.input, _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter) ? A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$property,
		'value',
		_elm_lang$core$Json_Encode$string(model.input)) : A2(
		_rtfeldman$elm_css$Html_Styled_Attributes$property,
		'type',
		_elm_lang$core$Json_Encode$string('text'));
	var w = _elm_lang$core$Basics$toString(model.inputWidth + 23.0);
	var inputStyle = _rtfeldman$elm_css$Html_Styled_Attributes$style(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'width',
				_1: A2(_elm_lang$core$Basics_ops['++'], w, 'px')
			},
			_1: {ctor: '[]'}
		});
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect$preventDefaultButtons,
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
					{
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$inputWrap,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
						{
							ctor: '::',
							_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$inputMirrow,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled$text(model.input),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_rtfeldman$elm_css$Html_Styled$input,
					{
						ctor: '::',
						_0: _rtfeldman$elm_css$Html_Styled_Attributes$id(
							A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag)),
						_1: {
							ctor: '::',
							_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
								{
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$input,
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect$onKeyDown(_inkuzmin$elm_multiselect$Multiselect$Adjust),
								_1: {
									ctor: '::',
									_0: _inkuzmin$elm_multiselect$Multiselect$onKeyPress(_inkuzmin$elm_multiselect$Multiselect$Shortcut),
									_1: {
										ctor: '::',
										_0: _inkuzmin$elm_multiselect$Multiselect$onKeyUp(_inkuzmin$elm_multiselect$Multiselect$Filter),
										_1: {
											ctor: '::',
											_0: inputStyle,
											_1: {
												ctor: '::',
												_0: value,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _inkuzmin$elm_multiselect$Multiselect$styledView = function (model) {
	var inputCss = _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Focused) ? {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$container,
		_1: {
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$focused,
			_1: {ctor: '[]'}
		}
	} : (_elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$container,
		_1: {
			ctor: '::',
			_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$opened,
			_1: {ctor: '[]'}
		}
	} : {
		ctor: '::',
		_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$container,
		_1: {ctor: '[]'}
	});
	return A2(
		_rtfeldman$elm_css$Html_Styled$div,
		{
			ctor: '::',
			_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect_SelectCss$wrap,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _rtfeldman$elm_css$Html_Styled_Events$onClick(_inkuzmin$elm_multiselect$Multiselect$ClickOnComponent),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_rtfeldman$elm_css$Html_Styled$div,
				{
					ctor: '::',
					_0: _rtfeldman$elm_css$Html_Styled_Attributes$css(inputCss),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _inkuzmin$elm_multiselect$Multiselect$tags(model),
					_1: {
						ctor: '::',
						_0: _inkuzmin$elm_multiselect$Multiselect$input(model),
						_1: {
							ctor: '::',
							_0: _inkuzmin$elm_multiselect$Multiselect$clear(model),
							_1: {
								ctor: '::',
								_0: _inkuzmin$elm_multiselect$Multiselect$arrow(model),
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {
				ctor: '::',
				_0: _inkuzmin$elm_multiselect$Multiselect$menu(model),
				_1: {ctor: '[]'}
			}
		});
};
var _inkuzmin$elm_multiselect$Multiselect$view = function (_p26) {
	return _rtfeldman$elm_css$Html_Styled$toUnstyled(
		_inkuzmin$elm_multiselect$Multiselect$styledView(_p26));
};
var _inkuzmin$elm_multiselect$Multiselect$Cleared = {ctor: 'Cleared'};
var _inkuzmin$elm_multiselect$Multiselect$Unselected = function (a) {
	return {ctor: 'Unselected', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$Selected = function (a) {
	return {ctor: 'Selected', _0: a};
};
var _inkuzmin$elm_multiselect$Multiselect$update = F2(
	function (msg, model) {
		var _p27 = msg;
		switch (_p27.ctor) {
			case 'Start':
				return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
			case 'Toggle':
				return _elm_lang$core$Native_Utils.eq(model.status, _inkuzmin$elm_multiselect$Multiselect$Opened) ? {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Closed}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Nothing
				} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Opened}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'Click':
				return model.$protected ? {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{$protected: false}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Closed}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'DisableProtection':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{$protected: false}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'ClickOnComponent':
				return model.$protected ? {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing} : {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _inkuzmin$elm_multiselect$Multiselect$Opened, $protected: true}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {
								ctor: '::',
								_0: A2(_inkuzmin$elm_multiselect$Multiselect$delay, _elm_lang$core$Time$millisecond * 100, _inkuzmin$elm_multiselect$Multiselect$DisableProtection),
								_1: {ctor: '[]'}
							}
						}),
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'ScrollResult':
				var _p28 = _p27._0;
				if (_p28.ctor === 'Err') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'Could not find dom id: ', _p28._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					return _elm_lang$core$Native_Utils.eq(model.input, _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter) ? {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{input: ''}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					} : {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{error: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				}
			case 'FocusResult':
				var _p29 = _p27._0;
				if (_p29.ctor === 'Err') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'Could not find dom id: ', _p29._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					return _elm_lang$core$Native_Utils.eq(model.input, _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter) ? {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{input: ''}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					} : {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{error: _elm_lang$core$Maybe$Nothing}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				}
			case 'Adjust':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{inputWidth: _p27._0}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'Filter':
				var _p33 = _p27._0;
				var filtered = A2(
					_inkuzmin$elm_multiselect$Multiselect$filter,
					model.selected,
					A2(
						_elm_lang$core$List$filter,
						function (_p30) {
							var _p31 = _p30;
							return A2(
								_elm_lang$core$String$contains,
								_elm_lang$core$String$toLower(_p33),
								_elm_lang$core$String$toLower(_p31._1));
						},
						model.values));
				if (model.$protected) {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{$protected: false}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					var _p32 = model.hovered;
					if (_p32.ctor === 'Nothing') {
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									filtered: filtered,
									input: _p33,
									hovered: _elm_lang$core$List$head(filtered),
									status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					} else {
						return _elm_lang$core$Native_Utils.eq(
							_elm_lang$core$List$length(
								A2(
									_elm_lang$core$List$filter,
									function (i) {
										return _elm_lang$core$Native_Utils.eq(i, _p32._0);
									},
									filtered)),
							0) ? {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									filtered: filtered,
									input: _p33,
									hovered: _elm_lang$core$List$head(filtered),
									status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						} : {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									filtered: filtered,
									input: _p33,
									status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					}
				}
			case 'OnSelect':
				var _p34 = _p27._0;
				var selected = A2(
					_elm_lang$core$Basics_ops['++'],
					model.selected,
					{
						ctor: '::',
						_0: _p34,
						_1: {ctor: '[]'}
					});
				var filtered = A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values);
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: selected,
							filtered: filtered,
							hovered: A2(_inkuzmin$elm_multiselect$Multiselect$nextSelectedItem, model.filtered, _p34),
							input: _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter,
							status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Just(
						_inkuzmin$elm_multiselect$Multiselect$Selected(_p34))
				};
			case 'RemoveItem':
				var _p35 = _p27._0;
				var selected = A2(
					_elm_lang$core$List$filter,
					function (value) {
						return !_elm_lang$core$Native_Utils.eq(value, _p35);
					},
					model.selected);
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: selected,
							filtered: A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values),
							hovered: _elm_lang$core$Maybe$Just(_p35)
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$ScrollY,
								_elm_lang$dom$Dom_Scroll$y(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Just(
						_inkuzmin$elm_multiselect$Multiselect$Unselected(_p35))
				};
			case 'Clear':
				var selected = {ctor: '[]'};
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selected: selected,
							filtered: A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values),
							input: _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter,
							status: _inkuzmin$elm_multiselect$Multiselect$Closed
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$core$Task$attempt,
								_inkuzmin$elm_multiselect$Multiselect$FocusResult,
								_elm_lang$dom$Dom$focus(
									A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
							_1: {ctor: '[]'}
						}),
					_2: _elm_lang$core$Maybe$Just(_inkuzmin$elm_multiselect$Multiselect$Cleared)
				};
			case 'OnHover':
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							hovered: _elm_lang$core$Maybe$Just(_p27._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none,
					_2: _elm_lang$core$Maybe$Nothing
				};
			case 'ScrollY':
				var _p36 = _p27._0;
				if (_p36.ctor === 'Err') {
					return {
						ctor: '_Tuple3',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'Could not find dom id: ', _p36._0._0))
							}),
						_1: _elm_lang$core$Platform_Cmd$none,
						_2: _elm_lang$core$Maybe$Nothing
					};
				} else {
					var _p37 = model.hovered;
					if (_p37.ctor === 'Nothing') {
						return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
					} else {
						var _p38 = A2(_inkuzmin$elm_multiselect$Multiselect$indexOf, _p37._0, model.filtered);
						if (_p38.ctor === 'Nothing') {
							return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
						} else {
							var vpBoundaries = _inkuzmin$elm_multiselect$Multiselect$getViewPortBoundaries(_p36._0);
							var boundaries = _inkuzmin$elm_multiselect$Multiselect$getBoundaries(
								_elm_lang$core$Basics$toFloat(_p38._0));
							var scroll = A2(_inkuzmin$elm_multiselect$Multiselect$fitViewPort, boundaries, vpBoundaries);
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{error: _elm_lang$core$Maybe$Nothing}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_elm_lang$core$Task$attempt,
											_inkuzmin$elm_multiselect$Multiselect$ScrollResult,
											A2(
												_elm_lang$dom$Dom_Scroll$toY,
												A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag),
												scroll)),
										_1: {ctor: '[]'}
									}),
								_2: _elm_lang$core$Maybe$Nothing
							};
						}
					}
				}
			default:
				var _p45 = _p27._0;
				if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$upArrow)) {
					var _p39 = model.hovered;
					if (_p39.ctor === 'Nothing') {
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									hovered: _elm_lang$core$List$head(model.filtered)
								}),
							_1: _elm_lang$core$Platform_Cmd$none,
							_2: _elm_lang$core$Maybe$Nothing
						};
					} else {
						var prev = A2(_inkuzmin$elm_multiselect$Multiselect$prevItem, model.filtered, _p39._0);
						return {
							ctor: '_Tuple3',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{hovered: prev}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: A2(
										_elm_lang$core$Task$attempt,
										_inkuzmin$elm_multiselect$Multiselect$ScrollY,
										_elm_lang$dom$Dom_Scroll$y(
											A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
									_1: {ctor: '[]'}
								}),
							_2: _elm_lang$core$Maybe$Nothing
						};
					}
				} else {
					if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$downArrow)) {
						var _p40 = model.hovered;
						if (_p40.ctor === 'Nothing') {
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										hovered: _elm_lang$core$List$head(model.filtered)
									}),
								_1: _elm_lang$core$Platform_Cmd$none,
								_2: _elm_lang$core$Maybe$Nothing
							};
						} else {
							var next = A2(_inkuzmin$elm_multiselect$Multiselect$nextItem, model.filtered, _p40._0);
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{hovered: next}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_elm_lang$core$Task$attempt,
											_inkuzmin$elm_multiselect$Multiselect$ScrollY,
											_elm_lang$dom$Dom_Scroll$y(
												A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
										_1: {ctor: '[]'}
									}),
								_2: _elm_lang$core$Maybe$Nothing
							};
						}
					} else {
						if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$pageUp) || _elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$home)) {
							var first = _elm_lang$core$List$head(model.filtered);
							return {
								ctor: '_Tuple3',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{hovered: first}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: A2(
											_elm_lang$core$Task$attempt,
											_inkuzmin$elm_multiselect$Multiselect$ScrollY,
											_elm_lang$dom$Dom_Scroll$y(
												A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
										_1: {ctor: '[]'}
									}),
								_2: _elm_lang$core$Maybe$Nothing
							};
						} else {
							if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$pageDown) || _elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$end)) {
								var last = _inkuzmin$elm_multiselect$Multiselect$lastElem(model.filtered);
								return {
									ctor: '_Tuple3',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{hovered: last}),
									_1: _elm_lang$core$Platform_Cmd$batch(
										{
											ctor: '::',
											_0: A2(
												_elm_lang$core$Task$attempt,
												_inkuzmin$elm_multiselect$Multiselect$ScrollY,
												_elm_lang$dom$Dom_Scroll$y(
													A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
											_1: {ctor: '[]'}
										}),
									_2: _elm_lang$core$Maybe$Nothing
								};
							} else {
								if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$return)) {
									var _p41 = model.hovered;
									if (_p41.ctor === 'Nothing') {
										return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
									} else {
										var _p42 = _p41._0;
										var selected = A2(
											_elm_lang$core$Basics_ops['++'],
											model.selected,
											{
												ctor: '::',
												_0: _p42,
												_1: {ctor: '[]'}
											});
										var filtered = A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values);
										return {
											ctor: '_Tuple3',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{
													selected: selected,
													filtered: filtered,
													hovered: A2(_inkuzmin$elm_multiselect$Multiselect$nextSelectedItem, model.filtered, _p42),
													input: _inkuzmin$elm_multiselect$Multiselect_Utils$invisibleCharacter,
													status: _elm_lang$core$List$isEmpty(filtered) ? _inkuzmin$elm_multiselect$Multiselect$Closed : _inkuzmin$elm_multiselect$Multiselect$Opened
												}),
											_1: _elm_lang$core$Platform_Cmd$batch(
												{
													ctor: '::',
													_0: A2(
														_elm_lang$core$Task$attempt,
														_inkuzmin$elm_multiselect$Multiselect$FocusResult,
														_elm_lang$dom$Dom$focus(
															A2(_elm_lang$core$Basics_ops['++'], 'multiselectInput', model.tag))),
													_1: {ctor: '[]'}
												}),
											_2: _elm_lang$core$Maybe$Just(
												_inkuzmin$elm_multiselect$Multiselect$Selected(_p42))
										};
									}
								} else {
									if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$escape)) {
										return {
											ctor: '_Tuple3',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{status: _inkuzmin$elm_multiselect$Multiselect$Closed, $protected: true}),
											_1: _elm_lang$core$Platform_Cmd$none,
											_2: _elm_lang$core$Maybe$Nothing
										};
									} else {
										if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$tab)) {
											return {
												ctor: '_Tuple3',
												_0: _elm_lang$core$Native_Utils.update(
													model,
													{status: _inkuzmin$elm_multiselect$Multiselect$Closed}),
												_1: _elm_lang$core$Platform_Cmd$none,
												_2: _elm_lang$core$Maybe$Nothing
											};
										} else {
											if (_elm_lang$core$Native_Utils.eq(_p45, _inkuzmin$elm_multiselect$Multiselect_Keycodes$backspace)) {
												if (_elm_lang$core$Native_Utils.eq(model.input, '')) {
													var _p43 = _inkuzmin$elm_multiselect$Multiselect$lastElem(model.selected);
													if (_p43.ctor === 'Nothing') {
														return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
													} else {
														var _p44 = _p43._0;
														var selected = A2(
															_elm_lang$core$List$filter,
															function (value) {
																return !_elm_lang$core$Native_Utils.eq(value, _p44);
															},
															model.selected);
														return {
															ctor: '_Tuple3',
															_0: _elm_lang$core$Native_Utils.update(
																model,
																{
																	selected: selected,
																	filtered: A2(_inkuzmin$elm_multiselect$Multiselect$filter, selected, model.values),
																	hovered: _elm_lang$core$Maybe$Just(_p44)
																}),
															_1: _elm_lang$core$Platform_Cmd$batch(
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$core$Task$attempt,
																		_inkuzmin$elm_multiselect$Multiselect$ScrollY,
																		_elm_lang$dom$Dom_Scroll$y(
																			A2(_elm_lang$core$Basics_ops['++'], 'multiselectMenu', model.tag))),
																	_1: {ctor: '[]'}
																}),
															_2: _elm_lang$core$Maybe$Just(
																_inkuzmin$elm_multiselect$Multiselect$Unselected(_p44))
														};
													}
												} else {
													return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
												}
											} else {
												return {ctor: '_Tuple3', _0: model, _1: _elm_lang$core$Platform_Cmd$none, _2: _elm_lang$core$Maybe$Nothing};
											}
										}
									}
								}
							}
						}
					}
				}
		}
	});

var _Giga_dev$newman$Pages_SubmitNewJob$radio = F3(
	function (textVal, msg, isChecked) {
		return A2(
			_elm_lang$html$Html$label,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('radio'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$name('font-size'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(msg),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$checked(isChecked),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(textVal),
					_1: {ctor: '[]'}
				}
			});
	});
var _Giga_dev$newman$Pages_SubmitNewJob$updateJobConfigAdded = F2(
	function (model, jobConfig) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				configurations: {ctor: '::', _0: jobConfig, _1: model.configurations}
			});
	});
var _Giga_dev$newman$Pages_SubmitNewJob$updateSuiteAdded = F2(
	function (model, suite) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				buildsAndSuites: {
					suites: {ctor: '::', _0: suite, _1: model.buildsAndSuites.suites},
					builds: model.buildsAndSuites.builds
				}
			});
	});
var _Giga_dev$newman$Pages_SubmitNewJob$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {buildsAndSuites: a, selectedBuild: b, selectedSuites: c, configurations: d, selectedConfig: e, agentGroups: f, selectedAgentGroups: g, submittedFutureJobs: h, isSelect: i, modalState: j, errorMessage: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Pages_SubmitNewJob$BuildsAndSuites = F2(
	function (a, b) {
		return {suites: a, builds: b};
	});
var _Giga_dev$newman$Pages_SubmitNewJob$FutureJob = function (a) {
	return {id: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$futureJobDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'id',
	_elm_lang$core$Json_Decode$string,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Pages_SubmitNewJob$FutureJob));
var _Giga_dev$newman$Pages_SubmitNewJob$decodeFutureJobs = _elm_lang$core$Json_Decode$list(_Giga_dev$newman$Pages_SubmitNewJob$futureJobDecoder);
var _Giga_dev$newman$Pages_SubmitNewJob$postFutureJob = F4(
	function (buildId, suites, agentGroupsList, configId) {
		var jsonify = _elm_lang$http$Http$jsonBody(
			_elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'buildId',
						_1: _elm_lang$core$Json_Encode$string(buildId)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'suites',
							_1: _elm_lang$core$Json_Encode$list(
								A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, suites))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'agentGroups',
								_1: _elm_lang$core$Json_Encode$list(
									A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, agentGroupsList))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'configId',
									_1: _elm_lang$core$Json_Encode$string(configId)
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}));
		return A3(_elm_lang$http$Http$post, '../api/newman/futureJob', jsonify, _Giga_dev$newman$Pages_SubmitNewJob$decodeFutureJobs);
	});
var _Giga_dev$newman$Pages_SubmitNewJob$ThinBuild = F4(
	function (a, b, c, d) {
		return {id: a, name: b, branch: c, tags: d};
	});
var _Giga_dev$newman$Pages_SubmitNewJob$buildToThinBuild = function (build) {
	return A4(_Giga_dev$newman$Pages_SubmitNewJob$ThinBuild, build.id, build.name, build.branch, build.tags);
};
var _Giga_dev$newman$Pages_SubmitNewJob$updateBuildAdded = F2(
	function (model, build) {
		var thinBuild = _Giga_dev$newman$Pages_SubmitNewJob$buildToThinBuild(build);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				buildsAndSuites: {
					builds: {ctor: '::', _0: thinBuild, _1: model.buildsAndSuites.builds},
					suites: model.buildsAndSuites.suites
				}
			});
	});
var _Giga_dev$newman$Pages_SubmitNewJob$decodeThinBuild = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'tags',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'branch',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'name',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'id',
				_elm_lang$core$Json_Decode$string,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_Giga_dev$newman$Pages_SubmitNewJob$ThinBuild)))));
var _Giga_dev$newman$Pages_SubmitNewJob$buildsAndSuitesDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_Giga_dev$newman$Pages_SubmitNewJob$BuildsAndSuites,
	A2(
		_elm_lang$core$Json_Decode$field,
		'suites',
		_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Utils_Types$decodeSuite)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'builds',
		_elm_lang$core$Json_Decode$list(_Giga_dev$newman$Pages_SubmitNewJob$decodeThinBuild)));
var _Giga_dev$newman$Pages_SubmitNewJob$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_SubmitNewJob$WebSocketEvent);
};
var _Giga_dev$newman$Pages_SubmitNewJob$NewmanModalMsg = function (a) {
	return {ctor: 'NewmanModalMsg', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$UpdatedBuildSelection = function (a) {
	return {ctor: 'UpdatedBuildSelection', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$MultiSelectMsg = function (a) {
	return {ctor: 'MultiSelectMsg', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$subscriptions = function (model) {
	return A2(
		_elm_lang$core$Platform_Sub$map,
		_Giga_dev$newman$Pages_SubmitNewJob$MultiSelectMsg,
		_inkuzmin$elm_multiselect$Multiselect$subscriptions(model.selectedSuites));
};
var _Giga_dev$newman$Pages_SubmitNewJob$MultiSelectAgentGroupsMsg = function (a) {
	return {ctor: 'MultiSelectAgentGroupsMsg', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$OnClickSubmit = {ctor: 'OnClickSubmit'};
var _Giga_dev$newman$Pages_SubmitNewJob$SubmitNewJobCompleted = function (a) {
	return {ctor: 'SubmitNewJobCompleted', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$submitFutureJobCmd = F4(
	function (buildId, suites, agentGroups, configId) {
		var postReq = A4(_Giga_dev$newman$Pages_SubmitNewJob$postFutureJob, buildId, suites, agentGroups, configId);
		return A2(_elm_lang$http$Http$send, _Giga_dev$newman$Pages_SubmitNewJob$SubmitNewJobCompleted, postReq);
	});
var _Giga_dev$newman$Pages_SubmitNewJob$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetBuildsAndSuitesCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					var _p2 = _p1._0;
					var suites = A2(
						_elm_lang$core$List$map,
						function (suite) {
							return {ctor: '_Tuple2', _0: suite.id, _1: suite.name};
						},
						_p2.suites);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								buildsAndSuites: _p2,
								selectedSuites: A2(_inkuzmin$elm_multiselect$Multiselect$initModel, suites, 'suites')
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetAllConfigsCompleted':
				var _p3 = _p0._0;
				if (_p3.ctor === 'Ok') {
					var _p4 = _p3._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								configurations: _p4,
								selectedConfig: A2(
									_elm_lang$core$Maybe$withDefault,
									'',
									A2(
										_elm_lang$core$Maybe$map,
										function (v) {
											return v.id;
										},
										_elm_lang$core$List$head(_p4)))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetAllAgentGroupsCompleted':
				var _p5 = _p0._0;
				if (_p5.ctor === 'Ok') {
					var _p6 = _p5._0;
					var agentGroups = A2(
						_elm_lang$core$List$map,
						function (item) {
							return {ctor: '_Tuple2', _0: item, _1: item};
						},
						_p6);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								agentGroups: _p6,
								selectedAgentGroups: A3(_inkuzmin$elm_multiselect$Multiselect$populateValues, model.selectedAgentGroups, agentGroups, agentGroups)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdateSelectedBuild':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedBuild: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UpdateSelectedConfig':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedConfig: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MultiSelectAgentGroupsMsg':
				var _p7 = A2(_inkuzmin$elm_multiselect$Multiselect$update, _p0._0, model.selectedAgentGroups);
				var subModel = _p7._0;
				var subCmd = _p7._1;
				var outMsg = _p7._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedAgentGroups: subModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_SubmitNewJob$MultiSelectAgentGroupsMsg, subCmd)
				};
			case 'MultiSelectMsg':
				var _p8 = A2(_inkuzmin$elm_multiselect$Multiselect$update, _p0._0, model.selectedSuites);
				var subModel = _p8._0;
				var subCmd = _p8._1;
				var outMsg = _p8._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedSuites: subModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_SubmitNewJob$MultiSelectMsg, subCmd)
				};
			case 'OnClickSubmit':
				var _p9 = {
					ctor: '_Tuple4',
					_0: model.selectedBuild,
					_1: A2(
						_elm_lang$core$List$map,
						function (_p10) {
							var _p11 = _p10;
							return _p11._0;
						},
						_inkuzmin$elm_multiselect$Multiselect$getSelectedValues(model.selectedSuites)),
					_2: A2(
						_elm_lang$core$List$map,
						function (_p12) {
							var _p13 = _p12;
							return _p13._0;
						},
						_inkuzmin$elm_multiselect$Multiselect$getSelectedValues(model.selectedAgentGroups)),
					_3: model.selectedConfig
				};
				var buildId = _p9._0;
				var suitesList = _p9._1;
				var agentGroupsList = _p9._2;
				var configId = _p9._3;
				var _p14 = {ctor: '_Tuple4', _0: buildId, _1: suitesList, _2: agentGroupsList, _3: configId};
				_v6_4:
				do {
					if (_p14.ctor === '_Tuple4') {
						if (_p14._0 === '') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{errorMessage: 'Please select a build', modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							if (_p14._1.ctor === '[]') {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{errorMessage: 'Please select one or more suites', modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								if (_p14._2.ctor === '[]') {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{errorMessage: 'Please select one or more agent groups', modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
										_1: _elm_lang$core$Platform_Cmd$none
									};
								} else {
									if (_p14._3 === '') {
										return {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Native_Utils.update(
												model,
												{errorMessage: 'Please select a Job Configuration', modalState: _rundis$elm_bootstrap$Bootstrap_Modal$visibleState}),
											_1: _elm_lang$core$Platform_Cmd$none
										};
									} else {
										break _v6_4;
									}
								}
							}
						}
					} else {
						break _v6_4;
					}
				} while(false);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A4(_Giga_dev$newman$Pages_SubmitNewJob$submitFutureJobCmd, buildId, suitesList, agentGroupsList, configId)
				};
			case 'SubmitNewJobCompleted':
				var _p15 = _p0._0;
				if (_p15.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{submittedFutureJobs: _p15._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'UpdatedBuildSelection':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isSelect: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewmanModalMsg':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{modalState: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p16 = _p0._0;
				switch (_p16.ctor) {
					case 'CreatedBuild':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_SubmitNewJob$updateBuildAdded, model, _p16._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'CreatedSuite':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_SubmitNewJob$updateSuiteAdded, model, _p16._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'CreatedJobConfig':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_SubmitNewJob$updateJobConfigAdded, model, _p16._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_SubmitNewJob$UpdateSelectedConfig = function (a) {
	return {ctor: 'UpdateSelectedConfig', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$UpdateSelectedBuild = function (a) {
	return {ctor: 'UpdateSelectedBuild', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$selectBuildView = function (model) {
	var toOption = function (data) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value(data.id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$selected(
						_elm_lang$core$Native_Utils.eq(model.selectedBuild, data.id)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						data.name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' (',
							A2(
								_elm_lang$core$Basics_ops['++'],
								data.branch,
								A2(
									_elm_lang$core$Basics_ops['++'],
									')',
									A2(
										_elm_lang$core$Basics_ops['++'],
										' (',
										A2(
											_elm_lang$core$Basics_ops['++'],
											A2(_elm_lang$core$String$join, ',', data.tags),
											')'))))))),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A3(
						_Giga_dev$newman$Pages_SubmitNewJob$radio,
						'Select build :',
						_Giga_dev$newman$Pages_SubmitNewJob$UpdatedBuildSelection(true),
						model.isSelect),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
							{
								ctor: '::',
								_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$disabled(!model.isSelect),
								_1: {
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Pages_SubmitNewJob$UpdateSelectedBuild),
									_1: {
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value('1'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Select a Build'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								A2(_elm_lang$core$List$map, toOption, model.buildsAndSuites.builds))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A3(
									_Giga_dev$newman$Pages_SubmitNewJob$radio,
									'Enter build id :',
									_Giga_dev$newman$Pages_SubmitNewJob$UpdatedBuildSelection(false),
									!model.isSelect),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$disabled(model.isSelect),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_SubmitNewJob$UpdateSelectedBuild),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_SubmitNewJob$view = function (model) {
	var submittedFutureJobString = function () {
		var _p17 = model.submittedFutureJobs;
		if (_p17.ctor === '[]') {
			return '';
		} else {
			return 'submitted the following future jobs:';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-header'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Submit New Job'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Select suites:'),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$map,
								_Giga_dev$newman$Pages_SubmitNewJob$MultiSelectMsg,
								_inkuzmin$elm_multiselect$Multiselect$view(model.selectedSuites)),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Select agent groups:'),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$map,
										_Giga_dev$newman$Pages_SubmitNewJob$MultiSelectAgentGroupsMsg,
										_inkuzmin$elm_multiselect$Multiselect$view(model.selectedAgentGroups)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: function () {
									var toOption = function (data) {
										return A2(
											_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(data.id),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$selected(
														_elm_lang$core$Native_Utils.eq(model.selectedConfig, data.id)),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(data.name),
												_1: {ctor: '[]'}
											});
									};
									return A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Select Job Configuration:'),
											_1: {
												ctor: '::',
												_0: A2(
													_rundis$elm_bootstrap$Bootstrap_Form_Select$select,
													{
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onChange(_Giga_dev$newman$Pages_SubmitNewJob$UpdateSelectedConfig),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$attrs(
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'width', _1: '500px'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													},
													A2(_elm_lang$core$List$map, toOption, model.configurations)),
												_1: {ctor: '[]'}
											}
										});
								}(),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _Giga_dev$newman$Pages_SubmitNewJob$selectBuildView(model),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Button$button,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$secondary,
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(_Giga_dev$newman$Pages_SubmitNewJob$OnClickSubmit),
														_1: {
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '15px'},
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Submit Future Job'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$br,
													{ctor: '[]'},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(submittedFutureJobString),
																_1: {ctor: '[]'}
															},
															A2(
																_elm_lang$core$List$map,
																function (job) {
																	return A2(
																		_elm_lang$html$Html$div,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(job.id),
																			_1: {ctor: '[]'}
																		});
																},
																model.submittedFutureJobs))),
													_1: {
														ctor: '::',
														_0: A3(_Giga_dev$newman$Views_NewmanModal$viewError, model.errorMessage, _Giga_dev$newman$Pages_SubmitNewJob$NewmanModalMsg, model.modalState),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Pages_SubmitNewJob$GetAllAgentGroupsCompleted = function (a) {
	return {ctor: 'GetAllAgentGroupsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$getAllAgentGroupsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_SubmitNewJob$GetAllAgentGroupsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/availableAgentGroups', _Giga_dev$newman$Utils_Types$decodeAgentGroups));
var _Giga_dev$newman$Pages_SubmitNewJob$GetAllConfigsCompleted = function (a) {
	return {ctor: 'GetAllConfigsCompleted', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$getAllConfigsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_SubmitNewJob$GetAllConfigsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/job-config', _Giga_dev$newman$Utils_Types$decodeJobConfigs));
var _Giga_dev$newman$Pages_SubmitNewJob$GetBuildsAndSuitesCompleted = function (a) {
	return {ctor: 'GetBuildsAndSuitesCompleted', _0: a};
};
var _Giga_dev$newman$Pages_SubmitNewJob$getBuildsAndSuitesCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_SubmitNewJob$GetBuildsAndSuitesCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/all-builds-and-suites', _Giga_dev$newman$Pages_SubmitNewJob$buildsAndSuitesDecoder));
var _Giga_dev$newman$Pages_SubmitNewJob$init = {
	ctor: '_Tuple2',
	_0: {
		buildsAndSuites: A2(
			_Giga_dev$newman$Pages_SubmitNewJob$BuildsAndSuites,
			{ctor: '[]'},
			{ctor: '[]'}),
		selectedBuild: '',
		selectedSuites: A2(
			_inkuzmin$elm_multiselect$Multiselect$initModel,
			{ctor: '[]'},
			''),
		selectedConfig: '',
		configurations: {ctor: '[]'},
		selectedAgentGroups: A2(
			_inkuzmin$elm_multiselect$Multiselect$initModel,
			{ctor: '[]'},
			''),
		agentGroups: {ctor: '[]'},
		submittedFutureJobs: {ctor: '[]'},
		isSelect: true,
		modalState: _rundis$elm_bootstrap$Bootstrap_Modal$hiddenState,
		errorMessage: ''
	},
	_1: _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _Giga_dev$newman$Pages_SubmitNewJob$getBuildsAndSuitesCmd,
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Pages_SubmitNewJob$getAllConfigsCmd,
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_SubmitNewJob$getAllAgentGroupsCmd,
					_1: {ctor: '[]'}
				}
			}
		})
};

var _Giga_dev$newman$Pages_Suite$updateSuite = F2(
	function (suite, modelSuite) {
		return _elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_Utils.update(
				modelSuite,
				{customVariables: suite.customVariables}));
	});
var _Giga_dev$newman$Pages_Suite$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'GetSuiteInfoCompleted') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Ok') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							maybeSuite: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		} else {
			var _p2 = _p0._0;
			if (_p2.ctor === 'ModifiedSuite') {
				var _p5 = _p2._0;
				var _p3 = model.maybeSuite;
				if (_p3.ctor === 'Just') {
					var _p4 = _p3._0;
					return _elm_lang$core$Native_Utils.eq(_p4.id, _p5.id) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								maybeSuite: A2(_Giga_dev$newman$Pages_Suite$updateSuite, _p5, _p4)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
var _Giga_dev$newman$Pages_Suite$viewSuite = function (suite) {
	var viewCriteria = A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Criteria'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$textarea,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$readonly(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: '0px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'resize', _1: 'both'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(suite.criteria),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
	var viewRow = function (_p6) {
		var _p7 = _p6;
		return A2(
			_elm_lang$html$Html$tr,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$height(50),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$width(150),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p7._0),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _p7._1,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Suite'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: viewRow(
							{
								ctor: '_Tuple2',
								_0: 'Name',
								_1: _elm_lang$html$Html$text(suite.name)
							}),
						_1: {
							ctor: '::',
							_0: viewRow(
								{
									ctor: '_Tuple2',
									_0: 'Id',
									_1: _elm_lang$html$Html$text(suite.id)
								}),
							_1: {
								ctor: '::',
								_0: viewRow(
									{
										ctor: '_Tuple2',
										_0: 'Custome Variables',
										_1: _elm_lang$html$Html$text(suite.customVariables)
									}),
								_1: {
									ctor: '::',
									_0: viewCriteria,
									_1: {
										ctor: '::',
										_0: viewRow(
											{
												ctor: '_Tuple2',
												_0: 'Requirements',
												_1: _elm_lang$html$Html$text(
													A2(_elm_lang$core$String$join, ',', suite.requirements))
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Suite$view = function (model) {
	var _p8 = model.maybeSuite;
	if (_p8.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _Giga_dev$newman$Pages_Suite$viewSuite(_p8._0),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Loading suite...'),
				_1: {ctor: '[]'}
			});
	}
};
var _Giga_dev$newman$Pages_Suite$parseSuiteId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_Suite$Model = function (a) {
	return {maybeSuite: a};
};
var _Giga_dev$newman$Pages_Suite$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Suite$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Suite$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Suite$GetSuiteInfoCompleted = function (a) {
	return {ctor: 'GetSuiteInfoCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Suite$getSuiteInfoCmd = function (suiteId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Suite$GetSuiteInfoCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/suite/', suiteId),
			_Giga_dev$newman$Utils_Types$decodeSuiteWithCriteria));
};
var _Giga_dev$newman$Pages_Suite$init = function (suiteId) {
	return {
		ctor: '_Tuple2',
		_0: _Giga_dev$newman$Pages_Suite$Model(_elm_lang$core$Maybe$Nothing),
		_1: _Giga_dev$newman$Pages_Suite$getSuiteInfoCmd(suiteId)
	};
};

var _Giga_dev$newman$Pages_Suites$filterQuery = F2(
	function (query, suite) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, suite.name) || A2(_elm_lang$core$String$startsWith, query, suite.id))) ? true : false;
	});
var _Giga_dev$newman$Pages_Suites$viewSuite = function (suite) {
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(
						A2(_elm_lang$core$Basics_ops['++'], '#suite/', suite.id)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(suite.name),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(suite.id),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(suite.customVariables),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _Giga_dev$newman$Pages_Suites$updateAll = F2(
	function (f, model) {
		var newList = f(model.allSuites);
		var filtered = A2(
			_elm_lang$core$List$filter,
			_Giga_dev$newman$Pages_Suites$filterQuery(model.query),
			newList);
		var newPaginated = A2(
			_jschomay$elm_paginate$Paginate$map,
			function (_p0) {
				return filtered;
			},
			model.suites);
		return _elm_lang$core$Native_Utils.update(
			model,
			{suites: newPaginated, allSuites: newList});
	});
var _Giga_dev$newman$Pages_Suites$updateSuiteAdded = F2(
	function (model, addedSuite) {
		return A2(
			_Giga_dev$newman$Pages_Suites$updateAll,
			function (list) {
				return {ctor: '::', _0: addedSuite, _1: list};
			},
			model);
	});
var _Giga_dev$newman$Pages_Suites$updateSuiteUpdated = F2(
	function (model, suiteToUpdate) {
		var f = function (l) {
			var _p1 = A2(
				_elm_community$list_extra$List_Extra$find,
				function (item) {
					return _elm_lang$core$Native_Utils.eq(item.id, suiteToUpdate.id);
				},
				l);
			if (_p1.ctor === 'Just') {
				return A3(
					_elm_community$list_extra$List_Extra$replaceIf,
					function (item) {
						return _elm_lang$core$Native_Utils.eq(item.id, suiteToUpdate.id);
					},
					suiteToUpdate,
					l);
			} else {
				return {ctor: '::', _0: suiteToUpdate, _1: l};
			}
		};
		return A2(_Giga_dev$newman$Pages_Suites$updateAll, f, model);
	});
var _Giga_dev$newman$Pages_Suites$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'GetSuitesCompleted':
				var _p3 = _p2._0;
				if (_p3.ctor === 'Ok') {
					var _p4 = _p3._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								suites: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, _p4),
								allSuites: _p4
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							suites: _jschomay$elm_paginate$Paginate$first(model.suites)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							suites: _jschomay$elm_paginate$Paginate$last(model.suites)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							suites: _jschomay$elm_paginate$Paginate$next(model.suites)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							suites: _jschomay$elm_paginate$Paginate$prev(model.suites)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							suites: A2(_jschomay$elm_paginate$Paginate$goTo, _p2._0, model.suites)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FilterQuery':
				var _p5 = _p2._0;
				var filteredList = A2(
					_elm_lang$core$List$filter,
					_Giga_dev$newman$Pages_Suites$filterQuery(_p5),
					model.allSuites);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p5,
							suites: A2(_jschomay$elm_paginate$Paginate$fromList, model.pageSize, filteredList)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p6 = _p2._0;
				switch (_p6.ctor) {
					case 'CreatedSuite':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_Suites$updateSuiteAdded, model, _p6._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'ModifiedSuite':
						return {
							ctor: '_Tuple2',
							_0: A2(_Giga_dev$newman$Pages_Suites$updateSuiteUpdated, model, _p6._0),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Pages_Suites$Model = F4(
	function (a, b, c, d) {
		return {allSuites: a, suites: b, pageSize: c, query: d};
	});
var _Giga_dev$newman$Pages_Suites$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Suites$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Suites$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Suites$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Pages_Suites$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Pages_Suites$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Pages_Suites$Next = {ctor: 'Next'};
var _Giga_dev$newman$Pages_Suites$Last = {ctor: 'Last'};
var _Giga_dev$newman$Pages_Suites$First = {ctor: 'First'};
var _Giga_dev$newman$Pages_Suites$view = function (model) {
	var pagerButtonView = F2(
		function (index, isActive) {
			var _p7 = isActive;
			if (_p7 === true) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item active'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sr-only'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('(current)'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_Giga_dev$newman$Pages_Suites$GoTo(index)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		});
	var nextButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isLast(model.suites)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Suites$Next),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('›'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.suites)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Suites$Last),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('»'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var prevButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isFirst(model.suites)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Suites$First),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('«'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.suites)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Pages_Suites$Prev),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('‹'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var pagination = A2(
		_elm_lang$html$Html$nav,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination '),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					prevButtons,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_jschomay$elm_paginate$Paginate$pager, pagerButtonView, model.suites),
						nextButtons))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Suites'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-inline'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('form-group'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Pages_Suites$FilterQuery),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('form-group'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: pagination,
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$table,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$thead,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$tr,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Name'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Id'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Custom'),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$tbody,
											{ctor: '[]'},
											A2(
												_elm_lang$core$List$map,
												_Giga_dev$newman$Pages_Suites$viewSuite,
												_jschomay$elm_paginate$Paginate$page(model.suites))),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: pagination,
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _Giga_dev$newman$Pages_Suites$GetSuitesCompleted = function (a) {
	return {ctor: 'GetSuitesCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Suites$getSuitesCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Pages_Suites$GetSuitesCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/suite?all=true', _Giga_dev$newman$Utils_Types$decodeSuites));
var _Giga_dev$newman$Pages_Suites$init = function () {
	var pageSize = 20;
	return {
		ctor: '_Tuple2',
		_0: {
			allSuites: {ctor: '[]'},
			suites: A2(
				_jschomay$elm_paginate$Paginate$fromList,
				pageSize,
				{ctor: '[]'}),
			pageSize: pageSize,
			query: ''
		},
		_1: _Giga_dev$newman$Pages_Suites$getSuitesCmd
	};
}();

var _Giga_dev$newman$Pages_Test$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'GetTestDataCompleted') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Ok') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							test: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		} else {
			var _p2 = _p0._0;
			if (_p2.ctor === 'ModifiedTest') {
				var _p4 = _p2._0;
				var _p3 = model.test;
				if (_p3.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.eq(_p4.id, _p3._0.id) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								test: _elm_lang$core$Maybe$Just(_p4)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
var _Giga_dev$newman$Pages_Test$viewTest = function (test) {
	var historyStatsClass = _elm_lang$core$Native_Utils.eq(test.status, _Giga_dev$newman$Utils_Types$TEST_SUCCESS) ? 'black-column' : ((_elm_lang$core$Native_Utils.cmp(test.testScore, 3) < 1) ? 'red-column' : ((_elm_lang$core$Native_Utils.cmp(test.testScore, 3) > 0) ? 'blue-column' : ''));
	var historyStats = function () {
		var shorten = function (txt) {
			return A3(_elm_lang$core$String$slice, 0, 18, txt);
		};
		var delimiter = '_';
		var splitted = A2(_elm_lang$core$String$split, delimiter, test.historyStats);
		var _p5 = splitted;
		_v4_2:
		do {
			if (_p5.ctor === '::') {
				if (_p5._1.ctor === '::') {
					if (_p5._1._1.ctor === '[]') {
						return {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'History Stats branch',
								_1: _elm_lang$html$Html$text(
									shorten(_p5._0))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'History Stats master',
									_1: _elm_lang$html$Html$text(
										shorten(_p5._1._0))
								},
								_1: {ctor: '[]'}
							}
						};
					} else {
						break _v4_2;
					}
				} else {
					return {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'History Stats master',
							_1: _elm_lang$html$Html$text(
								shorten(_p5._0))
						},
						_1: {ctor: '[]'}
					};
				}
			} else {
				break _v4_2;
			}
		} while(false);
		return {ctor: '[]'};
	}();
	var formatDate = function (maybe) {
		var _p6 = maybe;
		if (_p6.ctor === 'Just') {
			return A2(
				_ryannhg$elm_date_format$DateFormat$format,
				_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
				_elm_lang$core$Date$fromTime(
					_elm_lang$core$Basics$toFloat(_p6._0)));
		} else {
			return 'N/A';
		}
	};
	var logsRow = function () {
		var toLogRow = function (_p7) {
			var _p8 = _p7;
			var _p9 = _p8._1;
			return A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_p9),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$target('_blank'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p8._0),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(' '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], _p9, '?download=true')),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('[Download]'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		return A2(
			_elm_lang$html$Html$ul,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'font-size', _1: '14px'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				toLogRow,
				_elm_lang$core$Dict$toList(test.logs)));
	}();
	var toBadge = function (status) {
		var _p10 = status;
		switch (_p10.ctor) {
			case 'TEST_RUNNING':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
			case 'TEST_FAIL':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
			case 'TEST_SUCCESS':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
			default:
				return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
		}
	};
	var rows = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'Status',
				_1: A3(
					toBadge,
					test.status,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_Giga_dev$newman$Utils_Types$testStatusToString(test.status)),
						_1: {ctor: '[]'}
					})
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'Run Num',
					_1: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(test.runNumber))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'Id',
						_1: _elm_lang$html$Html$text(test.id)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'Job Id',
							_1: _elm_lang$html$Html$text(test.jobId)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'Arguments',
								_1: _elm_lang$html$Html$text(
									A2(_elm_lang$core$String$join, ' ', test.$arguments))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'Test Type',
									_1: _elm_lang$html$Html$text(test.testType)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'Timeout',
										_1: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(test.timeout))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'Error Message',
											_1: _elm_lang$html$Html$text(test.errorMessage)
										},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'Logs', _1: logsRow},
											_1: {
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'Assigned Agent',
													_1: _elm_lang$html$Html$text(test.assignedAgent)
												},
												_1: {
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'Start Time',
														_1: _elm_lang$html$Html$text(
															formatDate(test.startTime))
													},
													_1: {
														ctor: '::',
														_0: {
															ctor: '_Tuple2',
															_0: 'End Time',
															_1: _elm_lang$html$Html$text(
																formatDate(test.endTime))
														},
														_1: {
															ctor: '::',
															_0: {
																ctor: '_Tuple2',
																_0: 'Scheduled At',
																_1: _elm_lang$html$Html$text(
																	formatDate(
																		_elm_lang$core$Maybe$Just(test.scheduledAt)))
															},
															_1: {
																ctor: '::',
																_0: {
																	ctor: '_Tuple2',
																	_0: 'History',
																	_1: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$href(
																				A2(_elm_lang$core$Basics_ops['++'], '#test-history/', test.id)),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('History'),
																			_1: {ctor: '[]'}
																		})
																},
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		historyStats);
	var viewRow = function (_p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$html$Html$tr,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$width(180),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p12._0),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _p12._1,
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	};
	return A2(
		_elm_lang$html$Html$table,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('job-view'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '50px'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		A2(_elm_lang$core$List$map, viewRow, rows));
};
var _Giga_dev$newman$Pages_Test$view = function (model) {
	var _p13 = model.test;
	if (_p13.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Loading data...'),
				_1: {ctor: '[]'}
			});
	} else {
		var _p14 = _p13._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('text'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Details for test ',
								A2(_elm_lang$core$String$join, ' ', _p14.$arguments))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Pages_Test$viewTest(_p14),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _Giga_dev$newman$Pages_Test$initModel = {test: _elm_lang$core$Maybe$Nothing};
var _Giga_dev$newman$Pages_Test$Model = function (a) {
	return {test: a};
};
var _Giga_dev$newman$Pages_Test$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Pages_Test$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Pages_Test$WebSocketEvent);
};
var _Giga_dev$newman$Pages_Test$GetTestDataCompleted = function (a) {
	return {ctor: 'GetTestDataCompleted', _0: a};
};
var _Giga_dev$newman$Pages_Test$getTestDataCmd = function (testId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_Test$GetTestDataCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/test/', testId),
			_Giga_dev$newman$Utils_Types$decodeTest));
};
var _Giga_dev$newman$Pages_Test$initCmd = function (testId) {
	return _Giga_dev$newman$Pages_Test$getTestDataCmd(testId);
};

var _Giga_dev$newman$Views_TestHistoryTable$filterQuery = F2(
	function (query, testHistory) {
		return (_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(query),
			0) || (A2(_elm_lang$core$String$startsWith, query, testHistory.test.status) || (A2(_elm_lang$core$String$startsWith, query, testHistory.test.jobId) || (A2(_elm_lang$core$String$startsWith, query, testHistory.job.buildName) || (A2(_elm_lang$core$String$startsWith, query, testHistory.job.buildBranch) || A2(_elm_lang$core$String$startsWith, query, testHistory.test.assignedAgent)))))) ? true : false;
	});
var _Giga_dev$newman$Views_TestHistoryTable$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'First':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$first(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Prev':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$prev(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Next':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$next(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Last':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: _jschomay$elm_paginate$Paginate$last(model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GoTo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							paginated: A2(_jschomay$elm_paginate$Paginate$goTo, _p0._0, model.paginated)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p1 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							query: _p1,
							paginated: A2(
								_jschomay$elm_paginate$Paginate$fromList,
								model.pageSize,
								A2(
									_elm_lang$core$List$filter,
									_Giga_dev$newman$Views_TestHistoryTable$filterQuery(_p1),
									model.all))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _Giga_dev$newman$Views_TestHistoryTable$init = function (list) {
	var aa = A2(_elm_lang$core$Debug$log, 'TestHistoryTable', 'init is called!');
	var pageSize = 25;
	return {
		all: list,
		paginated: A2(_jschomay$elm_paginate$Paginate$fromList, pageSize, list),
		pageSize: pageSize,
		query: ''
	};
};
var _Giga_dev$newman$Views_TestHistoryTable$Model = F4(
	function (a, b, c, d) {
		return {all: a, paginated: b, pageSize: c, query: d};
	});
var _Giga_dev$newman$Views_TestHistoryTable$FilterQuery = function (a) {
	return {ctor: 'FilterQuery', _0: a};
};
var _Giga_dev$newman$Views_TestHistoryTable$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Views_TestHistoryTable$Prev = {ctor: 'Prev'};
var _Giga_dev$newman$Views_TestHistoryTable$Next = {ctor: 'Next'};
var _Giga_dev$newman$Views_TestHistoryTable$Last = {ctor: 'Last'};
var _Giga_dev$newman$Views_TestHistoryTable$First = {ctor: 'First'};
var _Giga_dev$newman$Views_TestHistoryTable$RUNNING = {ctor: 'RUNNING'};
var _Giga_dev$newman$Views_TestHistoryTable$FAIL = {ctor: 'FAIL'};
var _Giga_dev$newman$Views_TestHistoryTable$SUCCESS = {ctor: 'SUCCESS'};
var _Giga_dev$newman$Views_TestHistoryTable$PENDING = {ctor: 'PENDING'};
var _Giga_dev$newman$Views_TestHistoryTable$toTestStatus = function (str) {
	var _p2 = str;
	switch (_p2) {
		case 'PENDING':
			return _Giga_dev$newman$Views_TestHistoryTable$PENDING;
		case 'SUCCESS':
			return _Giga_dev$newman$Views_TestHistoryTable$SUCCESS;
		case 'FAIL':
			return _Giga_dev$newman$Views_TestHistoryTable$FAIL;
		case 'RUNNING':
			return _Giga_dev$newman$Views_TestHistoryTable$RUNNING;
		default:
			return _Giga_dev$newman$Views_TestHistoryTable$FAIL;
	}
};
var _Giga_dev$newman$Views_TestHistoryTable$viewRecord = function (testHistory) {
	var dateFormat = function (date) {
		return A2(
			_ryannhg$elm_date_format$DateFormat$format,
			_Giga_dev$newman$Utils_Common$dateTimeDateFormat,
			_elm_lang$core$Date$fromTime(
				_elm_lang$core$Basics$toFloat(date)));
	};
	var diffTime = A2(
		_rluiten$elm_date_extra$Date_Extra_Duration$diff,
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(testHistory.test.endTime)),
		_elm_lang$core$Date$fromTime(
			_elm_lang$core$Basics$toFloat(testHistory.test.startTime)));
	var durationText = function () {
		var _p3 = {ctor: '_Tuple3', _0: diffTime.hour, _1: diffTime.minute, _2: diffTime.second};
		if (_p3._0 === 0) {
			if (_p3._1 === 0) {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p3._2),
					' seconds');
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p3._1),
					' minutes');
			}
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(_p3._0),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' hours and ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p3._1),
						' minutes')));
		}
	}();
	var status = function () {
		var _p4 = _Giga_dev$newman$Views_TestHistoryTable$toTestStatus(testHistory.test.status);
		switch (_p4.ctor) {
			case 'RUNNING':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeInfo;
			case 'PENDING':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badge;
			case 'SUCCESS':
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeSuccess;
			default:
				return _rundis$elm_bootstrap$Bootstrap_Badge$badgeDanger;
		}
	}();
	return A2(
		_elm_lang$html$Html$tr,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$td,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(_elm_lang$core$Basics_ops['++'], '#test/', testHistory.test.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(testHistory.test.id),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$td,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$href(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'#job/',
										A2(_elm_lang$core$Basics_ops['++'], testHistory.test.jobId, '/ALL'))),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(testHistory.test.jobId),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href(
										A2(_elm_lang$core$Basics_ops['++'], '#build/', testHistory.job.buildId)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											testHistory.job.buildName,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'(',
												A2(_elm_lang$core$Basics_ops['++'], testHistory.job.buildBranch, ')')))),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#jobConfig/', testHistory.job.jobConfigId)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(testHistory.job.jobConfigName),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										dateFormat(testHistory.test.endTime)),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$td,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(durationText),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(testHistory.test.runNumber)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(testHistory.test.assignedAgent),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$td,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														status,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(testHistory.test.status),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$td,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$span,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$title(testHistory.test.errorMessage),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(testHistory.test.errorMessage),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _Giga_dev$newman$Views_TestHistoryTable$viewTable = function (model) {
	var customPager = F2(
		function (f, paginated) {
			var maxPagesToShow = 10;
			var totalPages = _jschomay$elm_paginate$Paginate$totalPages(paginated);
			var currentPage = _jschomay$elm_paginate$Paginate$currentPage(paginated);
			var leftBound = A2(_elm_lang$core$Basics$max, ((((currentPage - 1) / maxPagesToShow) | 0) * maxPagesToShow) + 1, 1);
			var rightBound = A2(_elm_lang$core$Basics$min, ((((currentPage - 1) / maxPagesToShow) | 0) * maxPagesToShow) + maxPagesToShow, totalPages);
			return A2(
				_elm_lang$core$List$map,
				function (i) {
					return A2(
						f,
						i,
						_elm_lang$core$Native_Utils.eq(
							i,
							_jschomay$elm_paginate$Paginate$currentPage(paginated)));
				},
				A2(_elm_lang$core$List$range, leftBound, rightBound));
		});
	var pagerButtonView = F2(
		function (index, isActive) {
			var _p5 = isActive;
			if (_p5 === true) {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item active'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('sr-only'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('(current)'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					});
			} else {
				return A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-item'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_Giga_dev$newman$Views_TestHistoryTable$GoTo(index)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-link'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(index)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					});
			}
		});
	var nextButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isLast(model.paginated)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$Next),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('›'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isLast(model.paginated)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$Last),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('»'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var prevButtons = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('page-item'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'disabled',
								_1: _jschomay$elm_paginate$Paginate$isFirst(model.paginated)
							},
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$First),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-link'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('«'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('page-item'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'disabled',
									_1: _jschomay$elm_paginate$Paginate$isFirst(model.paginated)
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_Giga_dev$newman$Views_TestHistoryTable$Prev),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-link'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('‹'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	};
	var pagination = A2(
		_elm_lang$html$Html$nav,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('pagination '),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					prevButtons,
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(customPager, pagerButtonView, model.paginated),
						nextButtons))),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('form-inline'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form-group'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('btn-group'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$text(
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$onInput(_Giga_dev$newman$Views_TestHistoryTable$FilterQuery),
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$placeholder('Filter'),
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$value(model.query),
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Form_Input$attrs(
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('filterinput'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title('Clear filter'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('ion-close-circled searchclear'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(
															_Giga_dev$newman$Views_TestHistoryTable$FilterQuery('')),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form-group'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: pagination,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('table table-sm table-bordered table-striped table-nowrap table-hover'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$thead,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$th,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$width(65),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Test Id'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$th,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$width(105),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Job Id'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$th,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$width(65),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Build'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$th,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$width(65),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Job Configuration'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$th,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$width(65),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('End Time'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$th,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$width(50),
																	_1: {ctor: '[]'}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('Duration'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$th,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$width(30),
																		_1: {ctor: '[]'}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Run Num'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$th,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$width(70),
																			_1: {ctor: '[]'}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('Agent ID'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$th,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$width(30),
																				_1: {ctor: '[]'}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Status'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$th,
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$width(155),
																					_1: {ctor: '[]'}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text('Error Message'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tbody,
								{ctor: '[]'},
								A2(
									_elm_lang$core$List$map,
									_Giga_dev$newman$Views_TestHistoryTable$viewRecord,
									_jschomay$elm_paginate$Paginate$page(model.paginated))),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: pagination,
					_1: {ctor: '[]'}
				}
			}
		});
};

var _Giga_dev$newman$Pages_TestHistory$initModel = {
	table: _Giga_dev$newman$Views_TestHistoryTable$init(
		{ctor: '[]'}),
	$arguments: {ctor: '[]'}
};
var _Giga_dev$newman$Pages_TestHistory$parseBuildId = _evancz$url_parser$UrlParser$string;
var _Giga_dev$newman$Pages_TestHistory$Model = F2(
	function (a, b) {
		return {table: a, $arguments: b};
	});
var _Giga_dev$newman$Pages_TestHistory$TestHistoryTableMsg = function (a) {
	return {ctor: 'TestHistoryTableMsg', _0: a};
};
var _Giga_dev$newman$Pages_TestHistory$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('text'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Test History'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h4,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Arguments: ',
								A2(_elm_lang$core$String$join, ' ', model.$arguments))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$map,
						_Giga_dev$newman$Pages_TestHistory$TestHistoryTableMsg,
						_Giga_dev$newman$Views_TestHistoryTable$viewTable(model.table)),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _Giga_dev$newman$Pages_TestHistory$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'GetTestHistoryCompleted') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Ok') {
				var _p3 = _p1._0;
				var $arguments = function () {
					var _p2 = _elm_lang$core$List$head(_p3);
					if (_p2.ctor === 'Just') {
						return _p2._0.test.$arguments;
					} else {
						return {ctor: '[]'};
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							$arguments: $arguments,
							table: _Giga_dev$newman$Views_TestHistoryTable$init(_p3)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		} else {
			var _p4 = A2(_Giga_dev$newman$Views_TestHistoryTable$update, _p0._0, model.table);
			var updatedTableModel = _p4._0;
			var cmd = _p4._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{table: updatedTableModel}),
				_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Pages_TestHistory$TestHistoryTableMsg, cmd)
			};
		}
	});
var _Giga_dev$newman$Pages_TestHistory$GetTestHistoryCompleted = function (a) {
	return {ctor: 'GetTestHistoryCompleted', _0: a};
};
var _Giga_dev$newman$Pages_TestHistory$getTestHistory = function (testId) {
	return A2(
		_elm_lang$http$Http$send,
		_Giga_dev$newman$Pages_TestHistory$GetTestHistoryCompleted,
		A2(
			_elm_lang$http$Http$get,
			A2(_elm_lang$core$Basics_ops['++'], '/api/newman/test-history?id=', testId),
			_Giga_dev$newman$Utils_Types$decodeTestHistoryItems));
};
var _Giga_dev$newman$Pages_TestHistory$initCmd = function (buildId) {
	return _Giga_dev$newman$Pages_TestHistory$getTestHistory(buildId);
};

var _myrho$elm_round$Round$funNum = F3(
	function (fun, s, fl) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			0 / 0,
			_elm_lang$core$Result$toMaybe(
				_elm_lang$core$String$toFloat(
					A2(fun, s, fl))));
	});
var _myrho$elm_round$Round$increaseNum = function (_p0) {
	var _p1 = _p0;
	var _p4 = _p1._1;
	var _p3 = _p1._0;
	if (_elm_lang$core$Native_Utils.eq(
		_p3,
		_elm_lang$core$Native_Utils.chr('9'))) {
		var _p2 = _elm_lang$core$String$uncons(_p4);
		if (_p2.ctor === 'Nothing') {
			return '01';
		} else {
			return A2(
				_elm_lang$core$String$cons,
				_elm_lang$core$Native_Utils.chr('0'),
				_myrho$elm_round$Round$increaseNum(_p2._0));
		}
	} else {
		var c = _elm_lang$core$Char$toCode(_p3);
		return ((_elm_lang$core$Native_Utils.cmp(c, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(c, 57) < 0)) ? A2(
			_elm_lang$core$String$cons,
			_elm_lang$core$Char$fromCode(c + 1),
			_p4) : '0';
	}
};
var _myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			_elm_lang$core$List$any,
			function (c) {
				return (!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('0'))) && (!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('.')));
			},
			_elm_lang$core$String$toList(str));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			(signed && isNotZero) ? '-' : '',
			str);
	});
var _myrho$elm_round$Round$splitComma = function (str) {
	var _p5 = A2(_elm_lang$core$String$split, '.', str);
	if (_p5.ctor === '::') {
		if (_p5._1.ctor === '::') {
			return {ctor: '_Tuple2', _0: _p5._0, _1: _p5._1._0};
		} else {
			return {ctor: '_Tuple2', _0: _p5._0, _1: '0'};
		}
	} else {
		return {ctor: '_Tuple2', _0: '0', _1: '0'};
	}
};
var _myrho$elm_round$Round$toDecimal = function (fl) {
	var _p6 = A2(
		_elm_lang$core$String$split,
		'e',
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Basics$abs(fl)));
	if (_p6.ctor === '::') {
		if (_p6._1.ctor === '::') {
			var _p10 = _p6._1._0;
			var _p7 = _myrho$elm_round$Round$splitComma(_p6._0);
			var before = _p7._0;
			var after = _p7._1;
			var total = A2(_elm_lang$core$Basics_ops['++'], before, after);
			var e = A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$Result$toMaybe(
					_elm_lang$core$String$toInt(
						A2(_elm_lang$core$String$startsWith, '+', _p10) ? A2(_elm_lang$core$String$dropLeft, 1, _p10) : _p10)));
			var zeroed = (_elm_lang$core$Native_Utils.cmp(e, 0) < 0) ? A2(
				_elm_lang$core$Maybe$withDefault,
				'0',
				A2(
					_elm_lang$core$Maybe$map,
					function (_p8) {
						var _p9 = _p8;
						return A2(
							_elm_lang$core$Basics_ops['++'],
							_p9._0,
							A2(_elm_lang$core$Basics_ops['++'], '.', _p9._1));
					},
					A2(
						_elm_lang$core$Maybe$map,
						_elm_lang$core$Tuple$mapFirst(_elm_lang$core$String$fromChar),
						_elm_lang$core$String$uncons(
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$repeat,
									_elm_lang$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				_elm_lang$core$String$padRight,
				e + 1,
				_elm_lang$core$Native_Utils.chr('0'),
				total);
			return A2(
				_elm_lang$core$Basics_ops['++'],
				(_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? '-' : '',
				zeroed);
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				(_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? '-' : '',
				_p6._0);
		}
	} else {
		return '';
	}
};
var _myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if (_elm_lang$core$Basics$isInfinite(fl) || _elm_lang$core$Basics$isNaN(fl)) {
			return _elm_lang$core$Basics$toString(fl);
		} else {
			var signed = _elm_lang$core$Native_Utils.cmp(fl, 0) < 0;
			var _p11 = _myrho$elm_round$Round$splitComma(
				_myrho$elm_round$Round$toDecimal(
					_elm_lang$core$Basics$abs(fl)));
			var before = _p11._0;
			var after = _p11._1;
			var r = _elm_lang$core$String$length(before) + s;
			var roundDigitIndex = A2(_elm_lang$core$Basics$max, 1, r);
			var normalized = A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$String$repeat,
					_elm_lang$core$Basics$negate(r) + 1,
					'0'),
				A3(
					_elm_lang$core$String$padRight,
					r,
					_elm_lang$core$Native_Utils.chr('0'),
					A2(_elm_lang$core$Basics_ops['++'], before, after)));
			var totalLen = _elm_lang$core$String$length(normalized);
			var increase = A2(
				functor,
				signed,
				A3(_elm_lang$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3(_elm_lang$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? _elm_lang$core$String$reverse(
				A2(
					_elm_lang$core$Maybe$withDefault,
					'1',
					A2(
						_elm_lang$core$Maybe$map,
						_myrho$elm_round$Round$increaseNum,
						_elm_lang$core$String$uncons(
							_elm_lang$core$String$reverse(remains))))) : remains;
			var numLen = _elm_lang$core$String$length(num);
			var numZeroed = _elm_lang$core$Native_Utils.eq(num, '0') ? num : ((_elm_lang$core$Native_Utils.cmp(s, 0) < 1) ? A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				num,
				A2(
					_elm_lang$core$String$repeat,
					_elm_lang$core$Basics$abs(s),
					'0')) : ((_elm_lang$core$Native_Utils.cmp(
				s,
				_elm_lang$core$String$length(after)) < 0) ? A2(
				_elm_lang$core$Basics_ops['++'],
				A3(_elm_lang$core$String$slice, 0, numLen - s, num),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'.',
					A3(_elm_lang$core$String$slice, numLen - s, numLen, num))) : A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				A2(_elm_lang$core$Basics_ops['++'], before, '.'),
				A3(
					_elm_lang$core$String$padRight,
					s,
					_elm_lang$core$Native_Utils.chr('0'),
					after))));
			return A2(_myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var _myrho$elm_round$Round$round = _myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _p12 = _elm_lang$core$String$uncons(str);
			if (_p12.ctor === 'Nothing') {
				return false;
			} else {
				if (_p12._0._0.valueOf() === '5') {
					if (_p12._0._1 === '') {
						return !signed;
					} else {
						return true;
					}
				} else {
					return function ($int) {
						return ((_elm_lang$core$Native_Utils.cmp($int, 53) > 0) && signed) || ((_elm_lang$core$Native_Utils.cmp($int, 53) > -1) && (!signed));
					}(
						_elm_lang$core$Char$toCode(_p12._0._0));
				}
			}
		}));
var _myrho$elm_round$Round$roundNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$round);
var _myrho$elm_round$Round$ceiling = _myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _p13 = _elm_lang$core$String$uncons(str);
			if (_p13.ctor === 'Nothing') {
				return false;
			} else {
				if ((_p13._0.ctor === '_Tuple2') && (_p13._0._0.valueOf() === '0')) {
					return A2(
						F2(
							function (x, y) {
								return x && y;
							}),
						!signed,
						A2(
							_elm_lang$core$List$any,
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								})(
								_elm_lang$core$Native_Utils.chr('0')),
							_elm_lang$core$String$toList(_p13._0._1)));
				} else {
					return !signed;
				}
			}
		}));
var _myrho$elm_round$Round$ceilingNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$ceiling);
var _myrho$elm_round$Round$floor = _myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _p14 = _elm_lang$core$String$uncons(str);
			if (_p14.ctor === 'Nothing') {
				return false;
			} else {
				if ((_p14._0.ctor === '_Tuple2') && (_p14._0._0.valueOf() === '0')) {
					return A2(
						F2(
							function (x, y) {
								return x && y;
							}),
						signed,
						A2(
							_elm_lang$core$List$any,
							F2(
								function (x, y) {
									return !_elm_lang$core$Native_Utils.eq(x, y);
								})(
								_elm_lang$core$Native_Utils.chr('0')),
							_elm_lang$core$String$toList(_p14._0._1)));
				} else {
					return signed;
				}
			}
		}));
var _myrho$elm_round$Round$floorCom = F2(
	function (s, fl) {
		return (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? A2(_myrho$elm_round$Round$ceiling, s, fl) : A2(_myrho$elm_round$Round$floor, s, fl);
	});
var _myrho$elm_round$Round$floorNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$floorCom);
var _myrho$elm_round$Round$ceilingCom = F2(
	function (s, fl) {
		return (_elm_lang$core$Native_Utils.cmp(fl, 0) < 0) ? A2(_myrho$elm_round$Round$floor, s, fl) : A2(_myrho$elm_round$Round$ceiling, s, fl);
	});
var _myrho$elm_round$Round$ceilingNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$ceilingCom);
var _myrho$elm_round$Round$floorNum = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$floor);
var _myrho$elm_round$Round$roundCom = _myrho$elm_round$Round$roundFun(
	F2(
		function (_p15, $int) {
			return A2(
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
					}),
				53,
				_elm_lang$core$Char$toCode(
					A2(
						_elm_lang$core$Maybe$withDefault,
						_elm_lang$core$Native_Utils.chr('0'),
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$Tuple$first,
							_elm_lang$core$String$uncons($int)))));
		}));
var _myrho$elm_round$Round$roundNumCom = _myrho$elm_round$Round$funNum(_myrho$elm_round$Round$roundCom);
var _myrho$elm_round$Round$truncate = function (n) {
	return (_elm_lang$core$Native_Utils.cmp(n, 0) < 0) ? _elm_lang$core$Basics$ceiling(n) : _elm_lang$core$Basics$floor(n);
};

var _basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex = _elm_lang$core$Regex$regex('^(\\d+\\.[^0]*)(0+)$');
var _basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex = _elm_lang$core$Regex$regex(
	_elm_lang$core$Regex$escape('.'));
var _basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces = F2(
	function (settings, num) {
		var rounded = A2(_myrho$elm_round$Round$floor, settings.decimalPlaces, num);
		var withoutTrailingZeroes = A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			_basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex,
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_lang$core$String$join,
					'',
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Maybe$withDefault(''),
						A2(_elm_lang$core$List$take, 1, _p1.submatches)));
			},
			rounded);
		var withoutTrailingDot = A2(_elm_lang$core$String$endsWith, '.', withoutTrailingZeroes) ? A2(_elm_lang$core$String$dropRight, 1, withoutTrailingZeroes) : withoutTrailingZeroes;
		return _elm_lang$core$Native_Utils.eq(settings.decimalSeparator, '.') ? withoutTrailingDot : A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			_basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex,
			function (_p2) {
				return settings.decimalSeparator;
			},
			withoutTrailingDot);
	});
var _basti1302$elm_human_readable_filesize$Filesize$unknownUnit = {minimumSize: 1, abbreviation: '?'};
var _basti1302$elm_human_readable_filesize$Filesize$base2UnitList = {
	ctor: '::',
	_0: {minimumSize: 1, abbreviation: 'B'},
	_1: {
		ctor: '::',
		_0: {minimumSize: 1024, abbreviation: 'KiB'},
		_1: {
			ctor: '::',
			_0: {minimumSize: 1048576, abbreviation: 'MiB'},
			_1: {
				ctor: '::',
				_0: {minimumSize: 1073741824, abbreviation: 'GiB'},
				_1: {
					ctor: '::',
					_0: {minimumSize: 1099511627776, abbreviation: 'TiB'},
					_1: {
						ctor: '::',
						_0: {minimumSize: 1125899906842624, abbreviation: 'PiB'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	}
};
var _basti1302$elm_human_readable_filesize$Filesize$base10UnitList = {
	ctor: '::',
	_0: {minimumSize: 1, abbreviation: 'B'},
	_1: {
		ctor: '::',
		_0: {minimumSize: 1000, abbreviation: 'kB'},
		_1: {
			ctor: '::',
			_0: {minimumSize: 1000000, abbreviation: 'MB'},
			_1: {
				ctor: '::',
				_0: {minimumSize: 1000000000, abbreviation: 'GB'},
				_1: {
					ctor: '::',
					_0: {minimumSize: 1000000000000, abbreviation: 'TB'},
					_1: {
						ctor: '::',
						_0: {minimumSize: 1000000000000000, abbreviation: 'PB'},
						_1: {
							ctor: '::',
							_0: {minimumSize: 1000000000000000000, abbreviation: 'EB'},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	}
};
var _basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList = function (units) {
	var _p3 = units;
	if (_p3.ctor === 'Base10') {
		return _basti1302$elm_human_readable_filesize$Filesize$base10UnitList;
	} else {
		return _basti1302$elm_human_readable_filesize$Filesize$base2UnitList;
	}
};
var _basti1302$elm_human_readable_filesize$Filesize$formatWith = F2(
	function (settings, num) {
		if (_elm_lang$core$Native_Utils.eq(num, 0)) {
			return '0 B';
		} else {
			var unitDefinitionList = _basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList(settings.units);
			var _p4 = (_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$negate(num),
				_1: '-'
			} : {ctor: '_Tuple2', _0: num, _1: ''};
			var num2 = _p4._0;
			var negativePrefix = _p4._1;
			var unitDefinition = A2(
				_elm_lang$core$Maybe$withDefault,
				_basti1302$elm_human_readable_filesize$Filesize$unknownUnit,
				_elm_lang$core$List$head(
					_elm_lang$core$List$reverse(
						A2(
							_elm_lang$core$List$filter,
							function (unitDef) {
								return _elm_lang$core$Native_Utils.cmp(num2, unitDef.minimumSize) > -1;
							},
							unitDefinitionList))));
			var formattedNumber = A2(
				_basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces,
				settings,
				_elm_lang$core$Basics$toFloat(num2) / _elm_lang$core$Basics$toFloat(unitDefinition.minimumSize));
			return A2(
				_elm_lang$core$Basics_ops['++'],
				negativePrefix,
				A2(
					_elm_lang$core$Basics_ops['++'],
					formattedNumber,
					A2(_elm_lang$core$Basics_ops['++'], ' ', unitDefinition.abbreviation)));
		}
	});
var _basti1302$elm_human_readable_filesize$Filesize$Settings = F3(
	function (a, b, c) {
		return {units: a, decimalPlaces: b, decimalSeparator: c};
	});
var _basti1302$elm_human_readable_filesize$Filesize$UnitDefinition = F2(
	function (a, b) {
		return {minimumSize: a, abbreviation: b};
	});
var _basti1302$elm_human_readable_filesize$Filesize$Base2 = {ctor: 'Base2'};
var _basti1302$elm_human_readable_filesize$Filesize$Base10 = {ctor: 'Base10'};
var _basti1302$elm_human_readable_filesize$Filesize$defaultSettings = {units: _basti1302$elm_human_readable_filesize$Filesize$Base10, decimalPlaces: 2, decimalSeparator: '.'};
var _basti1302$elm_human_readable_filesize$Filesize$format = _basti1302$elm_human_readable_filesize$Filesize$formatWith(_basti1302$elm_human_readable_filesize$Filesize$defaultSettings);
var _basti1302$elm_human_readable_filesize$Filesize$formatBase2 = _basti1302$elm_human_readable_filesize$Filesize$formatWith(
	_elm_lang$core$Native_Utils.update(
		_basti1302$elm_human_readable_filesize$Filesize$defaultSettings,
		{units: _basti1302$elm_human_readable_filesize$Filesize$Base2}));

var _Giga_dev$newman$Views_TopBar$view = function (model) {
	var agentsCountString = A2(
		_elm_lang$core$Basics_ops['++'],
		'Agents count: ',
		_elm_lang$core$Basics$toString(model.agentsCount));
	var failingAgentsString = A2(
		_elm_lang$core$Basics_ops['++'],
		'Failing agents: ',
		_elm_lang$core$Basics$toString(model.failingAgents));
	var userNameString = A2(_elm_lang$core$Basics_ops['++'], 'Hello ', model.user.userName);
	var size = A2(
		_basti1302$elm_human_readable_filesize$Filesize$formatWith,
		_elm_lang$core$Native_Utils.update(
			_basti1302$elm_human_readable_filesize$Filesize$defaultSettings,
			{decimalSeparator: ','}),
		model.logsSize);
	var logSizeString = A2(_elm_lang$core$Basics_ops['++'], 'Logs size: ', size);
	return A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('topbar-info'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					userNameString,
					A2(
						_elm_lang$core$Basics_ops['++'],
						',  ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							failingAgentsString,
							A2(
								_elm_lang$core$Basics_ops['++'],
								',  ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									agentsCountString,
									A2(_elm_lang$core$Basics_ops['++'], ',  ', logSizeString))))))),
			_1: {ctor: '[]'}
		});
};
var _Giga_dev$newman$Views_TopBar$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetFailingAgentsCompleted':
				var _p1 = _p0._0;
				if (_p1.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{failingAgents: _p1._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'top bar GetFailingAgentsCompleted failed', _p1._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetAgentsCountCompleted':
				var _p2 = _p0._0;
				if (_p2.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{agentsCount: _p2._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'top bar GetAgentsCountCompleted failed', _p2._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetLogsSizeCompleted':
				var _p3 = _p0._0;
				if (_p3.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{logsSize: _p3._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'top bar GetLogsSizeCompleted failed', _p3._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetUserNameCompleted':
				var _p4 = _p0._0;
				if (_p4.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{user: _p4._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var a = A2(_elm_lang$core$Debug$log, 'top bar GetUserNameCompleted failed', _p4._0);
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p5 = _p0._0;
				switch (_p5.ctor) {
					case 'ModifiedAgentsCount':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{agentsCount: _p5._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'ModifiedFailingAgents':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{failingAgents: _p5._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _Giga_dev$newman$Views_TopBar$Model = F4(
	function (a, b, c, d) {
		return {failingAgents: a, agentsCount: b, logsSize: c, user: d};
	});
var _Giga_dev$newman$Views_TopBar$WebSocketEvent = function (a) {
	return {ctor: 'WebSocketEvent', _0: a};
};
var _Giga_dev$newman$Views_TopBar$handleEvent = function (event) {
	return A2(_Giga_dev$newman$Utils_WebSocket_ops['=>'], event, _Giga_dev$newman$Views_TopBar$WebSocketEvent);
};
var _Giga_dev$newman$Views_TopBar$GetUserNameCompleted = function (a) {
	return {ctor: 'GetUserNameCompleted', _0: a};
};
var _Giga_dev$newman$Views_TopBar$getUserNameCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Views_TopBar$GetUserNameCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/user', _Giga_dev$newman$Utils_Types$decodeUser));
var _Giga_dev$newman$Views_TopBar$GetLogsSizeCompleted = function (a) {
	return {ctor: 'GetLogsSizeCompleted', _0: a};
};
var _Giga_dev$newman$Views_TopBar$getLogsSizeCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Views_TopBar$GetLogsSizeCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/log/size', _elm_lang$core$Json_Decode$int));
var _Giga_dev$newman$Views_TopBar$GetAgentsCountCompleted = function (a) {
	return {ctor: 'GetAgentsCountCompleted', _0: a};
};
var _Giga_dev$newman$Views_TopBar$getAgentsCountCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Views_TopBar$GetAgentsCountCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/agents/count', _elm_lang$core$Json_Decode$int));
var _Giga_dev$newman$Views_TopBar$GetFailingAgentsCompleted = function (a) {
	return {ctor: 'GetFailingAgentsCompleted', _0: a};
};
var _Giga_dev$newman$Views_TopBar$getFailingAgentsCmd = A2(
	_elm_lang$http$Http$send,
	_Giga_dev$newman$Views_TopBar$GetFailingAgentsCompleted,
	A2(_elm_lang$http$Http$get, '/api/newman/agents/failing', _elm_lang$core$Json_Decode$int));
var _Giga_dev$newman$Views_TopBar$init = {
	ctor: '_Tuple2',
	_0: {
		failingAgents: 0,
		agentsCount: 0,
		logsSize: 0,
		user: {userName: 'unknown user'}
	},
	_1: _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: _Giga_dev$newman$Views_TopBar$getFailingAgentsCmd,
			_1: {
				ctor: '::',
				_0: _Giga_dev$newman$Views_TopBar$getAgentsCountCmd,
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Views_TopBar$getLogsSizeCmd,
					_1: {
						ctor: '::',
						_0: _Giga_dev$newman$Views_TopBar$getUserNameCmd,
						_1: {ctor: '[]'}
					}
				}
			}
		})
};

var _Giga_dev$newman$Main$bodyWrapper = function (inner) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('page-wrapper'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container-fluid'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('row'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('col-lg-12'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h1,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('page-header'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Header here'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('row'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: inner,
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _Giga_dev$newman$Main$routeToString = function (route) {
	var pieces = function () {
		var _p0 = route;
		switch (_p0.ctor) {
			case 'HomeRoute':
				return {ctor: '[]'};
			case 'SubmitNewJobRoute':
				return {
					ctor: '::',
					_0: 'submit-new-job',
					_1: {ctor: '[]'}
				};
			case 'JobsRoute':
				return {
					ctor: '::',
					_0: 'jobs',
					_1: {ctor: '[]'}
				};
			case 'BuildsRoute':
				return {
					ctor: '::',
					_0: 'builds',
					_1: {ctor: '[]'}
				};
			case 'SuitesRoute':
				return {
					ctor: '::',
					_0: 'suites',
					_1: {ctor: '[]'}
				};
			case 'AgentsRoute':
				return {
					ctor: '::',
					_0: 'agents',
					_1: {ctor: '[]'}
				};
			case 'JobConfigsRoute':
				return {
					ctor: '::',
					_0: 'jobConfigs',
					_1: {ctor: '[]'}
				};
			case 'ManageNewmanRoute':
				return {
					ctor: '::',
					_0: 'manageNewman',
					_1: {ctor: '[]'}
				};
			case 'NewJobConfigsRoute':
				return {
					ctor: '::',
					_0: 'newJobConfig',
					_1: {ctor: '[]'}
				};
			case 'JobConfigRoute':
				return {
					ctor: '::',
					_0: 'jobConfig',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					}
				};
			case 'JobRoute':
				return {
					ctor: '::',
					_0: 'job',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {
							ctor: '::',
							_0: _p0._1,
							_1: {ctor: '[]'}
						}
					}
				};
			case 'BuildRoute':
				return {
					ctor: '::',
					_0: 'build',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					}
				};
			case 'SuiteRoute':
				return {
					ctor: '::',
					_0: 'suite',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					}
				};
			case 'TestRoute':
				return {
					ctor: '::',
					_0: 'test',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					}
				};
			default:
				return {
					ctor: '::',
					_0: 'test-history',
					_1: {
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					}
				};
		}
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'#',
		A2(_elm_lang$core$String$join, '/', pieces));
};
var _Giga_dev$newman$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {currentPage: a, currentRoute: b, submitNewJobModel: c, jobsModel: d, buildsModel: e, agentsModel: f, homeModel: g, suitesModel: h, jobConfigsModel: i, newJobConfigsModel: j, manageNewmanModel: k, topBarModel: l, webSocketModel: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _Giga_dev$newman$Main$TestHistoryRoute = function (a) {
	return {ctor: 'TestHistoryRoute', _0: a};
};
var _Giga_dev$newman$Main$TestRoute = function (a) {
	return {ctor: 'TestRoute', _0: a};
};
var _Giga_dev$newman$Main$SuiteRoute = function (a) {
	return {ctor: 'SuiteRoute', _0: a};
};
var _Giga_dev$newman$Main$BuildRoute = function (a) {
	return {ctor: 'BuildRoute', _0: a};
};
var _Giga_dev$newman$Main$JobRoute = F2(
	function (a, b) {
		return {ctor: 'JobRoute', _0: a, _1: b};
	});
var _Giga_dev$newman$Main$JobConfigRoute = function (a) {
	return {ctor: 'JobConfigRoute', _0: a};
};
var _Giga_dev$newman$Main$ManageNewmanRoute = {ctor: 'ManageNewmanRoute'};
var _Giga_dev$newman$Main$NewJobConfigsRoute = {ctor: 'NewJobConfigsRoute'};
var _Giga_dev$newman$Main$JobConfigsRoute = {ctor: 'JobConfigsRoute'};
var _Giga_dev$newman$Main$SuitesRoute = {ctor: 'SuitesRoute'};
var _Giga_dev$newman$Main$AgentsRoute = {ctor: 'AgentsRoute'};
var _Giga_dev$newman$Main$BuildsRoute = {ctor: 'BuildsRoute'};
var _Giga_dev$newman$Main$JobsRoute = {ctor: 'JobsRoute'};
var _Giga_dev$newman$Main$SubmitNewJobRoute = {ctor: 'SubmitNewJobRoute'};
var _Giga_dev$newman$Main$HomeRoute = {ctor: 'HomeRoute'};
var _Giga_dev$newman$Main$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_Giga_dev$newman$Main$HomeRoute,
			_evancz$url_parser$UrlParser$s('')),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_Giga_dev$newman$Main$JobsRoute,
				_evancz$url_parser$UrlParser$s('jobs')),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_Giga_dev$newman$Main$SubmitNewJobRoute,
					_evancz$url_parser$UrlParser$s('submit-new-job')),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_Giga_dev$newman$Main$BuildsRoute,
						_evancz$url_parser$UrlParser$s('builds')),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_Giga_dev$newman$Main$AgentsRoute,
							_evancz$url_parser$UrlParser$s('agents')),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$url_parser$UrlParser$map,
								_Giga_dev$newman$Main$SuitesRoute,
								_evancz$url_parser$UrlParser$s('suites')),
							_1: {
								ctor: '::',
								_0: A2(
									_evancz$url_parser$UrlParser$map,
									_Giga_dev$newman$Main$JobConfigsRoute,
									_evancz$url_parser$UrlParser$s('jobConfigs')),
								_1: {
									ctor: '::',
									_0: A2(
										_evancz$url_parser$UrlParser$map,
										_Giga_dev$newman$Main$ManageNewmanRoute,
										_evancz$url_parser$UrlParser$s('manageNewman')),
									_1: {
										ctor: '::',
										_0: A2(
											_evancz$url_parser$UrlParser$map,
											_Giga_dev$newman$Main$JobConfigRoute,
											A2(
												_evancz$url_parser$UrlParser_ops['</>'],
												_evancz$url_parser$UrlParser$s('NewmanManageConfig'),
												_Giga_dev$newman$Pages_JobConfig$parseJobConfigId)),
										_1: {
											ctor: '::',
											_0: A2(
												_evancz$url_parser$UrlParser$map,
												_Giga_dev$newman$Main$NewJobConfigsRoute,
												_evancz$url_parser$UrlParser$s('newJobConfig')),
											_1: {
												ctor: '::',
												_0: A2(
													_evancz$url_parser$UrlParser$map,
													_Giga_dev$newman$Main$JobConfigRoute,
													A2(
														_evancz$url_parser$UrlParser_ops['</>'],
														_evancz$url_parser$UrlParser$s('jobConfig'),
														_Giga_dev$newman$Pages_JobConfig$parseJobConfigId)),
												_1: {
													ctor: '::',
													_0: A2(
														_evancz$url_parser$UrlParser$map,
														_Giga_dev$newman$Main$JobRoute,
														A2(
															_evancz$url_parser$UrlParser_ops['</>'],
															_evancz$url_parser$UrlParser$s('job'),
															A2(_evancz$url_parser$UrlParser_ops['</>'], _Giga_dev$newman$Pages_Job$parseJobId, _Giga_dev$newman$Pages_Job$parseRadioState))),
													_1: {
														ctor: '::',
														_0: A2(
															_evancz$url_parser$UrlParser$map,
															_Giga_dev$newman$Main$BuildRoute,
															A2(
																_evancz$url_parser$UrlParser_ops['</>'],
																_evancz$url_parser$UrlParser$s('build'),
																_Giga_dev$newman$Pages_Build$parseBuildId)),
														_1: {
															ctor: '::',
															_0: A2(
																_evancz$url_parser$UrlParser$map,
																_Giga_dev$newman$Main$SuiteRoute,
																A2(
																	_evancz$url_parser$UrlParser_ops['</>'],
																	_evancz$url_parser$UrlParser$s('suite'),
																	_Giga_dev$newman$Pages_Suite$parseSuiteId)),
															_1: {
																ctor: '::',
																_0: A2(
																	_evancz$url_parser$UrlParser$map,
																	_Giga_dev$newman$Main$TestRoute,
																	A2(
																		_evancz$url_parser$UrlParser_ops['</>'],
																		_evancz$url_parser$UrlParser$s('test'),
																		_evancz$url_parser$UrlParser$string)),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_evancz$url_parser$UrlParser$map,
																		_Giga_dev$newman$Main$TestHistoryRoute,
																		A2(
																			_evancz$url_parser$UrlParser_ops['</>'],
																			_evancz$url_parser$UrlParser$s('test-history'),
																			_evancz$url_parser$UrlParser$string)),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _Giga_dev$newman$Main$fromLocation = function (location) {
	return _elm_lang$core$String$isEmpty(location.hash) ? _elm_lang$core$Maybe$Just(_Giga_dev$newman$Main$HomeRoute) : A2(_evancz$url_parser$UrlParser$parseHash, _Giga_dev$newman$Main$route, location);
};
var _Giga_dev$newman$Main$TestHistoryPage = function (a) {
	return {ctor: 'TestHistoryPage', _0: a};
};
var _Giga_dev$newman$Main$TestPage = function (a) {
	return {ctor: 'TestPage', _0: a};
};
var _Giga_dev$newman$Main$SuitePage = function (a) {
	return {ctor: 'SuitePage', _0: a};
};
var _Giga_dev$newman$Main$BuildPage = function (a) {
	return {ctor: 'BuildPage', _0: a};
};
var _Giga_dev$newman$Main$JobPage = function (a) {
	return {ctor: 'JobPage', _0: a};
};
var _Giga_dev$newman$Main$JobConfigPage = function (a) {
	return {ctor: 'JobConfigPage', _0: a};
};
var _Giga_dev$newman$Main$NewJobConfigsPage = {ctor: 'NewJobConfigsPage'};
var _Giga_dev$newman$Main$ManageNewmanPage = {ctor: 'ManageNewmanPage'};
var _Giga_dev$newman$Main$JobConfigsPage = {ctor: 'JobConfigsPage'};
var _Giga_dev$newman$Main$SuitesPage = {ctor: 'SuitesPage'};
var _Giga_dev$newman$Main$AgentsPage = {ctor: 'AgentsPage'};
var _Giga_dev$newman$Main$BuildsPage = {ctor: 'BuildsPage'};
var _Giga_dev$newman$Main$JobsPage = {ctor: 'JobsPage'};
var _Giga_dev$newman$Main$SubmitNewJobPage = {ctor: 'SubmitNewJobPage'};
var _Giga_dev$newman$Main$HomePage = {ctor: 'HomePage'};
var _Giga_dev$newman$Main$routeToPage = function (route) {
	var _p1 = route;
	switch (_p1.ctor) {
		case 'HomeRoute':
			return _Giga_dev$newman$Main$HomePage;
		case 'SubmitNewJobRoute':
			return _Giga_dev$newman$Main$SubmitNewJobPage;
		case 'JobsRoute':
			return _Giga_dev$newman$Main$JobsPage;
		case 'BuildsRoute':
			return _Giga_dev$newman$Main$BuildsPage;
		case 'SuitesRoute':
			return _Giga_dev$newman$Main$SuitesPage;
		case 'AgentsRoute':
			return _Giga_dev$newman$Main$AgentsPage;
		case 'JobConfigsRoute':
			return _Giga_dev$newman$Main$JobConfigsPage;
		case 'NewJobConfigsRoute':
			return _Giga_dev$newman$Main$NewJobConfigsPage;
		case 'ManageNewmanRoute':
			return _Giga_dev$newman$Main$ManageNewmanPage;
		case 'JobConfigRoute':
			return _Giga_dev$newman$Main$JobConfigPage(
				_Giga_dev$newman$Pages_JobConfig$Model(_elm_lang$core$Maybe$Nothing));
		case 'JobRoute':
			return _Giga_dev$newman$Main$JobPage(
				A2(
					_Giga_dev$newman$Pages_Job$initModel,
					_p1._0,
					_Giga_dev$newman$Utils_Types$stringToRadioState(_p1._1)));
		case 'BuildRoute':
			return _Giga_dev$newman$Main$BuildPage(_Giga_dev$newman$Pages_Build$initModel);
		case 'SuiteRoute':
			return _Giga_dev$newman$Main$SuitePage(
				_Giga_dev$newman$Pages_Suite$Model(_elm_lang$core$Maybe$Nothing));
		case 'TestRoute':
			return _Giga_dev$newman$Main$TestPage(_Giga_dev$newman$Pages_Test$initModel);
		default:
			return _Giga_dev$newman$Main$TestHistoryPage(_Giga_dev$newman$Pages_TestHistory$initModel);
	}
};
var _Giga_dev$newman$Main$WebSocketMsg = function (a) {
	return {ctor: 'WebSocketMsg', _0: a};
};
var _Giga_dev$newman$Main$TestHistoryMsg = function (a) {
	return {ctor: 'TestHistoryMsg', _0: a};
};
var _Giga_dev$newman$Main$TopBarMsg = function (a) {
	return {ctor: 'TopBarMsg', _0: a};
};
var _Giga_dev$newman$Main$TestMsg = function (a) {
	return {ctor: 'TestMsg', _0: a};
};
var _Giga_dev$newman$Main$SuiteMsg = function (a) {
	return {ctor: 'SuiteMsg', _0: a};
};
var _Giga_dev$newman$Main$BuildMsg = function (a) {
	return {ctor: 'BuildMsg', _0: a};
};
var _Giga_dev$newman$Main$JobMsg = function (a) {
	return {ctor: 'JobMsg', _0: a};
};
var _Giga_dev$newman$Main$ManageNewmanMsg = function (a) {
	return {ctor: 'ManageNewmanMsg', _0: a};
};
var _Giga_dev$newman$Main$HomeMsg = function (a) {
	return {ctor: 'HomeMsg', _0: a};
};
var _Giga_dev$newman$Main$JobConfigMsg = function (a) {
	return {ctor: 'JobConfigMsg', _0: a};
};
var _Giga_dev$newman$Main$NewJobConfigMsg = function (a) {
	return {ctor: 'NewJobConfigMsg', _0: a};
};
var _Giga_dev$newman$Main$JobConfigsMsg = function (a) {
	return {ctor: 'JobConfigsMsg', _0: a};
};
var _Giga_dev$newman$Main$SuitesMsg = function (a) {
	return {ctor: 'SuitesMsg', _0: a};
};
var _Giga_dev$newman$Main$AgentsMsg = function (a) {
	return {ctor: 'AgentsMsg', _0: a};
};
var _Giga_dev$newman$Main$BuildsMsg = function (a) {
	return {ctor: 'BuildsMsg', _0: a};
};
var _Giga_dev$newman$Main$JobsMsg = function (a) {
	return {ctor: 'JobsMsg', _0: a};
};
var _Giga_dev$newman$Main$SubmitNewJobMsg = function (a) {
	return {ctor: 'SubmitNewJobMsg', _0: a};
};
var _Giga_dev$newman$Main$init = function (location) {
	var _p2 = _Giga_dev$newman$Views_TopBar$init;
	var topBarModel = _p2._0;
	var topBarCmd = _p2._1;
	var _p3 = _Giga_dev$newman$Pages_ManageNewman$init;
	var manageNewmanModel = _p3._0;
	var manageNewmanCmd = _p3._1;
	var _p4 = _Giga_dev$newman$Pages_Home$init;
	var homeModel = _p4._0;
	var homeCmd = _p4._1;
	var _p5 = _Giga_dev$newman$Pages_NewJobConfig$init;
	var newJobConfigsModel = _p5._0;
	var newJobConfigsCmd = _p5._1;
	var _p6 = _Giga_dev$newman$Pages_JobConfigs$init;
	var jobConfigsModel = _p6._0;
	var jobConfigsCmd = _p6._1;
	var _p7 = _Giga_dev$newman$Pages_Suites$init;
	var suitesModel = _p7._0;
	var suitesCmd = _p7._1;
	var _p8 = _Giga_dev$newman$Pages_Agents$init;
	var agentsModel = _p8._0;
	var agentsCmd = _p8._1;
	var _p9 = _Giga_dev$newman$Pages_Builds$init;
	var buildsModel = _p9._0;
	var buildsCmd = _p9._1;
	var _p10 = _Giga_dev$newman$Pages_Jobs$init;
	var jobsModel = _p10._0;
	var jobsCmd = _p10._1;
	var _p11 = _Giga_dev$newman$Pages_SubmitNewJob$init;
	var submitNewJobModel = _p11._0;
	var submitNewJobCmd = _p11._1;
	var currentRoute = function () {
		var _p12 = _Giga_dev$newman$Main$fromLocation(location);
		if (_p12.ctor === 'Just') {
			return _p12._0;
		} else {
			return _Giga_dev$newman$Main$HomeRoute;
		}
	}();
	var currentPage = _Giga_dev$newman$Main$routeToPage(currentRoute);
	var moreCmd = function () {
		var _p13 = currentRoute;
		switch (_p13.ctor) {
			case 'JobRoute':
				return A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Main$JobMsg,
					_Giga_dev$newman$Pages_Job$initCmd(_p13._0));
			case 'JobConfigRoute':
				return A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Main$JobConfigMsg,
					_Giga_dev$newman$Pages_JobConfig$getJobConfigInfoCmd(_p13._0));
			case 'BuildRoute':
				return A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Main$BuildMsg,
					_Giga_dev$newman$Pages_Build$initCmd(_p13._0));
			case 'SuiteRoute':
				return A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Main$SuiteMsg,
					_Giga_dev$newman$Pages_Suite$getSuiteInfoCmd(_p13._0));
			case 'TestRoute':
				return A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Main$TestMsg,
					_Giga_dev$newman$Pages_Test$getTestDataCmd(_p13._0));
			case 'TestHistoryRoute':
				return A2(
					_elm_lang$core$Platform_Cmd$map,
					_Giga_dev$newman$Main$TestHistoryMsg,
					_Giga_dev$newman$Pages_TestHistory$initCmd(_p13._0));
			default:
				return _elm_lang$core$Platform_Cmd$none;
		}
	}();
	return {
		ctor: '_Tuple2',
		_0: {
			currentPage: currentPage,
			currentRoute: currentRoute,
			submitNewJobModel: submitNewJobModel,
			jobsModel: jobsModel,
			buildsModel: buildsModel,
			agentsModel: agentsModel,
			homeModel: homeModel,
			manageNewmanModel: manageNewmanModel,
			suitesModel: suitesModel,
			jobConfigsModel: jobConfigsModel,
			newJobConfigsModel: newJobConfigsModel,
			topBarModel: topBarModel,
			webSocketModel: _Giga_dev$newman$Utils_WebSocket$initModel(location)
		},
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$SubmitNewJobMsg, submitNewJobCmd),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobsMsg, jobsCmd),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$BuildsMsg, buildsCmd),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$AgentsMsg, agentsCmd),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobConfigsMsg, jobConfigsCmd),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$NewJobConfigMsg, newJobConfigsCmd),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$HomeMsg, homeCmd),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$ManageNewmanMsg, manageNewmanCmd),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$SuitesMsg, suitesCmd),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$TopBarMsg, topBarCmd),
													_1: {
														ctor: '::',
														_0: moreCmd,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			})
	};
};
var _Giga_dev$newman$Main$update = F2(
	function (msg, model) {
		var _p14 = {ctor: '_Tuple2', _0: msg, _1: model.currentPage};
		switch (_p14._0.ctor) {
			case 'GoTo':
				var _p15 = _p14._0._0;
				if (_p15.ctor === 'Just') {
					var _p18 = _p15._0;
					var _p16 = {ctor: '_Tuple2', _0: _p18, _1: model.currentRoute};
					if ((_p16._0.ctor === 'JobRoute') && (_p16._1.ctor === 'JobRoute')) {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var newPage = _Giga_dev$newman$Main$routeToPage(_p18);
						var newModel = _elm_lang$core$Native_Utils.update(
							model,
							{currentRoute: _p18, currentPage: newPage});
						var _p17 = _p18;
						switch (_p17.ctor) {
							case 'JobRoute':
								return {
									ctor: '_Tuple2',
									_0: newModel,
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$JobMsg,
										_Giga_dev$newman$Pages_Job$getJobInfoCmd(_p17._0))
								};
							case 'JobConfigRoute':
								return {
									ctor: '_Tuple2',
									_0: newModel,
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$JobConfigMsg,
										_Giga_dev$newman$Pages_JobConfig$getJobConfigInfoCmd(_p17._0))
								};
							case 'BuildRoute':
								return {
									ctor: '_Tuple2',
									_0: newModel,
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$BuildMsg,
										_Giga_dev$newman$Pages_Build$getBuildInfoCmd(_p17._0))
								};
							case 'SuiteRoute':
								return {
									ctor: '_Tuple2',
									_0: newModel,
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$SuiteMsg,
										_Giga_dev$newman$Pages_Suite$getSuiteInfoCmd(_p17._0))
								};
							case 'TestRoute':
								return {
									ctor: '_Tuple2',
									_0: newModel,
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$TestMsg,
										_Giga_dev$newman$Pages_Test$getTestDataCmd(_p17._0))
								};
							case 'TestHistoryRoute':
								return {
									ctor: '_Tuple2',
									_0: newModel,
									_1: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$TestHistoryMsg,
										_Giga_dev$newman$Pages_TestHistory$getTestHistory(_p17._0))
								};
							default:
								return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
						}
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SubmitNewJobMsg':
				var _p19 = A2(_Giga_dev$newman$Pages_SubmitNewJob$update, _p14._0._0, model.submitNewJobModel);
				var updatedSubModel = _p19._0;
				var subCmd = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{submitNewJobModel: updatedSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$SubmitNewJobMsg, subCmd)
				};
			case 'JobsMsg':
				var _p20 = A2(_Giga_dev$newman$Pages_Jobs$update, _p14._0._0, model.jobsModel);
				var updatedSubModel = _p20._0;
				var subCmd = _p20._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{jobsModel: updatedSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobsMsg, subCmd)
				};
			case 'JobMsg':
				if (_p14._1.ctor === 'JobPage') {
					var _p21 = A2(_Giga_dev$newman$Pages_Job$update, _p14._0._0, _p14._1._0);
					var updatedSubModel = _p21._0;
					var subCmd = _p21._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentPage: _Giga_dev$newman$Main$JobPage(updatedSubModel)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobMsg, subCmd)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'BuildsMsg':
				var _p22 = A2(_Giga_dev$newman$Pages_Builds$update, _p14._0._0, model.buildsModel);
				var updatedBuildsModel = _p22._0;
				var buildsCmd = _p22._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{buildsModel: updatedBuildsModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$BuildsMsg, buildsCmd)
				};
			case 'BuildMsg':
				if (_p14._1.ctor === 'BuildPage') {
					if ((_p14._0._0.ctor === 'JobsTableMsg') && (_p14._0._0._0.ctor === 'RequestCompletedToggleJobs')) {
						var theMsg = _Giga_dev$newman$Views_JobsTable$RequestCompletedToggleJobs(_p14._0._0._0._0);
						var _p23 = A2(
							_Giga_dev$newman$Pages_Build$update,
							_Giga_dev$newman$Pages_Build$JobsTableMsg(theMsg),
							_p14._1._0);
						var updatedSubModel = _p23._0;
						var subCmd = _p23._1;
						var _p24 = A2(
							_Giga_dev$newman$Pages_Jobs$update,
							_Giga_dev$newman$Pages_Jobs$JobsTableMsg(theMsg),
							model.jobsModel);
						var updatedJobsModel = _p24._0;
						var jobsSubCmd = _p24._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									currentPage: _Giga_dev$newman$Main$BuildPage(updatedSubModel),
									jobsModel: updatedJobsModel
								}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$BuildMsg, subCmd),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobsMsg, jobsSubCmd),
										_1: {ctor: '[]'}
									}
								})
						};
					} else {
						var _p25 = A2(_Giga_dev$newman$Pages_Build$update, _p14._0._0, _p14._1._0);
						var updatedSubModel = _p25._0;
						var subCmd = _p25._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									currentPage: _Giga_dev$newman$Main$BuildPage(updatedSubModel)
								}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$BuildMsg, subCmd)
						};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'AgentsMsg':
				var _p26 = A2(_Giga_dev$newman$Pages_Agents$update, _p14._0._0, model.agentsModel);
				var updatedAgentsModel = _p26._0;
				var agentsCmd = _p26._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{agentsModel: updatedAgentsModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$AgentsMsg, agentsCmd)
				};
			case 'JobConfigsMsg':
				var _p27 = A2(_Giga_dev$newman$Pages_JobConfigs$update, _p14._0._0, model.jobConfigsModel);
				var updatedJobConfigsModel = _p27._0;
				var jobConfigsCmd = _p27._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{jobConfigsModel: updatedJobConfigsModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobConfigsMsg, jobConfigsCmd)
				};
			case 'NewJobConfigMsg':
				var _p28 = A2(_Giga_dev$newman$Pages_NewJobConfig$update, _p14._0._0, model.newJobConfigsModel);
				var updatedNewJobConfigsModel = _p28._0;
				var newJobConfigsCmd = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{newJobConfigsModel: updatedNewJobConfigsModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$NewJobConfigMsg, newJobConfigsCmd)
				};
			case 'JobConfigMsg':
				if (_p14._1.ctor === 'JobConfigPage') {
					var _p29 = A2(_Giga_dev$newman$Pages_JobConfig$update, _p14._0._0, _p14._1._0);
					var updatedSubModel = _p29._0;
					var subCmd = _p29._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentPage: _Giga_dev$newman$Main$JobConfigPage(updatedSubModel)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$JobConfigMsg, subCmd)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SuitesMsg':
				var _p30 = A2(_Giga_dev$newman$Pages_Suites$update, _p14._0._0, model.suitesModel);
				var updatedSuitesModel = _p30._0;
				var suitesCmd = _p30._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{suitesModel: updatedSuitesModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$SuitesMsg, suitesCmd)
				};
			case 'HomeMsg':
				var _p32 = A2(_Giga_dev$newman$Pages_Home$update, _p14._0._0, model.homeModel);
				var updatedSubModel = _p32._0;
				var subCmd = _p32._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{homeModel: updatedSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$HomeMsg, subCmd)
				};
			case 'ManageNewmanMsg':
				var _p33 = A2(_Giga_dev$newman$Pages_ManageNewman$update, _p14._0._0, model.manageNewmanModel);
				var updatedManageNewmanModel = _p33._0;
				var manageNewmanCmd = _p33._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{manageNewmanModel: updatedManageNewmanModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$ManageNewmanMsg, manageNewmanCmd)
				};
			case 'SuiteMsg':
				if (_p14._1.ctor === 'SuitePage') {
					var _p31 = A2(_Giga_dev$newman$Pages_Suite$update, _p14._0._0, _p14._1._0);
					var updatedSubModel = _p31._0;
					var subCmd = _p31._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentPage: _Giga_dev$newman$Main$SuitePage(updatedSubModel)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$SuiteMsg, subCmd)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'TestMsg':
				if (_p14._1.ctor === 'TestPage') {
					var _p34 = A2(_Giga_dev$newman$Pages_Test$update, _p14._0._0, _p14._1._0);
					var updatedSubModel = _p34._0;
					var subCmd = _p34._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentPage: _Giga_dev$newman$Main$TestPage(updatedSubModel)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$TestMsg, subCmd)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'TopBarMsg':
				var _p35 = A2(_Giga_dev$newman$Views_TopBar$update, _p14._0._0, model.topBarModel);
				var updatedSubModel = _p35._0;
				var subCmd = _p35._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{topBarModel: updatedSubModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$TopBarMsg, subCmd)
				};
			case 'TestHistoryMsg':
				if (_p14._1.ctor === 'TestHistoryPage') {
					var _p36 = A2(_Giga_dev$newman$Pages_TestHistory$update, _p14._0._0, _p14._1._0);
					var updatedSubModel = _p36._0;
					var subCmd = _p36._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentPage: _Giga_dev$newman$Main$TestHistoryPage(updatedSubModel)
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _Giga_dev$newman$Main$TestHistoryMsg, subCmd)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var event = _Giga_dev$newman$Utils_WebSocket$toEvent(_p14._0._0);
				var cmd = function () {
					var _p37 = event;
					if (_p37.ctor === 'Ok') {
						var _p38 = _p37._0;
						return _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Platform_Cmd$map,
									_Giga_dev$newman$Main$JobsMsg,
									_Giga_dev$newman$Pages_Jobs$handleEvent(_p38)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Platform_Cmd$map,
										_Giga_dev$newman$Main$JobMsg,
										_Giga_dev$newman$Pages_Job$handleEvent(_p38)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Platform_Cmd$map,
											_Giga_dev$newman$Main$AgentsMsg,
											_Giga_dev$newman$Pages_Agents$handleEvent(_p38)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$core$Platform_Cmd$map,
												_Giga_dev$newman$Main$BuildsMsg,
												_Giga_dev$newman$Pages_Builds$handleEvent(_p38)),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$core$Platform_Cmd$map,
													_Giga_dev$newman$Main$SuitesMsg,
													_Giga_dev$newman$Pages_Suites$handleEvent(_p38)),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$core$Platform_Cmd$map,
														_Giga_dev$newman$Main$SuiteMsg,
														_Giga_dev$newman$Pages_Suite$handleEvent(_p38)),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$core$Platform_Cmd$map,
															_Giga_dev$newman$Main$ManageNewmanMsg,
															_Giga_dev$newman$Pages_ManageNewman$handleEvent(_p38)),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$core$Platform_Cmd$map,
																_Giga_dev$newman$Main$JobConfigsMsg,
																_Giga_dev$newman$Pages_JobConfigs$handleEvent(_p38)),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$core$Platform_Cmd$map,
																	_Giga_dev$newman$Main$HomeMsg,
																	_Giga_dev$newman$Pages_Home$handleEvent(_p38)),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$core$Platform_Cmd$map,
																		_Giga_dev$newman$Main$BuildMsg,
																		_Giga_dev$newman$Pages_Build$handleEvent(_p38)),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$core$Platform_Cmd$map,
																			_Giga_dev$newman$Main$TopBarMsg,
																			_Giga_dev$newman$Views_TopBar$handleEvent(_p38)),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$core$Platform_Cmd$map,
																				_Giga_dev$newman$Main$SubmitNewJobMsg,
																				_Giga_dev$newman$Pages_SubmitNewJob$handleEvent(_p38)),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$core$Platform_Cmd$map,
																					_Giga_dev$newman$Main$TestMsg,
																					_Giga_dev$newman$Pages_Test$handleEvent(_p38)),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							});
					} else {
						return _elm_lang$core$Platform_Cmd$none;
					}
				}();
				return {ctor: '_Tuple2', _0: model, _1: cmd};
		}
	});
var _Giga_dev$newman$Main$viewBody = function (model) {
	var _p39 = model.currentPage;
	switch (_p39.ctor) {
		case 'SubmitNewJobPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$SubmitNewJobMsg,
				_Giga_dev$newman$Pages_SubmitNewJob$view(model.submitNewJobModel));
		case 'JobsPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$JobsMsg,
				_Giga_dev$newman$Pages_Jobs$view(model.jobsModel));
		case 'JobPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$JobMsg,
				_Giga_dev$newman$Pages_Job$view(_p39._0));
		case 'BuildsPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$BuildsMsg,
				_Giga_dev$newman$Pages_Builds$view(model.buildsModel));
		case 'BuildPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$BuildMsg,
				_Giga_dev$newman$Pages_Build$view(_p39._0));
		case 'AgentsPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$AgentsMsg,
				_Giga_dev$newman$Pages_Agents$view(model.agentsModel));
		case 'JobConfigsPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$JobConfigsMsg,
				_Giga_dev$newman$Pages_JobConfigs$view(model.jobConfigsModel));
		case 'NewJobConfigsPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$NewJobConfigMsg,
				_Giga_dev$newman$Pages_NewJobConfig$view(model.newJobConfigsModel));
		case 'JobConfigPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$JobConfigMsg,
				_Giga_dev$newman$Pages_JobConfig$view(_p39._0));
		case 'SuitesPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$SuitesMsg,
				_Giga_dev$newman$Pages_Suites$view(model.suitesModel));
		case 'ManageNewmanPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$ManageNewmanMsg,
				_Giga_dev$newman$Pages_ManageNewman$view(model.manageNewmanModel));
		case 'SuitePage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$SuiteMsg,
				_Giga_dev$newman$Pages_Suite$view(_p39._0));
		case 'HomePage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$HomeMsg,
				_Giga_dev$newman$Pages_Home$view(model.homeModel));
		case 'TestPage':
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$TestMsg,
				_Giga_dev$newman$Pages_Test$view(_p39._0));
		default:
			return A2(
				_elm_lang$html$Html$map,
				_Giga_dev$newman$Main$TestHistoryMsg,
				_Giga_dev$newman$Pages_TestHistory$view(_p39._0));
	}
};
var _Giga_dev$newman$Main$view = function (model) {
	var isActive = function (page) {
		return _evancz$url_parser$UrlParser$parsePath;
	};
	var pages = {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'Home', _1: '#'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'Submit New Job', _1: '#submit-new-job'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'Jobs', _1: '#jobs'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'Builds', _1: '#builds'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'Agents', _1: '#agents'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'Suites', _1: '#suites'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'Job Configurations', _1: '#jobConfigs'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'Manage Newman', _1: '#manageNewman'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('wrapper'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_CDN$stylesheet,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$nav,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('navbar navbar-toggleable navbar-inverse bg-primary fixed-top'),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'navigation'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('navbar-header'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('navbar-brand'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('#'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Newman'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$map,
								_Giga_dev$newman$Main$TopBarMsg,
								_Giga_dev$newman$Views_TopBar$view(model.topBarModel)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('collapse navbar-collapse'),
										_1: {
											ctor: '::',
											_0: A2(_elm_lang$html$Html_Attributes$attribute, 'style', 'position: absolute;'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$ul,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('nav  flex-column side-nav'),
												_1: {ctor: '[]'}
											},
											A2(
												_elm_lang$core$List$indexedMap,
												F2(
													function (index, _p40) {
														var _p41 = _p40;
														var _p42 = _p41._1;
														return A2(
															_elm_lang$html$Html$li,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('nav-item'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$a,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$class('nav-link'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$classList(
																				{
																					ctor: '::',
																					_0: {
																						ctor: '_Tuple2',
																						_0: 'active',
																						_1: _elm_lang$core$Native_Utils.eq(
																							_Giga_dev$newman$Main$routeToString(model.currentRoute),
																							_p42)
																					},
																					_1: {ctor: '[]'}
																				}),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$href(_p42),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(_p41._0),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															});
													}),
												pages)),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _Giga_dev$newman$Main$viewBody(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _Giga_dev$newman$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Platform_Sub$map,
				_Giga_dev$newman$Main$WebSocketMsg,
				_Giga_dev$newman$Utils_WebSocket$subscriptions(model.webSocketModel)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Sub$map,
					_Giga_dev$newman$Main$SubmitNewJobMsg,
					_Giga_dev$newman$Pages_SubmitNewJob$subscriptions(model.submitNewJobModel)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Platform_Sub$map,
						_Giga_dev$newman$Main$JobsMsg,
						_Giga_dev$newman$Pages_Jobs$subscriptions(model.jobsModel)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Platform_Sub$map,
							_Giga_dev$newman$Main$AgentsMsg,
							_Giga_dev$newman$Pages_Agents$subscriptions(model.agentsModel)),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _Giga_dev$newman$Main$GoTo = function (a) {
	return {ctor: 'GoTo', _0: a};
};
var _Giga_dev$newman$Main$locFor = function (location) {
	return _Giga_dev$newman$Main$GoTo(
		_Giga_dev$newman$Main$fromLocation(location));
};
var _Giga_dev$newman$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_Giga_dev$newman$Main$locFor,
	{init: _Giga_dev$newman$Main$init, view: _Giga_dev$newman$Main$view, update: _Giga_dev$newman$Main$update, subscriptions: _Giga_dev$newman$Main$subscriptions})();

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _Giga_dev$newman$Main$main !== 'undefined') {
    _Giga_dev$newman$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

