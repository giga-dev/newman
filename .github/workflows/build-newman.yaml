name: build newman

env:
  AWS_GHA_ROLE: arn:aws:iam::573366771204:role/xap-github-actions
  AWS_REGION: us-east-1
  ECR_REPOSITORY: xap-newman/server

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - master
    paths-ignore:
      - helm/**

jobs:
  build-docker-image:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_GHA_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Fetch latest ECR tag and increment patch version
        id: get-latest-tag
        run: |
          # Get the latest tag from ECR (or set to default if no tags)
          LATEST_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY \
          --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' \
          --output text 2>/dev/null | awk '{print ($0 == "None" || $0 == "" ? "0.1.8" : $0)}')
          
          # Increment the patch version by 1
          IFS='.' read -r -a TAG_PARTS <<< "$LATEST_TAG"
          PATCH_VERSION=$((TAG_PARTS[2] + 1))
          NEW_TAG="${TAG_PARTS[0]}.${TAG_PARTS[1]}.$PATCH_VERSION"
          
          # Save the new tag as an environment variable
          echo "image_tag=$NEW_TAG" >> $GITHUB_ENV


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v6
        timeout-minutes: 15
        with:
          platforms: |
            linux/amd64
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.image_tag }}


      - name: Update helm chart
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: helm-chart-update
          client-payload: '{"application-image-tag": "${{ steps.tag.outputs.image_tag }}"}'
          
